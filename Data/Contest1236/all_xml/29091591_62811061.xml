<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29091591_62811061.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>A</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>huhx</name></decl>, <decl><type ref="prev"/><name>huhx2</name></decl>, <decl><type ref="prev"/><name>huhy</name></decl>, <decl><type ref="prev"/><name>huhy2</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>  ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>F</name> <operator>&gt;&gt;</operator> <name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>S</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>F</name><operator>--</operator></expr><operator>,</operator> <expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>S</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>huhx</name><index>[<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>F</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>huhy</name><index>[<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>S</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>huh</name> <range>: <expr><name>huhx</name></expr></range></decl></init>)</control> <block>{
        <expr_stmt><expr><name><name>huhx2</name><index>[<expr><name><name>huh</name><operator>.</operator><name>F</name></name></expr>]</index></name> <operator>=</operator> <name><name>huh</name><operator>.</operator><name>S</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>huhx2</name><index>[<expr><name><name>huh</name><operator>.</operator><name>F</name></name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>huhx2</name><index>[<expr><name><name>huh</name><operator>.</operator><name>F</name></name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>huh</name> <range>: <expr><name>huhy</name></expr></range></decl></init>)</control> <block>{
        <expr_stmt><expr><name><name>huhy2</name><index>[<expr><name><name>huh</name><operator>.</operator><name>F</name></name></expr>]</index></name> <operator>=</operator> <name><name>huh</name><operator>.</operator><name>S</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>huhy2</name><index>[<expr><name><name>huh</name><operator>.</operator><name>F</name></name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>huhy2</name><index>[<expr><name><name>huh</name><operator>.</operator><name>F</name></name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>huhx</name> <operator>=</operator> <name>huhx2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>huhy</name> <operator>=</operator> <name>huhy2</name></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name><name>array</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name></type> <name>cur</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>e</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>col</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>add</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>Lx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>Ly</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>Rx</name> <init>= <expr><name>n</name></expr></init></decl>, <decl><type ref="prev"/><name>Ry</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt> 
    <decl_stmt><decl><type><name>ll</name></type> <name>fuu</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>add</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>fuu</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{
        <comment type="line" format="doxygen">////cerr &lt;&lt; cur[0] &lt;&lt; " " &lt;&lt; cur[1] &lt;&lt; " " &lt;&lt; cur[2] &lt;&lt; " " &lt;&lt; Lx &lt;&lt; " " &lt;&lt; Ly &lt;&lt; " " &lt;&lt; Rx &lt;&lt; " " &lt;&lt; Ry &lt;&lt; endl;</comment>
        <if>if<condition>(<expr><name><name>cur</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>Lx</name> <operator>=</operator> <name><name>cur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
            <if>if<condition>(<expr><call><name><name>huhx</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name><name>cur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>huhx</name><index>[<expr><name><name>cur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>huhx</name><index>[<expr><name><name>cur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cur</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>it</name> <operator>==</operator> <name><name>huhx</name><index>[<expr><name><name>cur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> 
                <block type="pseudo"><expr_stmt><expr><name>e</name> <operator>=</operator> <name>Ry</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>Ry</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>it</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            }</block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>e</name> <operator>=</operator> <name>Ry</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
            <expr_stmt><expr><name>add</name> <operator>=</operator> <name>e</name> <operator>-</operator> <name><name>cur</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cur</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if<condition>(<expr><name><name>cur</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>Ry</name> <operator>=</operator> <name><name>cur</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <if>if<condition>(<expr><call><name><name>huhy</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name><name>cur</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>huhy</name><index>[<expr><name><name>cur</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>huhy</name><index>[<expr><name><name>cur</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>it</name> <operator>==</operator> <name><name>huhy</name><index>[<expr><name><name>cur</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> 
                <block type="pseudo"><expr_stmt><expr><name>e</name> <operator>=</operator> <name>Rx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>Rx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>it</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            }</block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>e</name> <operator>=</operator> <name>Rx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
            <expr_stmt><expr><name>add</name> <operator>=</operator> <name>e</name> <operator>-</operator> <name><name>cur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if<condition>(<expr><name><name>cur</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>Rx</name> <operator>=</operator> <name><name>cur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
            <if>if<condition>(<expr><call><name><name>huhx</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name><name>cur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>huhx</name><index>[<expr><name><name>cur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>huhx</name><index>[<expr><name><name>cur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cur</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>it</name> <operator>==</operator> <name><name>huhx</name><index>[<expr><name><name>cur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>e</name> <operator>=</operator> <name>Ly</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>Ly</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><call><name>prev</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            }</block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>e</name> <operator>=</operator> <name>Ly</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
            <expr_stmt><expr><name>add</name> <operator>=</operator> <name><name>cur</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>e</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cur</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if<condition>(<expr><name><name>cur</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>Ly</name> <operator>=</operator> <name><name>cur</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <if>if<condition>(<expr><call><name><name>huhy</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name><name>cur</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>huhy</name><index>[<expr><name><name>cur</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>huhy</name><index>[<expr><name><name>cur</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>it</name> <operator>==</operator> <name><name>huhy</name><index>[<expr><name><name>cur</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then> 
                <block type="pseudo"><expr_stmt><expr><name>e</name> <operator>=</operator> <name>Lx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><operator>*</operator><call><name>prev</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>Lx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            }</block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>e</name> <operator>=</operator>  <name>Lx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
            <expr_stmt><expr><name>add</name> <operator>=</operator> <name><name>cur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>e</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
        <expr_stmt><expr><name><name>cur</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>cur</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>fuu</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>col</name> <operator>+=</operator> <name>add</name></expr>;</expr_stmt>
    }</block></while>
    <comment type="line">//cerr &lt;&lt; cur[0] &lt;&lt; " " &lt;&lt; cur[1] &lt;&lt; " " &lt;&lt; cur[2] &lt;&lt; " " &lt;&lt; Lx &lt;&lt; " " &lt;&lt; Ly &lt;&lt; " " &lt;&lt; Rx &lt;&lt; " " &lt;&lt; Ry &lt;&lt; endl;</comment>
    <comment type="line">//cerr &lt;&lt; col &lt;&lt; " " &lt;&lt; n * m - k &lt;&lt;endl;</comment>
    <if>if<condition>(<expr><name>col</name> <operator>!=</operator> <name>n</name> <operator>*</operator> <name>m</name> <operator>-</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal></expr>;</expr_stmt></block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
