<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29058912_62812842.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">2e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>posDiagToJ</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>negDiagToJ</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>memoPos</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>memoNeg</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>solvePos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{
    <if>if<condition>(<expr><name>j</name> <operator>==</operator> <name>m</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>i</name></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name><name>memoPos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>count</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>memoPos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>posDiagToJ</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>it</name> <operator>==</operator> <name><name>posDiagToJ</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><operator>(</operator><name>m</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>j</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><literal type="number">0LL</literal></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>blockedJ</name> <init>= <expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><name>blockedJ</name> <operator>-</operator> <name>j</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>solvePos</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><name>temp</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name><operator>+</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><name><name>memoPos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>res</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>solveNeg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{
    <if>if<condition>(<expr><name>j</name> <operator>==</operator> <name>m</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>i</name></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name><name>memoNeg</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>count</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>memoNeg</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>negDiagToJ</name><index>[<expr><name>j</name><operator>-</operator><name>i</name><operator>+</operator><name>n</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>it</name> <operator>==</operator> <name><name>negDiagToJ</name><index>[<expr><name>j</name><operator>-</operator><name>i</name><operator>+</operator><name>n</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><operator>(</operator><name>m</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>j</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><operator>*</operator><name>it</name> <operator>-</operator> <name>j</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>solveNeg</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><name>temp</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name><operator>+</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><name><name>memoNeg</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>res</name></expr>;</return>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>box</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>box</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>--</operator><name>box</name></expr>;</expr_stmt>
        <comment type="line">//cout &lt;&lt; "diag: " &lt;&lt; j+box &lt;&lt; endl;</comment>
        <expr_stmt><expr><name><name>posDiagToJ</name><index>[<expr><name>j</name><operator>+</operator><name>box</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>negDiagToJ</name><index>[<expr><name>j</name><operator>-</operator><name>box</name><operator>+</operator><name>n</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>lows</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>highs</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>lows</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>solvePos</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>highs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>solveNeg</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <comment type="block">/*
    cout &lt;&lt; "lows:\n";
    for(int i = 0; i &lt; n; ++i) {
        cout &lt;&lt; lows[i] &lt;&lt; ' ';
    }
    cout &lt;&lt; "highs:\n";
    for(int i = 0; i &lt; n; ++i) {
        cout &lt;&lt; highs[i] &lt;&lt; ' ';
    }
    */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>highs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>lows</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>
</unit>
