<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29063859_62784139.cpp"><comment type="block">/*
ID: espr1t
TASK: 
KEYWORDS: 
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>in</name> <init>= <expr><name>stdin</name></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>out</name> <init>= <expr><name>stdout</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAX</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{
<comment type="line">//	in = fopen("A.in", "rt");</comment>
	
	<decl_stmt><decl><type><name>int</name></type> <name>numTests</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>fscanf</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>numTests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<for>for <control>(<init><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>numTests</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{
	    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
	    <expr_stmt><expr><call><name>fscanf</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	    <while>while <condition>(<expr><name>b</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{
	        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	        <expr_stmt><expr><name>b</name> <operator>-=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>c</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        }</block></while>
	    <while>while <condition>(<expr><name>a</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{
	        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	        <expr_stmt><expr><name>a</name> <operator>-=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>b</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
