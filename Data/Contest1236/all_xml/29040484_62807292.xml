<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29040484_62807292.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>A</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>B</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>ma</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>kk</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>kk</name></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>kk</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>B</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">1e5</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>


    <decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name>m</name></expr></init></decl>,<decl><type ref="prev"/><name>u</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>d</name><init>=<expr><name>n</name></expr></init></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>x</name><operator>=</operator><name>y</name><operator>=</operator><name>k</name><operator>=</operator><name>a</name><operator>=</operator><name>b</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>sum</name><init>=<expr><name>n</name></expr></init></decl>,<decl><type ref="prev"/><name>cnt</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>sum</name><operator>*=</operator><name>m</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{
        <if>if<condition>(<expr><name>k</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>it</name><operator>=</operator><name><name>B</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>a</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>u</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <elseif>else <if>if<condition>(<expr><name>k</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>it</name><operator>=</operator><name><name>A</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>b</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>r</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name>k</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>it</name><operator>=</operator><name><name>B</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>a</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>d</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <else>else<block>{
            <expr_stmt><expr><name>it</name><operator>=</operator><name><name>A</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>b</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>l</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><name>k</name><operator>=</operator><name>k</name><operator>%</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>cnt</name><operator>+=</operator><call><name>abs</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><name>x</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name>b</name><operator>-</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>x</name><operator>=</operator><name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name><operator>=</operator><name>b</name></expr>;</expr_stmt>

        <if>if<condition>(<expr><name><name>ma</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>==</operator><name><name>ma</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>ma</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name><name>ma</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></else></if>
        <if>if<condition>(<expr><name><name>ma</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
    }</block></while>

    <if>if<condition>(<expr><name>cnt</name><operator>+</operator><name>kk</name><operator>==</operator><name>sum</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
