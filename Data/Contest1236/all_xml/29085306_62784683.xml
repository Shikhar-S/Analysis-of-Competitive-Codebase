<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29085306_62784683.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>
 
<decl_stmt><decl><type><name>ifstream</name></type> <name>fin</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ofstream</name></type> <name>fout</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
 
<function><type><name>bool</name></type> <name>isPrime</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <literal type="number">4</literal> <operator>||</operator> <name>x</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>x</name> <operator>%</operator> <literal type="number">3</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>x</name> <operator>==</operator> <literal type="number">3</literal></expr>;</return></block></then></if>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>x</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">6</literal></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name>x</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>x</name> <operator>%</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for> <return>return <expr><literal type="number">1</literal></expr>;</return> }</block></function>
 
<function><type><name>int</name></type> <name>NumDigits</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
    <comment type="line">//x = abs(x);</comment>
    <return>return <expr><operator>(</operator><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">10</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>:
        <expr><operator>(</operator><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">100</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>:
        <expr><operator>(</operator><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>:
        <expr><operator>(</operator><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>:
        <expr><operator>(</operator><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">100000</literal></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>:
        <expr><operator>(</operator><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">1000000</literal></expr> ?</condition><then> <expr><literal type="number">6</literal></expr> </then><else>:
        <expr><operator>(</operator><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">10000000</literal></expr> ?</condition><then> <expr><literal type="number">7</literal></expr> </then><else>:
        <expr><operator>(</operator><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">100000000</literal></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>:
        <expr><operator>(</operator><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">1000000000</literal></expr> ?</condition><then> <expr><literal type="number">9</literal></expr> </then><else>:
        <expr><literal type="number">10</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</return>
}</block></function>
 
<function><specifier>inline</specifier> <type><name>void</name></type> <name>boostIO</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>precision</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
 
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fori</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>for(int i = 0; i &lt; (n); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forj</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>for(int j = 0; j &lt; (n); ++j)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fork</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int k = 0; k &lt; (n); ++k)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forx</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int x = 0; x &lt; (n); ++x)</cpp:value></cpp:define>
 
<comment type="line">//#define LONG_LONG_MAX  9223372036854775807</comment>
<comment type="line">//#define LONG_LONG_MIN   -9223372036854775807</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>max(a, max(b, c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>min(a, min(b, c))</cpp:value></cpp:define>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(), (x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #x &lt;&lt; " " &lt;&lt; x &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug_p</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #x &lt;&lt; " " &lt;&lt; x.ff &lt;&lt; " " &lt;&lt; x.ss &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug_v</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #x &lt;&lt; " "; for (auto ii : x) cout &lt;&lt; ii &lt;&lt; " "; cout &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug_vp</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #x &lt;&lt; " "; for (auto ii : x) cout &lt;&lt; '[' &lt;&lt; ii.ff &lt;&lt; " " &lt;&lt; ii.ss &lt;&lt; ']'; cout &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Return</name></cpp:macro> <cpp:value>cerr&lt;&lt;endl&lt;&lt;"RUNTIME: "&lt;&lt;1.0*clock()/CLOCKS_PER_SEC &lt;&lt; " s" &lt;&lt;endl; return 0;</cpp:value></cpp:define>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.14159265</cpp:value></cpp:define>
 
<decl_stmt><decl><type><name>ll</name></type> <name><name>Pow10</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <init>= <expr><block>{<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1</literal></expr>,<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e1</literal></expr>,<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e2</literal></expr>,<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e3</literal></expr>,<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e4</literal></expr>,<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e5</literal></expr>,<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e6</literal></expr>,<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e7</literal></expr>,<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e8</literal></expr>,<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e9</literal></expr>,<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e10</literal></expr>,
                <expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e11</literal></expr>,<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e12</literal></expr>,<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e13</literal></expr>,<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e14</literal></expr>,<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e15</literal></expr>,<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e16</literal></expr>,<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e17</literal></expr>,<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e18</literal></expr>}</block></expr></init></decl>;</decl_stmt>
 
<comment type="line">//int mid = low + ((high - low) / 2);</comment>
<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>b</name></expr> ?</condition><then> <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>a</name></expr></else></ternary></expr>;</return> }</block></function>
<function><type><name>ll</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>a</name> <operator>*</operator> <name>b</name> <operator>/</operator> <call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
 
 <comment type="block">/*
struct Mine {
    int g = 0;
    int x = 0;
    int y = 0;
    int X = 0;
    int Y = 0;
};
/
struct comp {
    bool operator()(Mine const &amp; a, Mine const &amp; b) {
        return a.g &gt;= b.g;
    }
};
set&lt;Mine, comp&gt; Set;
*/</comment>
 
<comment type="line">//__builtin_clz(int); amount of 0 in the begining</comment>
<comment type="line">//__builtin_ctz(int); amoint of 0 in the end</comment>
<comment type="line">//__builtin_popcount(int); amount of 1</comment>
 
<comment type="line">//memset(dp, -1, sizeof dp);</comment>
 
<comment type="line" format="doxygen">/////////////////////</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>Mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<comment type="line" format="doxygen">////////////////////</comment>
 
<struct><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> struct <name>Fenwick</name> <block>{<public type="default">
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>V</name></decl>;</decl_stmt>
    <constructor><name>Fenwick</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><member_init_list>: <call><name>V</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
    <function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>V</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name> <operator>|=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>V</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt></block></for> }</block></function>
    <function><type><name>T</name></type> <name>sum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>T</name></type> <name>r</name> <init>= <expr><call><name>T</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <for>for <control>(<init><expr><operator>--</operator><name>i</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>+=</operator> <name><name>V</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for> <return>return <expr><name>r</name></expr>;</return> }</block></function>
    <function><type><name>T</name></type> <name>sum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>sum</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>sum</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
</public>}</block>;</struct>
 
<function><type><name>int</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">1</literal></expr></init></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name> <init>= <expr><literal type="number">1</literal></expr></init></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>e</name> <init>= <expr><literal type="number">1</literal></expr></init></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name> <init>= <expr><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>a</name> <operator>%=</operator> <name>Mod</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>%=</operator> <name>Mod</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>%=</operator> <name>Mod</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>%=</operator> <name>Mod</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>%=</operator> <name>Mod</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>%=</operator> <name>Mod</name></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>a</name> <operator>*</operator> <name>b</name>  <operator>%</operator> <name>Mod</name> <operator>*</operator> <name>c</name> <operator>%</operator> <name>Mod</name> <operator>*</operator> <name>d</name> <operator>%</operator> <name>Mod</name> <operator>*</operator> <name>e</name> <operator>%</operator> <name>Mod</name> <operator>*</operator> <name>g</name> <operator>%</operator> <name>Mod</name><operator>)</operator></expr>;</return>
}</block></function>
 
<function><type><name>int</name></type> <name>Pow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>b</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>Pow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>mul</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then>
    <else>else  <block>{
         <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>Pow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return  <expr><call><name>mul</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
}</block></function>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>boostIO</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <macro><name>fori</name><argument_list>(<argument>n</argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>b</name> <operator>-=</operator> <name>k</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> <operator>-=</operator> <name>k</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>k</name> <operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>k</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
