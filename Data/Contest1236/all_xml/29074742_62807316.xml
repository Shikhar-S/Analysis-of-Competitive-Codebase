<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29074742_62807316.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>res</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>c</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><empty_stmt>;</empty_stmt></block></while>
	<do>do<block>{
		<expr_stmt><expr><name>res</name><operator>=</operator><operator>(</operator><name>res</name><operator>*</operator><literal type="number">10</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>c</name><operator>^</operator><literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt>
	}</block> while<condition>(<expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition>;</do>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>Map</name></decl>, <decl><type ref="prev"/><name>Map2</name></decl>, <decl><type ref="prev"/><name>Map3</name></decl>, <decl><type ref="prev"/><name>Map4</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>N</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>M</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>K</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>K</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>b</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>Map</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>Map2</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>Map3</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><operator>-</operator><name>a</name></expr></argument>, <argument><expr><operator>-</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>Map4</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><operator>-</operator><name>b</name></expr></argument>, <argument><expr><operator>-</operator><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>nL</name><init>=<expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>nR</name><init>=<expr><name>M</name></expr></init></decl>, <decl><type ref="prev"/><name>nU</name><init>=<expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>nD</name><init>=<expr><name>N</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition><block>{
		<if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>auto</name></type> <name>f</name> <init>= <expr><call><name><name>Map</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>nU</name></expr></argument>, <argument><expr><name>nL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>f</name> <operator>!=</operator> <call><name><name>Map</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>f</name><operator>)</operator><operator>.</operator><name>first</name></name> <operator>==</operator> <name>nU</name> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>f</name><operator>)</operator><operator>.</operator><name>second</name></name> <operator>&lt;=</operator><name>nR</name></expr>)</condition><then><block>{
				<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>f</name><operator>)</operator><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>x</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>nR</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
					<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>nU</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>nD</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
						<if>if<condition>(<expr><call><name><name>Map2</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>==</operator><call><name><name>Map2</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
							<return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return>
						}</block></then></if>
					}</block></for>
				}</block></for>
				<expr_stmt><expr><name>nR</name> <operator>=</operator> <name>x</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>nU</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>auto</name></type> <name>f</name> <init>= <expr><call><name><name>Map2</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>nR</name></expr></argument>, <argument><expr><name>nU</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>f</name> <operator>!=</operator> <call><name><name>Map2</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>f</name><operator>)</operator><operator>.</operator><name>first</name></name> <operator>==</operator> <name>nR</name> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>f</name><operator>)</operator><operator>.</operator><name>second</name></name> <operator>&lt;=</operator><name>nD</name></expr>)</condition><then><block>{
				<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>f</name><operator>)</operator><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>nL</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>nR</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
					<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>x</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>nD</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
						<if>if<condition>(<expr><call><name><name>Map2</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>==</operator><call><name><name>Map2</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
							<return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return>
						}</block></then></if>
					}</block></for>
				}</block></for>
				<expr_stmt><expr><name>nD</name> <operator>=</operator> <name>x</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>nR</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>auto</name></type> <name>f</name> <init>= <expr><call><name><name>Map3</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><operator>-</operator><name>nD</name></expr></argument>, <argument><expr><operator>-</operator><name>nR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>f</name> <operator>!=</operator> <call><name><name>Map3</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>f</name><operator>)</operator><operator>.</operator><name>first</name></name> <operator>==</operator> <operator>-</operator><name>nD</name> <operator>&amp;&amp;</operator> <operator>-</operator><name><operator>(</operator><operator>*</operator><name>f</name><operator>)</operator><operator>.</operator><name>second</name></name> <operator>&gt;=</operator> <name>nL</name></expr>)</condition><then><block>{
				<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>-</operator><name><operator>(</operator><operator>*</operator><name>f</name><operator>)</operator><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>nL</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>x</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
					<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>nU</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>nD</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
						<if>if<condition>(<expr><call><name><name>Map2</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>==</operator><call><name><name>Map2</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
							<return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return>
						}</block></then></if>
					}</block></for>
				}</block></for>
				<expr_stmt><expr><name>nL</name><operator>=</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>nD</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>auto</name></type> <name>f</name> <init>= <expr><call><name><name>Map4</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><operator>-</operator><name>nL</name></expr></argument>, <argument><expr><operator>-</operator><name>nD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>f</name> <operator>!=</operator> <call><name><name>Map4</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>-</operator><name><operator>(</operator><operator>*</operator><name>f</name><operator>)</operator><operator>.</operator><name>first</name></name> <operator>==</operator> <name>nL</name> <operator>&amp;&amp;</operator> <operator>-</operator><name><operator>(</operator><operator>*</operator><name>f</name><operator>)</operator><operator>.</operator><name>second</name></name> <operator>&gt;=</operator><name>nU</name></expr>)</condition><then><block>{
				<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>-</operator><name><operator>(</operator><operator>*</operator><name>f</name><operator>)</operator><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>nL</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>nR</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
					<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>nU</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>x</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
						<if>if<condition>(<expr><call><name><name>Map2</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>==</operator><call><name><name>Map2</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
							<return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return>
						}</block></then></if>
					}</block></for>
				}</block></for>
				<expr_stmt><expr><name>nU</name><operator>=</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>nL</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
		<if>if<condition>(<expr><name>nU</name><operator>&gt;</operator><name>nD</name> <operator>||</operator> <name>nL</name><operator>&gt;</operator><name>nR</name></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
	}</block></while>
	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
