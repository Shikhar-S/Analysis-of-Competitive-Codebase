<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29043575_62810328.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>block_row</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>block_col</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dx</name><index>[]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dy</name><index>[]</index></name><init>=<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>walk</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>up</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>down</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>lft</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>rgt</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>turn</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{
        <if>if<condition>(<expr><name>d</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>up</name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>block_list</name> <init>= <expr><name><name>block_row</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><call><name><name>block_list</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>block_list</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>-</operator><call><name><name>block_list</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>yy</name></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>p</name><operator>&gt;=</operator><call><name><name>block_list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                <expr_stmt><expr><name>yy</name> <operator>=</operator> <name>rgt</name></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name>yy</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>block_list</name><index>[<expr><name>p</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>rgt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <if>if<condition>(<expr><name>yy</name><operator>==</operator><name>y</name></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>turn</name></expr>)</condition><then><block>{
                    <break>break;</break>
                }</block></then>
                <else>else<block>{
                    <expr_stmt><expr><name>turn</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>y</name> <operator>=</operator> <name>yy</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>rgt</name> <operator>=</operator> <name>yy</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>d</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name>turn</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>ret</name><operator>+=</operator><name>yy</name><operator>-</operator><name>y</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>y</name> <operator>=</operator> <name>yy</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>rgt</name> <operator>=</operator> <name>yy</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>d</name><operator>=</operator><operator>(</operator><name>d</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then>
        <elseif>else <if>if<condition>(<expr><name>d</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>rgt</name><operator>-=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>block_list</name> <init>= <expr><name><name>block_col</name><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><call><name><name>block_list</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>block_list</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-</operator><call><name><name>block_list</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>xx</name></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>p</name><operator>&gt;=</operator><call><name><name>block_list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                <expr_stmt><expr><name>xx</name> <operator>=</operator> <name>down</name></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name>xx</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>block_list</name><index>[<expr><name>p</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <if>if<condition>(<expr><name>xx</name><operator>==</operator><name>x</name></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>turn</name></expr>)</condition><then><block>{
                    <break>break;</break>
                }</block></then>
                <else>else<block>{
                    <expr_stmt><expr><name>turn</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>x</name> <operator>=</operator> <name>xx</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>down</name><operator>=</operator><name>xx</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>d</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name>turn</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>ret</name><operator>+=</operator><name>xx</name><operator>-</operator><name>x</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>x</name> <operator>=</operator> <name>xx</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>down</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>d</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name>d</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>down</name><operator>-=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>block_list</name> <init>= <expr><name><name>block_row</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><call><name><name>block_list</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>block_list</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>-</operator><call><name><name>block_list</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>yy</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>p</name><operator>-=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>p</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>yy</name> <operator>=</operator> <name>lft</name></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name>yy</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>block_list</name><index>[<expr><name>p</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>lft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <if>if<condition>(<expr><name>yy</name><operator>==</operator><name>y</name></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>turn</name></expr>)</condition><then><block>{
                    <break>break;</break>
                }</block></then>
                <else>else<block>{
                    <expr_stmt><expr><name>turn</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>y</name><operator>=</operator><name>yy</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>lft</name> <operator>=</operator> <name>yy</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>d</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name>turn</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>ret</name> <operator>+=</operator><name>y</name><operator>-</operator><name>yy</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>y</name><operator>=</operator><name>yy</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>lft</name> <operator>=</operator> <name>yy</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>d</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if></elseif>
        <else>else<block>{
            <expr_stmt><expr><name>lft</name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>block_list</name> <init>= <expr><name><name>block_col</name><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><call><name><name>block_list</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>block_list</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-</operator><call><name><name>block_list</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>xx</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>p</name><operator>-=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>p</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>xx</name> <operator>=</operator> <name>up</name></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name>xx</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>block_list</name><index>[<expr><name>p</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>up</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <if>if<condition>(<expr><name>xx</name><operator>==</operator><name>x</name></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>turn</name></expr>)</condition><then><block>{
                    <break>break;</break>
                }</block></then>
                <else>else<block>{
                    <expr_stmt><expr><name>turn</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>x</name> <operator>=</operator> <name>xx</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>up</name> <operator>=</operator> <name>xx</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>d</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name>turn</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>ret</name><operator>+=</operator><name>x</name><operator>-</operator><name>xx</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>x</name> <operator>=</operator> <name>xx</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>up</name> <operator>=</operator> <name>xx</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>d</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>;</expr_stmt>
            }</block></else></if>

        }</block></else></if>
    }</block></for>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>block_row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>block_col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>block_row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>block_row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>block_col</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>block_col</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><call><name>walk</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><operator>(</operator><name>cnt</name><operator>+</operator><name>k</name><operator>)</operator><operator>!=</operator><operator>(</operator><name>n</name><operator>*</operator><name>m</name><operator>)</operator></expr>)</condition><then><block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else<block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
