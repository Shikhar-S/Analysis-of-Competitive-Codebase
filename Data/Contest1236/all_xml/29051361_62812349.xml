<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29051361_62812349.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = (ll)l; i &lt;= (ll)r; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = (ll)0; i &lt; (ll)r; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = (ll)l; i &gt;= (ll)r; --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>Nmax</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">112</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">112</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>ans</name></decl>, <decl><type ref="prev"/><name>U</name></decl>, <decl><type ref="prev"/><name>D</name></decl>, <decl><type ref="prev"/><name>L</name></decl>, <decl><type ref="prev"/><name>R</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>forbidX</name><index>[<expr><name>Nmax</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>forbidY</name><index>[<expr><name>Nmax</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>r</name><index>[<expr><name>Nmax</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>c</name><index>[<expr><name>Nmax</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>mp</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>dir</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>u</name> <argument_list type="generic">&lt; <argument><expr><name>U</name> <operator>||</operator> <name>u</name></expr></argument> &gt;</argument_list></name> <name>D</name> <operator>||</operator> <name><name>v</name> <argument_list type="generic">&lt; <argument><expr><name>L</name> <operator>||</operator><name>v</name></expr></argument> &gt;</argument_list></name> <name>R</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
<comment type="line">//    cout &lt;&lt; u &lt;&lt; ' ' &lt;&lt; v &lt;&lt; ' ' &lt;&lt; dir &lt;&lt; '\n';</comment>
    <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>mn</name> <init>= <expr><name>inf</name></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name><name>r</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>r</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>back</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>v</name></expr>)</condition> <block>{
            <expr_stmt><expr><name>mn</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>mn</name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>back</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>r</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>pop_back</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>mn</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>mn</name></expr></argument>, <argument><expr><name>R</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>mn</name> <operator>==</operator> <name>v</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>u</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>v</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>dir</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
<comment type="line">//        if (mn &lt;= L || mn &gt;= R || mn &lt;= U || mn &gt;= D) return;</comment>
        <expr_stmt><expr><name>U</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>R</name> <operator>=</operator> <name>mn</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>mn</name> <operator>-</operator> <name>v</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>mp</name><index>[<expr><block>{<expr><name>u</name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><name>mn</name></expr>}</block></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
        <return>return <expr><call><name>solve</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>mn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <elseif>else <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>mn</name> <init>= <expr><name>inf</name></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name><name>c</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>back</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>u</name></expr>)</condition> <block>{
            <expr_stmt><expr><name>mn</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>mn</name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>back</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>c</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>pop_back</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>mn</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>mn</name></expr></argument>, <argument><expr><name>D</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>mn</name> <operator>==</operator> <name>u</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>u</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>v</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>dir</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
<comment type="line">//        if (mn &lt;= L || mn &gt;= R || mn &lt;= U || mn &gt;= D) return;</comment>
        <expr_stmt><expr><name>R</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>D</name> <operator>=</operator> <name>mn</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>mn</name> <operator>-</operator> <name>u</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>mp</name><index>[<expr><block>{<expr><name>mn</name></expr>, <expr><name>v</name> <operator>-</operator> <literal type="number">1</literal></expr>}</block></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
        <return>return <expr><call><name>solve</name><argument_list>(<argument><expr><name>mn</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>mx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name><name>r</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>r</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>front</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>v</name></expr>)</condition> <block>{
            <expr_stmt><expr><name>mx</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>front</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>r</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>pop_front</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>mx</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><name>L</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>mx</name> <operator>==</operator> <name>v</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>u</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>v</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>dir</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
<comment type="line">//        if (mx &lt;= L || mx &gt;= R || mx &lt;= U || mx &gt;= D) return;</comment>
        <expr_stmt><expr><name>D</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>L</name> <operator>=</operator> <name>mx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>v</name> <operator>-</operator> <name>mx</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>mp</name><index>[<expr><block>{<expr><name>u</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>mx</name></expr>}</block></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
        <return>return <expr><call><name>solve</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>mx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name><name>c</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>front</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>u</name></expr>)</condition> <block>{
            <expr_stmt><expr><name>mx</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>front</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>c</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>pop_front</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>mx</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><name>U</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>mx</name> <operator>==</operator> <name>u</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>u</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>v</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>dir</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
<comment type="line">//        if (mx &lt;= L || mx &gt;= R || mx &lt;= U || mx &gt;= D) return;</comment>
        <expr_stmt><expr><name>L</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>U</name> <operator>=</operator> <name>mx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>u</name> <operator>-</operator> <name>mx</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>mp</name><index>[<expr><block>{<expr><name>mx</name></expr>, <expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>}</block></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
        <return>return <expr><call><name>solve</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>yt</name></cpp:ifdef>
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"in.inp"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>k</argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>forbidX</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>forbidY</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mp</name><index>[<expr><block>{<expr><name>u</name></expr>, <expr><name>v</name></expr>}</block></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    }</block>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>forbidX</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>forbidX</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>ll</name></type> <name>x</name><range>: <expr><name><name>forbidX</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    }</block>
    <macro><name>FOR</name><argument_list>(<argument>j</argument>, <argument><literal type="number">1</literal></argument>, <argument>m</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>forbidY</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>forbidY</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>ll</name></type> <name>x</name><range>: <expr><name><name>forbidY</name><index>[<expr><name>j</name></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    }</block>
    <expr_stmt><expr><name>U</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>D</name> <operator>=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>L</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>R</name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>solve</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    cout &lt;&lt; ans + 1 &lt;&lt; '\n';</comment>
    <if>if <condition>(<expr><name>ans</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>n</name> <operator>*</operator> <name>m</name> <operator>-</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"yes"</literal></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"no"</literal></expr>;</expr_stmt></block></else></if>
}</block></function>
</unit>
