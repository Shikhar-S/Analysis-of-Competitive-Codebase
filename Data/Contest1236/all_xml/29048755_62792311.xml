<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29048755_62792311.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name>M</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name> <operator>&gt;&gt;</operator> <name>M</name></expr>;</expr_stmt> 
	<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>P</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt> 
	<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name><name>pow2</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt> 
	<expr_stmt><expr><name><name>pow2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>pow2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pow2</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>pow2</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>%</operator> <name>P</name></expr>;</expr_stmt> 
	}</block></for>
	<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>first</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">50</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><operator>(</operator><name>M</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>first</name> <operator>*=</operator> <name><name>pow2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> 
			<expr_stmt><expr><name>first</name> <operator>%=</operator> <name>P</name></expr>;</expr_stmt> 
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><name>first</name> <operator>+=</operator> <literal type="number">1e9</literal> <operator>+</operator> <literal type="number">6</literal></expr>;</expr_stmt> 
	<expr_stmt><expr><name>first</name> <operator>%=</operator> <name>P</name></expr>;</expr_stmt> 
	<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name><name>pow</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt> 
	<expr_stmt><expr><name><name>pow</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>first</name></expr>;</expr_stmt> 
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>pow</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pow</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>pow</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>%</operator> <name>P</name></expr>;</expr_stmt> 
	}</block></for>
	<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">50</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><operator>(</operator><name>N</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>ans</name> <operator>*=</operator> <name><name>pow</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> 
			<expr_stmt><expr><name>ans</name> <operator>%=</operator> <name>P</name></expr>;</expr_stmt> 
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> 
}</block></function></unit>
