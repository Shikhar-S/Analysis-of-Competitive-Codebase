<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29081840_62787719.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vec.begin(), vec.end()</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>P</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<decl_stmt><decl><specifier>constexpr</specifier> <type><name>ll</name></type> <name>INF</name> <init>= <expr><operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>-</operator> <literal type="number">1LL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><specifier>constexpr</specifier> <type><name>ll</name></type> <name>LINF</name> <init>= <expr><operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">60</literal><operator>)</operator> <operator>-</operator> <literal type="number">1LL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><specifier>constexpr</specifier> <type><name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>chmin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>chmax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<class><template>template <parameter_list>&lt;<parameter><type><name><name>std</name><operator>::</operator><name>uint_fast64_t</name></name></type> <name>Modulus</name></parameter>&gt;</parameter_list></template> class <name>modint</name> <block>{<private type="default">
    <using>using <name>u64</name> <init>= <type><name><name>std</name><operator>::</operator><name>uint_fast64_t</name></name></type></init>;</using>

  </private><public>public:
    <decl_stmt><decl><type><name>u64</name></type> <name>a</name></decl>;</decl_stmt>
    <constructor><specifier>constexpr</specifier> <name>modint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u64</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <noexcept>noexcept</noexcept></constructor> : <macro><name>a</name><argument_list>(<argument>x % Modulus</argument>)</argument_list></macro> <block>{}</block>
    <function><specifier>constexpr</specifier> <type><name>u64</name> <modifier>&amp;</modifier></type><name>value</name><parameter_list>()</parameter_list> <noexcept>noexcept</noexcept> <block>{ <return>return <expr><name>a</name></expr>;</return> }</block></function>
    <function><specifier>constexpr</specifier> <type><specifier>const</specifier> <name>u64</name> <modifier>&amp;</modifier></type><name>value</name><parameter_list>()</parameter_list> <specifier>const</specifier> <noexcept>noexcept</noexcept> <block>{ <return>return <expr><name>a</name></expr>;</return> }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <noexcept>noexcept</noexcept> <block>{
        <return>return <expr><call><name>modint</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>rhs</name></expr>;</return>
    }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <noexcept>noexcept</noexcept> <block>{
        <return>return <expr><call><name>modint</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>rhs</name></expr>;</return>
    }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <noexcept>noexcept</noexcept> <block>{
        <return>return <expr><call><name>modint</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name>rhs</name></expr>;</return>
    }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <noexcept>noexcept</noexcept> <block>{
        <return>return <expr><call><name>modint</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>/=</operator> <name>rhs</name></expr>;</return>
    }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name></type> <name>operator<name>^</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u64</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <noexcept>noexcept</noexcept> <block>{
        <return>return <expr><call><name>modint</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>^=</operator> <name>rhs</name></expr>;</return>
    }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name> <modifier>&amp;</modifier></type><name>operator<name>+=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <noexcept>noexcept</noexcept> <block>{
        <expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>rhs</name><operator>.</operator><name>a</name></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>a</name> <operator>&gt;=</operator> <name>Modulus</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>a</name> <operator>-=</operator> <name>Modulus</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name> <modifier>&amp;</modifier></type><name>operator<name>-=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <noexcept>noexcept</noexcept> <block>{
        <if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name><name>rhs</name><operator>.</operator><name>a</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>a</name> <operator>+=</operator> <name>Modulus</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>a</name> <operator>-=</operator> <name><name>rhs</name><operator>.</operator><name>a</name></name></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name> <modifier>&amp;</modifier></type><name>operator<name>*=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <noexcept>noexcept</noexcept> <block>{
        <expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name> <operator>*</operator> <name><name>rhs</name><operator>.</operator><name>a</name></name> <operator>%</operator> <name>Modulus</name></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name> <modifier>&amp;</modifier></type><name>operator<name>/=</name></name><parameter_list>(<parameter><decl><type><name>modint</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <noexcept>noexcept</noexcept> <block>{
        <decl_stmt><decl><type><name>u64</name></type> <name>exp</name> <init>= <expr><name>Modulus</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>exp</name></expr>)</condition> <block>{
            <if>if <condition>(<expr><name>exp</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><operator>*</operator><name>this</name> <operator>*=</operator> <name>rhs</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>rhs</name> <operator>*=</operator> <name>rhs</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>exp</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name> <modifier>&amp;</modifier></type><name>operator<name>^=</name></name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name>exp</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>modint</name></type> <name>rhs</name> <init>= <expr><call><name>modint</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>exp</name></expr>)</condition> <block>{
            <if>if <condition>(<expr><name>exp</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><operator>*</operator><name>this</name> <operator>*=</operator> <name>rhs</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>rhs</name> <operator>*=</operator> <name>rhs</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>exp</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></function>
</public>}</block>;</class>
<using>using <name>mint</name> <init>= <type><name><name>modint</name><argument_list type="generic">&lt;<argument><expr><name>MOD</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>mint</name></expr></argument>&gt;</argument_list></name></type> <name>f</name></decl>, <decl><type ref="prev"/><name>fi</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>comb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fi</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>f</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <call><name>mint</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name>fi</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>mint</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>f</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>fi</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fi</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <call><name>mint</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1LL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>
<function><type><name>mint</name></type> <name>ncr</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>r</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>mint</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <return>return <expr><call><name>mint</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <return>return <expr><name><name>f</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name><name>fi</name><index>[<expr><name>n</name> <operator>-</operator> <name>r</name></expr>]</index></name> <operator>*</operator> <name><name>fi</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>mint</name></type> <name>s</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>s</name> <operator>^=</operator> <name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>-=</operator> <call><name>mint</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>^=</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>.</operator><name>a</name></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function></unit>
