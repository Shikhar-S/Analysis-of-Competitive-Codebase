<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29070128_62814508.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>obsy</name><index>[<expr><literal type="number">110000</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>obsx</name><index>[<expr><literal type="number">110000</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>obsx</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>obsy</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>o</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>minx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxx</name> <init>= <expr><name>n</name></expr></init></decl>, <decl><type ref="prev"/><name>miny</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxy</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{
		<if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
			<if>if <condition>(<expr><operator>!</operator><name><name>obsx</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
				<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><operator>*</operator><operator>(</operator><name><name>obsx</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>num</name> <init>= <expr><call>(<name>long</name> <name>long</name>)<argument_list>(<argument><expr><name>maxy</name> <operator>-</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>maxx</name> <operator>-</operator> <name>minx</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">//		cout &lt;&lt; o &lt;&lt; endl;</comment>
					<return>return <expr><literal type="number">0</literal></expr>;</return>
				}</block></then></if>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>p</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>maxy</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
					<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>minx</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>maxx</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
						<if>if <condition>(<expr><name><name>obsy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>obsy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
							<expr_stmt><expr><name><name>obsy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>obsx</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
						}</block></then>	<else>else<block>{
							<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return>return <expr><literal type="number">0</literal></expr>;</return>
						}</block></else></if>
					}</block></for></block></for>
				<expr_stmt><expr><name>y</name> <operator>=</operator> <name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>maxy</name> <operator>=</operator> <name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>minx</name> <operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>o</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			}</block></then>	<else>else<block>{
				<expr_stmt><expr><name>y</name> <operator>=</operator> <name>maxy</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>minx</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>o</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			}</block></else></if>	
		}</block></then>	<elseif>else
		<if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
			<if>if <condition>(<expr><operator>!</operator><name><name>obsy</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
				<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><operator>*</operator><operator>(</operator><name><name>obsy</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>num</name> <init>= <expr><call>(<name>long</name> <name>long</name>)<argument_list>(<argument><expr><name>maxx</name> <operator>-</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>maxy</name> <operator>-</operator> <name>miny</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
			<comment type="line">//		cout &lt;&lt; o &lt;&lt; endl;</comment>
					<return>return <expr><literal type="number">0</literal></expr>;</return>
				}</block></then></if>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>p</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>maxx</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
					<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>miny</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>maxy</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
						<if>if <condition>(<expr><name><name>obsx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>obsx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
							<expr_stmt><expr><name><name>obsx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>obsy</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
						}</block></then>	<else>else<block>{
							<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return>return <expr><literal type="number">0</literal></expr>;</return>
						}</block></else></if>
					}</block></for></block></for>
				<expr_stmt><expr><name>x</name> <operator>=</operator> <name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>maxx</name> <operator>=</operator> <name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>maxy</name> <operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>o</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
			}</block></then>	<else>else<block>{
				<expr_stmt><expr><name>x</name> <operator>=</operator> <name>maxx</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>maxy</name> <operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>o</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
			}</block></else></if>	
		}</block></then></if></elseif>	<elseif>else
		<if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then><block>{
			<if>if <condition>(<expr><operator>!</operator><name><name>obsx</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
				<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><name><name>obsx</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>--</operator><name>it</name><operator>)</operator></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>num</name> <init>= <expr><call>(<name>long</name> <name>long</name>)<argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name>miny</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>maxx</name> <operator>-</operator> <name>minx</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<comment type="line">//cout &lt;&lt; o &lt;&lt; endl;</comment>
					<return>return <expr><literal type="number">0</literal></expr>;</return>
				}</block></then></if>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>miny</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>p</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
					<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>minx</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>maxx</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
						<if>if <condition>(<expr><name><name>obsy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>obsy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
							<expr_stmt><expr><name><name>obsy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>obsx</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
						}</block></then>	<else>else<block>{
							<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return>return <expr><literal type="number">0</literal></expr>;</return>
						}</block></else></if>
					}</block></for></block></for>
				<expr_stmt><expr><name>y</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>miny</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>maxx</name> <operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>o</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			}</block></then>	<else>else<block>{
				<expr_stmt><expr><name>y</name> <operator>=</operator> <name>miny</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>maxx</name> <operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>o</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			}</block></else></if>				
		}</block></then></if></elseif>	<elseif>else
		<if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><then><block>{
			<if>if <condition>(<expr><operator>!</operator><name><name>obsy</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
				<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><name><name>obsy</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>--</operator><name>it</name><operator>)</operator></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>num</name> <init>= <expr><call>(<name>long</name> <name>long</name>)<argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name>minx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>maxy</name> <operator>-</operator> <name>miny</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
				
				<comment type="line">//cout &lt;&lt; p &lt;&lt; endl;</comment>
				<if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line">//	cout &lt;&lt; o &lt;&lt; endl;</comment>
					<return>return <expr><literal type="number">0</literal></expr>;</return>
				}</block></then></if>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>minx</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>p</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
					<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>miny</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>maxy</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
						<if>if <condition>(<expr><name><name>obsx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>obsx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
							<expr_stmt><expr><name><name>obsx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>obsy</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
						}</block></then>	<else>else<block>{
							<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return>return <expr><literal type="number">0</literal></expr>;</return>
						}</block></else></if>
					}</block></for></block></for>
				<expr_stmt><expr><name>x</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>minx</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>miny</name> <operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>o</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then>	<else>else<block>{
				<expr_stmt><expr><name>x</name> <operator>=</operator> <name>minx</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>miny</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>o</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></else></if>							
		}</block></then></if></elseif></if>
	}</block></while>
	
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
