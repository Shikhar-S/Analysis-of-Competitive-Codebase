<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29091598_62789353.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>lld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vec</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lld</name></expr></argument>&gt;</argument_list></name></type> <name>vecl</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a).begin(), (a).end()</cpp:value></cpp:define>
<comment type="line">// const int MIN = numeric_limits&lt;int&gt;::min();</comment>
<comment type="line">// const int MAX = numeric_limits&lt;int&gt;::max();</comment>
<comment type="line">// const lld MIN = numeric_limits&lt;lld&gt;::min();</comment>
<comment type="line">// const lld MAX = numeric_limits&lt;lld&gt;::max();</comment>

<function><type><name>lld</name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>lld</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>lld</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>lld</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><type><name>lld</name></type> <name>r</name><init>=<expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>c</name><init>=<expr><name>a</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>b</name></expr>)</condition> <block>{
    <if>if <condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>r</name><operator>*</operator><name>c</name><operator>)</operator><operator>%</operator><name>m</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>c</name><operator>*</operator><name>c</name><operator>)</operator><operator>%</operator><name>m</name></expr>;</expr_stmt>
  }</block></while>
  <return>return <expr><name>r</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>lld</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>lld</name></type> <name>M</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><call><name>f</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>M</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>M</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>f</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
