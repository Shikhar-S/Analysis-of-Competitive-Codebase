<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29090425_62811108.cpp"><cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLIBCXX_DEBUG</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"O3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxN</name> <init>= <expr><literal type="number">5</literal> <operator>*</operator> <operator>(</operator><name>int</name><operator>)</operator><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>mult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
  <return>return <expr><operator>(</operator><literal type="number">1LL</literal> <operator>*</operator> <name>a</name> <operator>*</operator> <name>b</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>pw</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
  <if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
  <if>if <condition>(<expr><name>b</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>mult</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>pw</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>pw</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>mult</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>sub</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name>a</name> <operator>-</operator> <name>b</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>+=</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
  <return>return <expr><name>s</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>sum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name>a</name> <operator>+</operator> <name>b</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>s</name> <operator>&gt;=</operator> <name>mod</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>-=</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
  <return>return <expr><name>s</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>cyc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>st_number</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>used</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>cycles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name><name>g</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pw2</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name><name>inv2</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><name><name>used</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>st_number</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <call><name><name>cyc</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cyc</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>to</name> <range>: <expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
    <if>if <condition>(<expr><name><name>used</name><index>[<expr><name>to</name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
    <if>if <condition>(<expr><name><name>used</name><index>[<expr><name>to</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>used</name><index>[<expr><name>to</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>to</name> <operator>!=</operator> <name>p</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>nall</name></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>st_number</name><index>[<expr><name>to</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>cyc</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>nall</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>cyc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
      <expr_stmt><expr><call><name><name>cycles</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>nall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    }</block></then></if>
  }</block></for>
  <expr_stmt><expr><name><name>used</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cyc</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>vertex</name><parameter_list>()</parameter_list> <block>{
  <return>return <expr><call><name>mult</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>inv2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>edges</name><parameter_list>()</parameter_list> <block>{
  <return>return <expr><call><name>mult</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>inv2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>cyces</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>tot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <range>: <expr><name>cycles</name></expr></range></decl></init>)</control> <block>{
    <expr_stmt><expr><name>tot</name> <operator>=</operator> <call><name>sum</name><argument_list>(<argument><expr><name>tot</name></expr></argument>, <argument><expr><name><name>inv2</name><index>[<expr><call><name><name>it</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <return>return <expr><name>tot</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>vert2</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><call><name>mult</name><argument_list>(<argument><expr><call><name>mult</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>inv2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>sum</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><call><name>mult</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>inv2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>edges2</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>to</name> <range>: <expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>to</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
      <comment type="line">// i &lt; to</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>other_edges</name> <init>= <expr><name>m</name> <operator>-</operator> <name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>g</name><index>[<expr><name>to</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>not_other</name> <init>= <expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>g</name><index>[<expr><name>to</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>sum</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><call><name>mult</name><argument_list>(<argument><expr><name>other_edges</name></expr></argument>, <argument><expr><name><name>inv2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>sum</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><call><name>mult</name><argument_list>(<argument><expr><name>not_other</name></expr></argument>, <argument><expr><name><name>inv2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></for>
  <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>sum</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><call><name>mult</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>inv2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>veredges</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>other_edges</name> <init>= <expr><name>m</name> <operator>-</operator> <name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>sum</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><call><name>mult</name><argument_list>(<argument><expr><name>other_edges</name></expr></argument>, <argument><expr><name><name>inv2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>my_edges</name> <init>= <expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>sum</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><call><name>mult</name><argument_list>(<argument><expr><name>my_edges</name></expr></argument>, <argument><expr><name><name>inv2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name><name>bySz</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>vercycles</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>tot</name> <init>= <expr><call><name>cyces</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><name>tot</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>sz</name> <range>: <expr><name><name>bySz</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>sub</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>inv2</name><index>[<expr><name>sz</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>sum</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><call><name>mult</name><argument_list>(<argument><expr><name><name>inv2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>sum</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><call><name>sub</name><argument_list>(<argument><expr><name>tot</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>cyccyc</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><call><name>cyces</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <range>: <expr><name>cycles</name></expr></range></decl></init>)</control> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>my_sz</name> <init>= <expr><call><name><name>it</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>coef</name> <init>= <expr><name><name>inv2</name><index>[<expr><name>my_sz</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>sum</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name>coef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><name>total</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>v</name> <range>: <expr><name>it</name></expr></range></decl></init>)</control> <block>{
      <for>for <control>(<init><decl><type><name>int</name></type> <name>sz</name> <range>: <expr><name><name>bySz</name><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
        <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>sub</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>inv2</name><index>[<expr><name>sz</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>sum</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>inv2</name><index>[<expr><name>my_sz</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>sub</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>inv2</name><index>[<expr><name>my_sz</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>sum</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><call><name>mult</name><argument_list>(<argument><expr><name><name>inv2</name><index>[<expr><name>my_sz</name></expr>]</index></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rest</name> <init>= <expr><call><name>sub</name><argument_list>(<argument><expr><name>total</name></expr></argument>, <argument><expr><call><name>sum</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>inv2</name><index>[<expr><name>my_sz</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// they have 2</comment>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>sum</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><call><name>mult</name><argument_list>(<argument><expr><call><name>mult</name><argument_list>(<argument><expr><name><name>inv2</name><index>[<expr><name>my_sz</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>cycedges</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <range>: <expr><name>cycles</name></expr></range></decl></init>)</control> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>my_sz</name> <init>= <expr><call><name><name>it</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>edges_inside</name> <init>= <expr><name>my_sz</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>sum</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><call><name>mult</name><argument_list>(<argument><expr><name>edges_inside</name></expr></argument>, <argument><expr><name><name>inv2</name><index>[<expr><name>my_sz</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>edges_not_inside</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>u</name> <range>: <expr><name>it</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><name>edges_not_inside</name> <operator>=</operator> <call><name>sum</name><argument_list>(<argument><expr><name>edges_not_inside</name></expr></argument>, <argument><expr><name><name>g</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>left_edges</name> <init>= <expr><name>m</name> <operator>-</operator> <name>edges_inside</name> <operator>-</operator> <name>edges_not_inside</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>sum</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><call><name>mult</name><argument_list>(<argument><expr><name>edges_not_inside</name></expr></argument>, <argument><expr><name><name>inv2</name><index>[<expr><name>my_sz</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>sum</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><call><name>mult</name><argument_list>(<argument><expr><name>left_edges</name></expr></argument>, <argument><expr><name><name>inv2</name><index>[<expr><name>my_sz</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//freopen("input.txt", "r", stdin);</comment>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pw2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <expr_stmt><expr><name><name>pw2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mult</name><argument_list>(<argument><expr><name><name>pw2</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><name><name>inv2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <expr_stmt><expr><name><name>inv2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mult</name><argument_list>(<argument><expr><name><name>inv2</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>mod</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <range>: <expr><name>cycles</name></expr></range></decl></init>)</control> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>v</name> <range>: <expr><name>it</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>bySz</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name><name>it</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
  }</block></for>
  <decl_stmt><decl><type><name>int</name></type> <name>ex</name> <init>= <expr><call><name>sub</name><argument_list>(<argument><expr><call><name>sum</name><argument_list>(<argument><expr><call><name>vertex</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>cyces</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>edges</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ex</name> <operator>=</operator> <call><name>pw</name><argument_list>(<argument><expr><name>ex</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>v2</name> <init>= <expr><call><name>vert2</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>c2</name> <init>= <expr><call><name>cyccyc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ed2</name> <init>= <expr><call><name>edges2</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>sum</name><argument_list>(<argument><expr><call><name>sum</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ed2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>other_coef</name> <init>= <expr><call><name>vercycles</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>other_coef</name> <operator>=</operator> <call><name>sub</name><argument_list>(<argument><expr><name>other_coef</name></expr></argument>, <argument><expr><call><name>sum</name><argument_list>(<argument><expr><call><name>cycedges</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>veredges</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>other_coef</name> <operator>=</operator> <call><name>mult</name><argument_list>(<argument><expr><name>other_coef</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>sum</name><argument_list>(<argument><expr><name>other_coef</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>sub</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>val</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
