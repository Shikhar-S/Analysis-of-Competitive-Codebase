<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29049544_62788197.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input</name></cpp:macro>   <cpp:value>std::cin</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>output</name></cpp:macro>  <cpp:value>std::cout</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>llg</name></cpp:macro>     <cpp:value>long long</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro>     <cpp:value>1000000007</cpp:value></cpp:define>

<function><type><name>llg</name></type> <name>fastPow</name><parameter_list>(<parameter><decl><type><name>llg</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>llg</name></type> <name>exp</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>exp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>llg</name></type> <name>v</name> <init>= <expr><call><name>fastPow</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>exp</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>%</operator><name>MOD</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>exp</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>v</name><operator>*</operator><name>v</name><operator>)</operator><operator>%</operator><name>MOD</name><operator>)</operator><operator>*</operator><name>base</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</return></block></then></if>
    <return>return <expr><operator>(</operator><operator>(</operator><name>v</name><operator>*</operator><name>v</name><operator>)</operator><operator>%</operator><name>MOD</name><operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>llg</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name>M</name></decl>;</decl_stmt>   <expr_stmt><expr><name>input</name> <operator>&gt;&gt;</operator> <name>N</name> <operator>&gt;&gt;</operator> <name>M</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>output</name> <operator>&lt;&lt;</operator> <call><name>fastPow</name><argument_list>(<argument><expr><operator>(</operator><call><name>fastPow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>+</operator><name>MOD</name><operator>)</operator><operator>%</operator><name>MOD</name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
