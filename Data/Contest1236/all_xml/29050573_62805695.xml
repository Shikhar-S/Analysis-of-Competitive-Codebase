<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29050573_62805695.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;climits&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>

<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <for>for <control>(<init>;</init> <condition><expr><name>b</name></expr>;</condition> <incr><expr><name>a</name> <operator>%=</operator> <name>b</name></expr><operator>,</operator> <expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for> <return>return <expr><name>a</name></expr>;</return> }</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>ox</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>oy</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>fillLeft</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fillRight</name> <init>= <expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fillUp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fillDown</name> <init>= <expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ox</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>oy</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<decl_stmt><decl><type><name>int</name></type> <name>curD</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>ans</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>fillLeft</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>fillRight</name> <operator>&amp;&amp;</operator> <name>fillUp</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>fillDown</name></expr>)</condition>
	<block>{
		<if>if <condition>(<expr><name>curD</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<while>while <condition>(<expr><name><name>ox</name><index>[<expr><name>fillUp</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition>
			<block>{
				<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><operator>*</operator><name><name>ox</name><index>[<expr><name>fillUp</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>rbegin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>fillRight</name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>oy</name><index>[<expr><name>tmp</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>fillDown</name> <operator>-</operator> <name>fillUp</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
					<break>break;</break>
				}</block></then></if>

				<for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name><name>oy</name><index>[<expr><name>tmp</name></expr>]</index></name></expr></range></decl></init>)</control>
				<block>{
					<expr_stmt><expr><name><name>ox</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
				<expr_stmt><expr><name><name>oy</name><index>[<expr><name>tmp</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>fillRight</name><operator>--</operator></expr>;</expr_stmt>
			}</block></while>
			<expr_stmt><expr><name>fillUp</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if <condition>(<expr><name>curD</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<while>while <condition>(<expr><name><name>oy</name><index>[<expr><name>fillRight</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition>
			<block>{
				<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><operator>*</operator><name><name>oy</name><index>[<expr><name>fillRight</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>rbegin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>fillDown</name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>ox</name><index>[<expr><name>tmp</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>fillRight</name> <operator>-</operator> <name>fillLeft</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
					<break>break;</break>
				}</block></then></if>

				<for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name><name>ox</name><index>[<expr><name>tmp</name></expr>]</index></name></expr></range></decl></init>)</control>
				<block>{
					<expr_stmt><expr><name><name>oy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
				<expr_stmt><expr><name><name>ox</name><index>[<expr><name>tmp</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>fillDown</name><operator>--</operator></expr>;</expr_stmt>
			}</block></while>
			<expr_stmt><expr><name>fillRight</name><operator>--</operator></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<elseif>else <if>if <condition>(<expr><name>curD</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then>
		<block>{
			<while>while <condition>(<expr><name><name>ox</name><index>[<expr><name>fillDown</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition>
			<block>{
				<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><operator>*</operator><name><name>ox</name><index>[<expr><name>fillDown</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>fillLeft</name> <operator>+</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>oy</name><index>[<expr><name>tmp</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>fillDown</name> <operator>-</operator> <name>fillUp</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
					<break>break;</break>
				}</block></then></if>

				<for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name><name>oy</name><index>[<expr><name>tmp</name></expr>]</index></name></expr></range></decl></init>)</control>
				<block>{
					<expr_stmt><expr><name><name>ox</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
				<expr_stmt><expr><name><name>oy</name><index>[<expr><name>tmp</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>fillLeft</name><operator>++</operator></expr>;</expr_stmt>
			}</block></while>
			<expr_stmt><expr><name>fillDown</name><operator>--</operator></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<elseif>else <if>if <condition>(<expr><name>curD</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then>
		<block>{
			<while>while <condition>(<expr><name><name>oy</name><index>[<expr><name>fillLeft</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition>
			<block>{
				<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><operator>*</operator><name><name>oy</name><index>[<expr><name>fillLeft</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>fillUp</name> <operator>+</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>ox</name><index>[<expr><name>tmp</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>fillRight</name> <operator>-</operator> <name>fillLeft</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
					<break>break;</break>
				}</block></then></if>

				<for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name><name>ox</name><index>[<expr><name>tmp</name></expr>]</index></name></expr></range></decl></init>)</control>
				<block>{
					<expr_stmt><expr><name><name>oy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
				<expr_stmt><expr><name><name>ox</name><index>[<expr><name>tmp</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>fillUp</name><operator>++</operator></expr>;</expr_stmt>
			}</block></while>
			<expr_stmt><expr><name>fillLeft</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then></if></elseif></if>

		<expr_stmt><expr><name>curD</name> <operator>=</operator> <operator>(</operator><name>curD</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	}</block></while>

	<if>if <condition>(<expr><name>ans</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr>;</expr_stmt></block></else></if>
}</block></function></unit>
