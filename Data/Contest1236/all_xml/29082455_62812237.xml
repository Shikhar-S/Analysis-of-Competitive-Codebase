<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29082455_62812237.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>dirs</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>count</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>min_r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>,
        <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>tc</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name>max_c</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name><name>tr</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>y</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>tr</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>max_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <name>y</name></expr>)</condition><then> <block>{
            <return>return <expr><name>pos</name> <operator>-</operator> <name>y</name> <operator>+</operator> <call><name>count</name><argument_list>(<argument><expr><name>min_r</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>max_r</name></expr></argument>, <argument><expr><name>min_c</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then> <elseif>else <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name>max_r</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tc</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name><name>tc</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>x</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>tc</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>max_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <name>x</name></expr>)</condition><then> <block>{
            <return>return <expr><name>pos</name> <operator>-</operator> <name>x</name> <operator>+</operator> <call><name>count</name><argument_list>(<argument><expr><name>min_r</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>min_c</name></expr></argument>, <argument><expr><name>max_c</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name>min_c</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name><name>tr</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name><name>tr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>y</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>tr</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name><name>tr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>min_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <name>y</name></expr>)</condition><then> <block>{
            <return>return <expr><name>y</name> <operator>-</operator> <name>pos</name> <operator>+</operator> <call><name>count</name><argument_list>(<argument><expr><name>min_r</name></expr></argument>, <argument><expr><name>max_r</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>max_c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if></elseif> <else>else <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name>min_r</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tc</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name><name>tc</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name><name>tc</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>x</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>tc</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name><name>tc</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>min_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <name>x</name></expr>)</condition><then> <block>{
            <return>return <expr><name>x</name> <operator>-</operator> <name>pos</name> <operator>+</operator> <call><name>count</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>max_r</name></expr></argument>, <argument><expr><name>min_c</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>max_c</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>tr</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>tc</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
	    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
	    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>a</name><operator>--</operator></expr><operator>,</operator> <expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>tr</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>emplace_back</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>tc</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>emplace_back</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
	    <if>if <condition>(<expr><name><name>tr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
	        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>tr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>tr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
	}</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>tc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>tc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>tc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>

    <decl_stmt><decl><type><name>ll</name></type> <name>cnt</name> <init>= <expr><call><name>count</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>cnt</name> <operator>+</operator> <name>k</name> <operator>==</operator> <name>n</name> <operator>*</operator> <name>m</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"Yes\n"</literal></expr> </then><else>: <expr><literal type="string">"No\n"</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>




	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
