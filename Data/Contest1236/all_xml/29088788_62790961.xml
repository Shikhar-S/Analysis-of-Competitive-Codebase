<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29088788_62790961.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>lli</name>;</typedef>

<decl_stmt><decl><type><name>lli</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>ans</name></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>lli</name></type> <name>p</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>lli</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><operator>!</operator><name>y</name></expr>)</condition><then><block>{
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    }</block></then>
    <else>else<block>{
        <decl_stmt><decl><type><name>lli</name></type> <name>lol</name> <init>= <expr><call><name>p</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>lol</name> <operator>%</operator> <name>k</name> <operator>*</operator> <name>lol</name> <operator>%</operator> <name>k</name><operator>)</operator> <operator>%</operator> <name>k</name><operator>)</operator> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator> <operator>%</operator> <name>k</name><operator>)</operator> <operator>%</operator> <name>k</name></expr>;</return>
    }</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>p</name><argument_list>(<argument><expr><operator>(</operator><name>k</name> <operator>+</operator> <call><name>p</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>k</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>k</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
