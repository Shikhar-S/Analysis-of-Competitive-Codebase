<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29080790_62793624.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rrep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&gt;=b;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fore</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto &amp;i:a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(),(x).end()</cpp:value></cpp:define>
<comment type="line">//#pragma GCC optimize ("-O3")</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using> <function_decl><type><name>void</name></type> <name>_main</name><parameter_list>()</parameter_list>;</function_decl> <function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_main</name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></function>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef> <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><name>INT_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>infl</name> <init>= <expr><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>bool</name></type> <name>chmax</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return> }</block></then></if> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>bool</name></type> <name>chmin</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <name>a</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return> }</block></then></if> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></function>
<comment type="line">//---------------------------------------------------------------------------------------------------</comment>
<comment type="block">/*---------------------------------------------------------------------------------------------------
ããããããããããã â§ï¼¿â§
ããããã â§ï¼¿â§ ãï¼Â´&lt;_ï½ ï¼ã Welcome to My Coding Space!
ãããã ï¼ Â´_ã`ï¼ã/ã âi     @hamayanhamayan
ããããï¼ãããï¼¼ã ã  |ã|
ããã /ãã /ï¿£ï¿£ï¿£ï¿£/ãã|
ã ï¼¿_(__ï¾ã¤/ã    ï¼¿/ .| .|ï¼¿ï¼¿ï¼¿ï¼¿
ã ãããï¼¼/ï¼¿ï¼¿ï¼¿ï¼¿/ãï¼uãâ
---------------------------------------------------------------------------------------------------*/</comment>














<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
<comment type="line">//---------------------------------------------------------------------------------------------------</comment>
<function><type><name>void</name></type> <name>_main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>ans</name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>x</argument>, <argument><literal type="number">0</literal></argument>, <argument>N</argument>)</argument_list></macro> <block>{
		<macro><name>rep</name><argument_list>(<argument>dy</argument>, <argument><literal type="number">0</literal></argument>, <argument>N</argument>)</argument_list></macro> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>dy</name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>x</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>y</name> <operator>=</operator> <name>N</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>dy</name></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name><name>ans</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
		}</block>
	}</block>

	<macro><name>rep</name><argument_list>(<argument>y</argument>, <argument><literal type="number">0</literal></argument>, <argument>N</argument>)</argument_list></macro> <block>{
		<macro><name>rep</name><argument_list>(<argument>x</argument>, <argument><literal type="number">0</literal></argument>, <argument>N</argument>)</argument_list></macro> <block>{
			<if>if <condition>(<expr><name>x</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>ans</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
}</block></function>



</unit>
