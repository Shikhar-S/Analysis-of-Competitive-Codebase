<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29065728_62808763.cpp"><comment type="line">//</comment>
<comment type="line">//  Alice and the Doll.cpp</comment>
<comment type="line">//  National Olympiad in Informatics in Provinces</comment>
<comment type="line">//</comment>
<comment type="line">//  Created by é»å­é½ on 2019/10/17.</comment>
<comment type="line">//  Copyright Â© 2019 é»å­é½. All rights reserved.</comment>
<comment type="line">//</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>fx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>fy</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>minw</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <comment type="line">//freopen("mytestdata.in", "r", stdin);</comment>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name>minw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>m</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>minw</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>minw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>minw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ny</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>fi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//    printf("%d\n", fi);</comment>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>sum</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>fn</name> <init>= <expr><operator>(</operator><name>fi</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>fi</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <comment type="line">//printf("%d %d\n", *s[0][nx].upper_bound(ny), minw[fn]);</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>wy</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><operator>*</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>nx</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>ny</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>minw</name><index>[<expr><name>fn</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <comment type="line">//printf("%d %d %d\n", nx, ny, wy);</comment>
            <if>if <condition>(<expr><name>wy</name> <operator>==</operator> <name>ny</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>nx</name><operator>!=</operator><literal type="number">1</literal><operator>||</operator><name>ny</name><operator>!=</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>wy</name><operator>-</operator><name>ny</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>minw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>nx</name></expr>;</expr_stmt> <expr_stmt><expr><name>ny</name> <operator>=</operator> <name>wy</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>fi</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>wx</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><operator>*</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>ny</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>nx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>minw</name><index>[<expr><name>fn</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <comment type="line">//printf("%d %d %d\n", nx, ny, wx);</comment>
            <if>if <condition>(<expr><name>wx</name> <operator>==</operator> <name>nx</name></expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>wx</name><operator>-</operator><name>nx</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>minw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ny</name></expr>;</expr_stmt> <expr_stmt><expr><name>nx</name> <operator>=</operator> <name>wx</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>fi</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>wy</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>--</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>nx</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>ny</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name><name>minw</name><index>[<expr><name>fn</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <comment type="line">//printf("%d %d %d\n", nx, ny, wy);</comment>
            <if>if <condition>(<expr><name>wy</name> <operator>==</operator> <name>ny</name></expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>ny</name><operator>-</operator><name>wy</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>minw</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>nx</name></expr>;</expr_stmt> <expr_stmt><expr><name>ny</name> <operator>=</operator> <name>wy</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>fi</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>wx</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>--</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>ny</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>nx</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name><name>minw</name><index>[<expr><name>fn</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <comment type="line">//printf("%d %d %d\n", nx, ny, wx);</comment>
            <if>if <condition>(<expr><name>wx</name> <operator>==</operator> <name>nx</name></expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>nx</name><operator>-</operator><name>wx</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>minw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>ny</name></expr>;</expr_stmt> <expr_stmt><expr><name>nx</name> <operator>=</operator> <name>wx</name></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="line">//printf("fi:%d\n", fi);</comment>
        <expr_stmt><expr><name>fi</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
    }</block></while>
    <if>if <condition>(<expr><name>sum</name> <operator>==</operator> <literal type="number">1ll</literal><operator>*</operator><name>n</name><operator>*</operator><name>m</name><operator>-</operator><name>k</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
