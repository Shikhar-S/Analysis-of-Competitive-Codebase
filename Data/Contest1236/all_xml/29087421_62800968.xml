<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29087421_62800968.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>

<struct><template>template <parameter_list>&lt;<parameter><type><name>int</name></type> <name>MOD</name><init>=<expr><literal type="number">1000000007</literal></expr></init></parameter>&gt;</parameter_list></template>
struct <name>Modular</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>int</name></type> <name>MOD_value</name> <init>= <expr><name>MOD</name></expr></init></decl>;</decl_stmt>

  <constructor><name>Modular</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>value</name> <operator>=</operator> <name>v</name> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt> <if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>value</name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>}</block></constructor>
  <constructor><name>Modular</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>value</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></member_init_list><block>{ <expr_stmt><expr><operator>*</operator><name>this</name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>this</name> <operator>/=</operator> <name>b</name></expr>;</expr_stmt>}</block></constructor>

  <function type="operator"><type><name>Modular</name><modifier>&amp;</modifier></type> <name>operator<name>+=</name></name><parameter_list>(<parameter><decl><type><name>Modular</name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>value</name> <operator>+=</operator> <name><name>b</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt> <if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <name>MOD</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>value</name> <operator>-=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if> <return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></function>
  <function type="operator"><type><name>Modular</name><modifier>&amp;</modifier></type> <name>operator<name>-=</name></name><parameter_list>(<parameter><decl><type><name>Modular</name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>value</name> <operator>-=</operator> <name><name>b</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt> <if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>value</name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if><return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></function>
  <function type="operator"><type><name>Modular</name><modifier>&amp;</modifier></type> <name>operator<name>*=</name></name><parameter_list>(<parameter><decl><type><name>Modular</name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>value</name> <operator>*</operator> <name><name>b</name><operator>.</operator><name>value</name></name> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt><return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></function>

  <friend>friend <function><type><name>Modular</name></type> <name>mexp</name><parameter_list>(<parameter><decl><type><name>Modular</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Modular</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <while>while <condition>(<expr><name>e</name></expr>)</condition> <block>{ <if>if <condition>(<expr><name>e</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><name>res</name> <expr_stmt><expr><operator>*=</operator> <name>a</name></expr>;</expr_stmt></block></then></if> <name>a</name> <expr_stmt><expr><operator>*=</operator> <name>a</name></expr>;</expr_stmt> <name>e</name> <expr_stmt><expr><operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> }</block></while>
    <return>return <expr><name>res</name></expr>;</return>
  }</block></function></friend>
  <friend>friend <function><type><name>Modular</name></type> <name>inverse</name><parameter_list>(<parameter><decl><type><name>Modular</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>mexp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>MOD</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function></friend>

  <function type="operator"><type><name>Modular</name><modifier>&amp;</modifier></type> <name>operator<name>/=</name></name><parameter_list>(<parameter><decl><type><name>Modular</name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>*</operator><name>this</name> <operator>*=</operator> <call><name>inverse</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <friend>friend <function type="operator"><type><name>Modular</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><name>Modular</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Modular</name> <specifier>const</specifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>a</name> <operator>+=</operator> <name>b</name></expr>;</return> }</block></function></friend>
  <friend>friend <function type="operator"><type><name>Modular</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><name>Modular</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Modular</name> <specifier>const</specifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>a</name> <operator>-=</operator> <name>b</name></expr>;</return> }</block></function></friend>
  <friend>friend <function type="operator"><type><name>Modular</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><name>Modular</name> <specifier>const</specifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><literal type="number">0</literal> <operator>-</operator> <name>a</name></expr>;</return> }</block></function></friend>
  <friend>friend <function type="operator"><type><name>Modular</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><name>Modular</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Modular</name> <specifier>const</specifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>a</name> <operator>*=</operator> <name>b</name></expr>;</return> }</block></function></friend>
  <friend>friend <function type="operator"><type><name>Modular</name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><name>Modular</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Modular</name> <specifier>const</specifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>a</name> <operator>/=</operator> <name>b</name></expr>;</return> }</block></function></friend>
  <friend>friend <function type="operator"><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><name>Modular</name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>a</name><operator>.</operator><name>value</name></name></expr>;</return>}</block></function></friend>
  <friend>friend <function type="operator"><type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><name>Modular</name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Modular</name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><name><name>a</name><operator>.</operator><name>value</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>value</name></name></expr>;</return>}</block></function></friend>
  <friend>friend <function type="operator"><type><name>bool</name></type> <name>operator<name>!=</name></name><parameter_list>(<parameter><decl><type><name>Modular</name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Modular</name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><name><name>a</name><operator>.</operator><name>value</name></name> <operator>!=</operator> <name><name>b</name><operator>.</operator><name>value</name></name></expr>;</return>}</block></function></friend>
</public>}</block>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>Modular</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1000000007</literal></expr></argument>&gt;</argument_list></name></type> <name>power</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>power</name> <operator>=</operator> <call><name>mexp</name><argument_list>(<argument><expr><name>power</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>power</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>Modular</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1000000007</literal></expr></argument>&gt;</argument_list></name></type> <name>ans</name><argument_list>(<argument><expr><name>power</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>mexp</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>
</unit>
