<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29087344_62814117.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>r</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>s</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>s</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>minx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>miny</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>maxx</name> <init>= <expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>maxy</name> <init>= <expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>posx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>posy</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
	<decl_stmt><decl><type><name>ll</name></type> <name>br</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>n</name><operator>+</operator><name>m</name><operator>)</operator></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<comment type="block">/*cout &lt;&lt;"i="&lt;&lt;i&lt;&lt;endl;
		cout &lt;&lt;"posx = "&lt;&lt;posx&lt;&lt;endl;
		cout &lt;&lt;"posy = "&lt;&lt;posy&lt;&lt;endl;*/</comment>
		<decl_stmt><decl><type><name>ll</name></type> <name>move</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>i</name><operator>%</operator><literal type="number">4</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>newy</name> <init>= <expr><name>maxy</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <operator>::</operator> <name>iterator</name></name></type> <name>nxt</name> <init>= <expr><name><name>r</name><index>[<expr><name>posx</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>posy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>nxt</name><operator>!=</operator><name><name>r</name><index>[<expr><name>posx</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call> <operator>and</operator> <operator>*</operator><name>nxt</name><operator>&lt;</operator><name>newy</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>newy</name> <operator>=</operator> <operator>*</operator><name>nxt</name></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name>newy</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>move</name> <operator>=</operator> <name>newy</name><operator>-</operator><name>posy</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>posy</name> <operator>=</operator> <name>newy</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>minx</name> <operator>=</operator> <name>posx</name></expr>;</expr_stmt>
		}</block></then></if>
		<if>if <condition>(<expr><name>i</name><operator>%</operator><literal type="number">4</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>newx</name> <init>= <expr><name>maxx</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <operator>::</operator> <name>iterator</name></name></type> <name>nxt</name> <init>= <expr><name><name>s</name><index>[<expr><name>posy</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>posx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>nxt</name><operator>!=</operator><name><name>s</name><index>[<expr><name>posy</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call> <operator>and</operator> <operator>*</operator><name>nxt</name><operator>&lt;</operator><name>newx</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>newx</name> <operator>=</operator> <operator>*</operator><name>nxt</name></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name>newx</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>move</name> <operator>=</operator> <name>newx</name><operator>-</operator><name>posx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>posx</name> <operator>=</operator> <name>newx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>maxy</name> <operator>=</operator> <name>posy</name></expr>;</expr_stmt>
		}</block></then></if>
		<if>if <condition>(<expr><name>i</name><operator>%</operator><literal type="number">4</literal> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
		<comment type="line">//	cout &lt;&lt;1&lt;&lt;endl;</comment>
			<decl_stmt><decl><type><name>int</name></type> <name>newy</name> <init>= <expr><name>miny</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <operator>::</operator> <name>iterator</name></name></type> <name>nxt</name> <init>= <expr><name><name>r</name><index>[<expr><name>posx</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>posy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">//	cout &lt;&lt;2&lt;&lt;endl;</comment>
			<if>if <condition>(<expr><name><name>r</name><index>[<expr><name>posx</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>and</operator> <name>nxt</name><operator>!=</operator><name><name>r</name><index>[<expr><name>posx</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>nxt</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>newy</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>newy</name></expr></argument>, <argument><expr><operator>*</operator><name>nxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		<comment type="line">//	cout &lt;&lt;3&lt;&lt;endl;</comment>
			<expr_stmt><expr><name>newy</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>move</name> <operator>=</operator> <name>posy</name><operator>-</operator><name>newy</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>posy</name> <operator>=</operator> <name>newy</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>maxx</name> <operator>=</operator> <name>posx</name></expr>;</expr_stmt>
		}</block></then></if>
		<if>if <condition>(<expr><name>i</name><operator>%</operator><literal type="number">4</literal> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>newx</name> <init>= <expr><name>minx</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <operator>::</operator> <name>iterator</name></name></type> <name>nxt</name> <init>= <expr><name><name>s</name><index>[<expr><name>posy</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>posx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>posy</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>and</operator> <name>nxt</name><operator>!=</operator><name><name>s</name><index>[<expr><name>posy</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>nxt</name><operator>--</operator></expr>;</expr_stmt>
		<comment type="line">//		cout &lt;&lt;"asdfji  "&lt;&lt;*nxt&lt;&lt;endl;</comment>
				<expr_stmt><expr><name>newx</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>newx</name></expr></argument>, <argument><expr><operator>*</operator><name>nxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>newx</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>move</name> <operator>=</operator> <name>posx</name><operator>-</operator><name>newx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>posx</name> <operator>=</operator> <name>newx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>miny</name> <operator>=</operator> <name>posy</name></expr>;</expr_stmt>
		}</block></then></if>
		<if>if <condition>(<expr><name>move</name> <operator>==</operator> <literal type="number">0</literal> <operator>and</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><name>br</name> <operator>+=</operator> <name>move</name></expr>;</expr_stmt>
	<comment type="line">//	cout &lt;&lt;"br = "&lt;&lt;br&lt;&lt;endl;</comment>
	}</block></for>
	<if>if <condition>(<expr><name>br</name><operator>&lt;</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>n</name><operator>*</operator><name>m</name><operator>-</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
