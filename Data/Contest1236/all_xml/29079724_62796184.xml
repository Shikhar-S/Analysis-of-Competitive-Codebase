<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29079724_62796184.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bits/stdc++.h"</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false); cin.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ins</name></cpp:macro> <cpp:value>insert</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ph</name></cpp:macro> <cpp:value>push</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cbr</name></cpp:macro> <cpp:value>cerr &lt;&lt; "hi\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mmst</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset((x), v, sizeof ((x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>siz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ll)x.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(), (x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lbd</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lower_bound(all(x), y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ubd</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>upper_bound(all(x), y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>btinpct</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_popcountll((x))</cpp:value></cpp:define>
<decl_stmt><decl><type><name>mt19937</name></type> <name>rng</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>    <comment type="line">//can be used by calling rng() or shuffle(A, A+n, rng)</comment>
<function><specifier>inline</specifier> <type><name>long</name> <name>long</name></type> <name>rand</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>(</operator><call><name>rng</name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>-</operator><name>x</name><operator>)</operator><operator>)</operator> <operator>+</operator> <name>x</name></expr>;</return> }</block></function> <comment type="line">//inclusivesss</comment>
<function><type><name>string</name></type> <name>to_string</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>string</name></type> <name>s</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></decl>;</decl_stmt><return>return <expr><name>s</name></expr>;</return>}</block></function> <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><ternary><condition><expr><name>a</name><operator>==</operator><literal type="number">0</literal></expr>?</condition><then><expr><name>b</name></expr></then><else>:<expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name><operator>%</operator><name>a</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return> }</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>ii</name></type></parameter>, <parameter><type><name>ss</name></type></parameter>, <parameter><type><name>ee</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll ii = (ss); ii &lt;= (ll)(ee); ++ii)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEC</name><parameter_list>(<parameter><type><name>ii</name></type></parameter>, <parameter><type><name>ss</name></type></parameter>, <parameter><type><name>ee</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll ii = (ss); ii &gt;= (ll)(ee); --ii)</cpp:value></cpp:define>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pi</name>;</typedef> <typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>pi</name></expr></argument>&gt;</argument_list></name></type> <name>spi</name>;</typedef> <typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>pi</name></expr></argument>, <argument><expr><name>pi</name></expr></argument>&gt;</argument_list></name></type> <name>dpi</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLINF</name></cpp:macro> <cpp:value>((long long) 1e18)</cpp:value></cpp:define><comment type="line">//1234567890987654321</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1234567890ll</cpp:value></cpp:define>
<comment type="line">// #define cerr if(0)cout</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro> <cpp:value>(300006)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>FAST</name></type>
	<name>cin</name>&gt;&gt;<name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>lol</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>lol</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name>co</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name>num</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{
		<if>if<condition>(<expr><name>y</name><operator>&gt;=</operator><name>n</name><operator>||</operator><name>y</name><operator>&lt;</operator><literal type="number">0</literal><operator>||</operator><name>x</name><operator>&gt;=</operator><name>n</name><operator>||</operator><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><name><name>lol</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><name>num</name> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>co</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>x</name> <operator>==</operator> <name>n</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><operator>--</operator> <name>x</name></expr><operator>,</operator> <expr><name>co</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><operator>++</operator> <name>y</name></expr>;</expr_stmt>
		}</block></then> <elseif>else <if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><operator>++</operator> <name>x</name></expr><operator>,</operator> <expr><name>co</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><operator>++</operator> <name>y</name></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
	}</block></while>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>lol</name></expr></range></decl></init>)</control> <block>{ <for>for<control>(<init><decl><type><name>auto</name></type> <name>j</name><range>:<expr><name>i</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>j</name><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt></block></for> <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt> }</block></for>
}</block></function>
</unit>
