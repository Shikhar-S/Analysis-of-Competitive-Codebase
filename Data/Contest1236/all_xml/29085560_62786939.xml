<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29085560_62786939.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a; i&lt;=b; i+=c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REPP(i,a,b,1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REVV</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a; i&gt;=b; i-=c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REV</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REVV(i,a,b,1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REP(i,0,(int)a-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REV(i,(int)a-1,0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POB</name></cpp:macro> <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FI</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SE</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> , <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>pii</name></expr></argument> &gt;</argument_list></name></type> <name>vii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>ll</name></expr></argument> &gt;</argument_list></name></type> <name>vl</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>ll</name></expr></argument> , <argument><expr><name>ll</name></expr></argument> &gt;</argument_list></name></type> <name>pll</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
	

<function><type><name>ll</name></type> <name>addMod</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>a</name> <operator>+</operator> <name>b</name> <operator>&gt;=</operator> <name>MOD</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>a</name> <operator>+</operator> <name>b</name> <operator>-</operator> <name>MOD</name></expr>;</return></block></then></if>
	<return>return <expr><name>a</name> <operator>+</operator> <name>b</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>mulMod</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><operator>(</operator><name>a</name><operator>*</operator><name>b</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>fast</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>ll</name></type> <name>tmp</name> <init>= <expr><call><name>fast</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>mulMod</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>,<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>b</name><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>mulMod</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<return>return <expr><name>tmp</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>GCD</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>GCD</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></then></if>
	<return>return <expr><call><name>GCD</name><argument_list>(<argument><expr><name>b</name><operator>%</operator><name>a</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getc</name></cpp:macro> <cpp:value>getchar</cpp:value></cpp:define>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>T</name></type> <name>getnum</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>T</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

	<do>do<block>{
		<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block>while<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>;</do>
	<if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>=</operator> <name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block></else></if>
	<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{
		<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><name>ret</name> <operator>+</operator> <name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>sign</name> <operator>*</operator> <name>ret</name></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>ini</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>getnum</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" format="doxygen">//////////////////////////////////////////////</comment>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>ret</name> <init>= <expr><operator>(</operator><call><name>fast</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>MOD</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>MOD</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>fast</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios_base</name> <operator>::</operator> <name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>solve</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
