<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29089852_62812360.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name></cpp:macro> <cpp:value>((int)(1e7))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_X</name></cpp:macro> <cpp:value>((int)(1e6 + 2))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>(2.0*acos(0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>((ll)(1e9 + 7))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NN</name></cpp:macro> <cpp:value>((ll)(305))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>((int)(1e6 + 5))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eps</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>log</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>


<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>


<typedef>typedef <type><name><name>tree</name> <argument_list type="generic">&lt; <argument><expr><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></expr></argument>,  <argument><expr><name>null_type</name></expr></argument>,  <argument><expr><name><name>less</name> <argument_list type="generic">&lt; <argument><expr><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument>,  <argument><expr><name>rb_tree_tag</name></expr></argument>,  <argument><expr><name>tree_order_statistics_node_update</name></expr></argument> &gt;</argument_list></name></type> <name>o_set</name>;</typedef>
<comment type="line" format="doxygen">/// o_set s;</comment>
<comment type="line" format="doxygen">/// s.order_of_key(k) : Number of items strictly smaller than k .</comment>
<comment type="line" format="doxygen">/// *(s.find_by_order(k)) : K-th element in a set (counting from zero).</comment>

<decl_stmt><decl><type><name>int</name></type> <name>tot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>o_set</name></type> <name>ss</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>add_el</name><parameter_list>(<parameter><decl><type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> , <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>p</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>fin</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> , <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>q</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>q</name><operator>.</operator><name>second</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><call><name><name>ss</name><operator>.</operator><name>order_of_key</name></name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>j</name><operator>&lt;</operator><call><name><name>ss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
        <expr_stmt><expr><name>q</name> <operator>=</operator> <operator>*</operator><operator>(</operator><call><name><name>ss</name><operator>.</operator><name>find_by_order</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>q</name><operator>.</operator><name>first</name></name><operator>==</operator><name><name>p</name><operator>.</operator><name>first</name></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>p</name><operator>.</operator><name>second</name></name> <operator>+=</operator> <name><name>q</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>arr</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name><name>v</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> , <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name><name>pos</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v</name><index>[<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>!=</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><block>{<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>last</name></expr>]</index></name></expr>,<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>last</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <if>if<condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><block>{<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>last</name></expr>]</index></name></expr>,<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><macro><name>back</name><argument_list>()</argument_list></macro></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
    <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>

    <comment type="line">//cout&lt;&lt;"asd\n";</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>add</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>tot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>add</name><operator>++</operator></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>p</name><range>:<expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>from</name> <init>= <expr><name><name>p</name><operator>.</operator><name>first</name></name></expr></init></decl>, <decl><type ref="prev"/><name>too</name> <init>= <expr><name><name>p</name><operator>.</operator><name>second</name></name></expr></init></decl>, <decl><type ref="prev"/><name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while<condition>(<expr><call><name><name>ss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><call><name><name>ss</name><operator>.</operator><name>order_of_key</name></name><argument_list>(<argument><expr><block>{<expr><name>from</name><operator>-</operator><name>add</name></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name>j</name><operator>&lt;</operator><call><name><name>ss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block>{
                    <decl_stmt><decl><type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>ppp</name> <init>= <expr><operator>*</operator><operator>(</operator><call><name><name>ss</name><operator>.</operator><name>find_by_order</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
                    <if>if<condition>(<expr><name><name>ppp</name><operator>.</operator><name>first</name></name><operator>+</operator><name>add</name><operator>&gt;=</operator><name>from</name> <operator>&amp;&amp;</operator> <name><name>ppp</name><operator>.</operator><name>first</name></name><operator>+</operator><name>add</name><operator>&lt;=</operator><name>too</name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>ppp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name><name>ppp</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
                        <comment type="line">//add_el({too+1-add,ppp.second},m+1);</comment>
                    }</block></then>
                    <else>else
                        <block type="pseudo"><break>break;</break></block></else></if>
                }</block></then>
                <else>else
                    <block type="pseudo"><break>break;</break></block></else></if>
            }</block></while>
            <if>if<condition>(<expr><name>cnt</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>add_el</name><argument_list>(<argument><expr><block>{<expr><name>too</name><operator>+</operator><literal type="number">1</literal><operator>-</operator><name>add</name></expr>,<expr><name>cnt</name></expr>}</block></expr></argument>,<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></for>
        <comment type="line">//cout&lt;&lt;"oj\n";</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>dhu</name></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>dhu</name> <operator>=</operator> <name><name>pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>dhu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>dhu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>

        <expr_stmt><expr><call><name>add_el</name><argument_list>(<argument><expr><block>{<expr><name>dhu</name><operator>-</operator><name>add</name></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></argument>,<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>tot</name><operator>++</operator></expr>;</expr_stmt>

        <comment type="line">//cout&lt;&lt;ss.size()&lt;&lt;endl;</comment>

        <while>while<condition>(<expr><call><name><name>ss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><call><name><name>ss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">//cout&lt;&lt;j&lt;&lt;endl;</comment>
            <decl_stmt><decl><type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> , <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>p</name> <init>= <expr><operator>*</operator><operator>(</operator><call><name><name>ss</name><operator>.</operator><name>find_by_order</name></name><argument_list>(<argument><expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

            <if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>first</name></name><operator>+</operator><name>add</name><operator>&gt;</operator><name>m</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tot</name> <operator>-=</operator> <name><name>p</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
            }</block></then>
            <else>else <block type="pseudo"><break>break;</break></block></else></if>
        }</block></while>

        <comment type="line">//cout&lt;&lt;"yo\n";</comment>

        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>tot</name></expr>;</expr_stmt>
    }</block></for>


    <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>tot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>add</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<comment type="line">//    for(int i = 1; i&lt;=n; i++){</comment>
<comment type="line">//        reverse(pos[i].begin(),pos[i].end());</comment>
<comment type="line">//    }</comment>
    <comment type="line">//cout&lt;&lt;"asdasdas\n";</comment>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>add</name><operator>++</operator></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>p</name><range>:<expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>from</name> <init>= <expr><name><name>p</name><operator>.</operator><name>first</name></name></expr></init></decl>, <decl><type ref="prev"/><name>too</name> <init>= <expr><name><name>p</name><operator>.</operator><name>second</name></name></expr></init></decl>, <decl><type ref="prev"/><name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while<condition>(<expr><call><name><name>ss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><call><name><name>ss</name><operator>.</operator><name>order_of_key</name></name><argument_list>(<argument><expr><block>{<expr><name>from</name><operator>-</operator><name>add</name></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name>j</name><operator>&lt;</operator><call><name><name>ss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block>{
                    <decl_stmt><decl><type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>ppp</name> <init>= <expr><operator>*</operator><operator>(</operator><call><name><name>ss</name><operator>.</operator><name>find_by_order</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
                    <if>if<condition>(<expr><name><name>ppp</name><operator>.</operator><name>first</name></name><operator>+</operator><name>add</name><operator>&gt;=</operator><name>from</name> <operator>&amp;&amp;</operator> <name><name>ppp</name><operator>.</operator><name>first</name></name><operator>+</operator><name>add</name><operator>&lt;=</operator><name>too</name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>ppp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name><name>ppp</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
                        <comment type="line">//add_el({too+1-add,ppp.second},m+1);</comment>
                    }</block></then>
                    <else>else
                        <block type="pseudo"><break>break;</break></block></else></if>
                }</block></then>
                <else>else
                    <block type="pseudo"><break>break;</break></block></else></if>
            }</block></while>
            <if>if<condition>(<expr><name>cnt</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>add_el</name><argument_list>(<argument><expr><block>{<expr><name>too</name><operator>+</operator><literal type="number">1</literal><operator>-</operator><name>add</name></expr>,<expr><name>cnt</name></expr>}</block></expr></argument>,<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></for>
        <comment type="line">//cout&lt;&lt;"oj\n";</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>dhu</name></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>dhu</name> <operator>=</operator> <name><name>pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>dhu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>dhu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>

        <expr_stmt><expr><call><name>add_el</name><argument_list>(<argument><expr><block>{<expr><name>dhu</name><operator>-</operator><name>add</name></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></argument>,<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>tot</name><operator>++</operator></expr>;</expr_stmt>

        <comment type="line">//cout&lt;&lt;ss.size()&lt;&lt;endl;</comment>

        <while>while<condition>(<expr><call><name><name>ss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><call><name><name>ss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">//cout&lt;&lt;j&lt;&lt;endl;</comment>
            <decl_stmt><decl><type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> , <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>p</name> <init>= <expr><operator>*</operator><operator>(</operator><call><name><name>ss</name><operator>.</operator><name>find_by_order</name></name><argument_list>(<argument><expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

            <if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>first</name></name><operator>+</operator><name>add</name><operator>&gt;</operator><name>m</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tot</name> <operator>-=</operator> <name><name>p</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
            }</block></then>
            <else>else <block type="pseudo"><break>break;</break></block></else></if>
        }</block></while>

        <comment type="line">//cout&lt;&lt;"yo\n";</comment>

        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>tot</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
