<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29048755_62815508.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name>M</name></decl>, <decl><type ref="prev"/><name>K</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name> <operator>&gt;&gt;</operator> <name>M</name> <operator>&gt;&gt;</operator> <name>K</name></expr>;</expr_stmt> 
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>R</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt> 
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>C</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt> 
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>K</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt> 
		<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt> 
		<expr_stmt><expr><name><name>R</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		<expr_stmt><expr><name><name>C</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">114514</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		<expr_stmt><expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">114514</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>M</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">114514</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		<expr_stmt><expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">114514</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	}</block></for>
  <decl_stmt><decl><type><name>bool</name></type> <name>exception</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>M</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
   <if>if<condition>(<expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>N</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>exception</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if> <break>break;</break> 
  }</block></for>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
    <if>if<condition>(<expr><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>N</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>exception</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if> 
  }</block></for>
  <if>if<condition>(<expr><name>exception</name></expr>)</condition><then><block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> 
  }</block></then></if>
	<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
	<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><name>M</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>bottom</name> <init>= <expr><name>N</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
	<decl_stmt><decl><type><name>int</name></type> <name>nowx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nowy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
	<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>m1</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>R</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nowy</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>R</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 
      <if>if<condition>(<expr><name>nowy</name> <operator>==</operator> <name>right</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if> 
		<if>if<condition>(<expr><name><name>R</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><name>m1</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>right</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>count</name> <operator>+=</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name>right</name> <operator>-</operator> <name>nowy</name></expr>;</expr_stmt> 
			<expr_stmt><expr><name>nowy</name> <operator>=</operator> <name>right</name></expr>;</expr_stmt> 
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name><name>R</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><name>m1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>nowy</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if></elseif> 
		<else>else<block>{
			<expr_stmt><expr><name>count</name> <operator>+=</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>R</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><name>m1</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>nowy</name></expr>;</expr_stmt> 
			<expr_stmt><expr><name>nowy</name> <operator>=</operator> <name><name>R</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><name>m1</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
		}</block></else></if>
		<expr_stmt><expr><name>top</name> <operator>=</operator> <name>nowx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// direction 1 </comment>
		<decl_stmt><decl><type><name>int</name></type> <name>m2</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>C</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nowx</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>C</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 
       <if>if<condition>(<expr><name>nowx</name> <operator>==</operator> <name>bottom</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if> 
		<if>if<condition>(<expr><name><name>C</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><name>m2</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>bottom</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>count</name> <operator>+=</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name>bottom</name> <operator>-</operator> <name>nowx</name></expr>;</expr_stmt> 
			<expr_stmt><expr><name>nowx</name> <operator>=</operator> <name>bottom</name></expr>;</expr_stmt> 
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name><name>C</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><name>m2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>nowx</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if></elseif> 
		<else>else<block>{
			<expr_stmt><expr><name>count</name> <operator>+=</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>C</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><name>m2</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>nowx</name></expr>;</expr_stmt> 
			<expr_stmt><expr><name>nowx</name> <operator>=</operator> <name><name>C</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><name>m2</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
		}</block></else></if>
		<expr_stmt><expr><name>right</name> <operator>=</operator> <name>nowy</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// direction 2</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>m3</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>R</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nowy</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>R</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 
      <if>if<condition>(<expr><name>nowy</name> <operator>==</operator> <name>left</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if> 
		<if>if<condition>(<expr><name><name>R</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><name>m3</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>left</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>count</name> <operator>+=</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name>nowy</name> <operator>-</operator> <name>left</name></expr>;</expr_stmt> 
			<expr_stmt><expr><name>nowy</name> <operator>=</operator> <name>left</name></expr>;</expr_stmt> 
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name><name>R</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><name>m3</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>nowy</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if></elseif> 
		<else>else<block>{
			<expr_stmt><expr><name>count</name> <operator>+=</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name>nowy</name> <operator>-</operator> <name><name>R</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><name>m3</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
			<expr_stmt><expr><name>nowy</name> <operator>=</operator> <name><name>R</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><name>m3</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
		}</block></else></if>
		<expr_stmt><expr><name>bottom</name> <operator>=</operator> <name>nowx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// direction 3</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>m4</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>C</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nowx</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>C</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 
      <if>if<condition>(<expr><name>nowx</name> <operator>==</operator> <name>top</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if> 
		<if>if<condition>(<expr><name><name>C</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><name>m4</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>top</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>count</name> <operator>+=</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name>nowx</name> <operator>-</operator> <name>top</name></expr>;</expr_stmt> 
			<expr_stmt><expr><name>nowx</name> <operator>=</operator> <name>top</name></expr>;</expr_stmt> 
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name><name>C</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><name>m4</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>nowx</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if></elseif> 
		<else>else<block>{
			<expr_stmt><expr><name>count</name> <operator>+=</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name>nowx</name> <operator>-</operator> <name><name>C</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><name>m4</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
			<expr_stmt><expr><name>nowx</name> <operator>=</operator> <name><name>C</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><name>m4</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
		}</block></else></if>
		<expr_stmt><expr><name>left</name> <operator>=</operator> <name>nowy</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// direction 4</comment>
	}</block></while>
	<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>cell</name> <init>= <expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name>N</name> <operator>*</operator> <name>M</name> <operator>-</operator> <name>K</name></expr></init></decl>;</decl_stmt> 
	<if>if<condition>(<expr><name>count</name> <operator>==</operator> <name>cell</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then> 
	<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if> 
}</block></function></unit>
