<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29021127_62788562.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>long</name> <name>long</name> <name>int</name></type> <name>fastPow</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>mod</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>a</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{
        <if>if <condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>*</operator> <name>a</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>*</operator> <name>a</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt> <expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>giftNum</name></decl>, <decl><type ref="prev"/><name>boxNum</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>giftNum</name> <operator>&gt;&gt;</operator> <name>boxNum</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>fastPow</name><argument_list>(<argument><expr><call><name>fastPow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>boxNum</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>giftNum</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
 
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
