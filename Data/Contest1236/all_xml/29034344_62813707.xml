<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29034344_62813707.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>rows</name><index>[<expr><literal type="number">100000</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>cols</name><index>[<expr><literal type="number">100000</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rows</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cols</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>rows</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rows</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>rows</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>rows</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>cols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>cols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>visit_count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>last_x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>last_y</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>dir</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>x_min</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>x_max</name><init>=<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>y_min</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>y_max</name><init>=<expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ll</name></type> <name>index</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>rows</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>rows</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>rows</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>dest</name><init>=<expr><name><name>rows</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>dest</name><operator>&gt;=</operator><name>y_max</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>dest</name><operator>=</operator><name>y_max</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>visit_count</name> <operator>+=</operator> <name>dest</name> <operator>-</operator> <name>y</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>last_x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>last_y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>y_max</name><operator>&gt;</operator><name>y</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>y_max</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name>x_min</name><operator>&lt;</operator><name>x</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>x_min</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block></then></if>      
    <decl_stmt><decl><type><name>ll</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{
        <comment type="line">// if(counter&gt;10)</comment>
        <comment type="line">//     break;</comment>
        <comment type="line">// counter++;</comment>
        <comment type="line">// cout&lt;&lt;"x: "&lt;&lt;x&lt;&lt;" y:"&lt;&lt;y&lt;&lt;" dir:"&lt;&lt;dir&lt;&lt;endl;</comment>
        <comment type="line">// cout&lt;&lt;"x_min: "&lt;&lt;x_min&lt;&lt;" x_max:"&lt;&lt;x_max&lt;&lt;endl;</comment>
        <comment type="line">// cout&lt;&lt;"y_min: "&lt;&lt;y_min&lt;&lt;" y_max:"&lt;&lt;y_max&lt;&lt;endl;</comment>
        <decl_stmt><decl><type><name>ll</name></type> <name>x_copy</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>y_copy</name> <init>= <expr><name>y</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>index</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>rows</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>rows</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>rows</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>dest</name><init>=<expr><name><name>rows</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>dest</name><operator>&gt;=</operator><name>y_max</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>dest</name><operator>=</operator><name>y_max</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then></if>
            <if>if<condition>(<expr><name>dest</name><operator>==</operator><name>y</name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>visit_count</name> <operator>+=</operator> <name>dest</name> <operator>-</operator> <name>y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>y</name><operator>==</operator><name>last_y</name> <operator>&amp;&amp;</operator> <name>x</name><operator>==</operator><name>last_x</name></expr>)</condition><then><block>{
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>last_x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>last_y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>y_max</name><operator>&gt;</operator><name>y</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>y_max</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name>x_min</name><operator>&lt;</operator><name>x</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>x_min</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block></then></if>            
        }</block></then><elseif>else <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>index</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>cols</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cols</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>cols</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>dest</name><init>=<expr><name><name>cols</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>dest</name><operator>&gt;=</operator><name>x_max</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>dest</name><operator>=</operator><name>x_max</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then></if>
            <if>if<condition>(<expr><name>dest</name><operator>==</operator><name>x</name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>visit_count</name> <operator>+=</operator> <name>dest</name> <operator>-</operator> <name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>y</name><operator>==</operator><name>last_y</name> <operator>&amp;&amp;</operator> <name>x</name><operator>==</operator><name>last_x</name></expr>)</condition><then><block>{
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>last_x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>last_y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>x_max</name><operator>&gt;</operator><name>x</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>x_max</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name>y_max</name><operator>&gt;</operator><name>y</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>y_max</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block></then></if>
            
        }</block></then></if></elseif><elseif>else <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>index</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>rows</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>rows</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>rows</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>dest</name><init>=<expr><name><name>rows</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>dest</name><operator>&lt;=</operator><name>y_min</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>dest</name><operator>=</operator><name>y_min</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then></if>
            <if>if<condition>(<expr><name>dest</name><operator>==</operator><name>y</name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>visit_count</name> <operator>+=</operator> <name>y</name> <operator>-</operator> <name>dest</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>y</name><operator>==</operator><name>last_y</name> <operator>&amp;&amp;</operator> <name>x</name><operator>==</operator><name>last_x</name></expr>)</condition><then><block>{
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>last_x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>last_y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            
            <if>if<condition>(<expr><name>y_min</name><operator>&lt;</operator><name>y</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>y_min</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name>x_max</name><operator>&gt;</operator><name>x</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>x_max</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block></then></if>
        }</block></then></if></elseif><else>else<block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>index</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>cols</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cols</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>cols</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>dest</name><init>=<expr><name><name>cols</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <comment type="line">// cout&lt;&lt;"dest is: "&lt;&lt;dest&lt;&lt;endl;</comment>
            <if>if<condition>(<expr><name>dest</name><operator>&lt;=</operator><name>x_min</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>dest</name><operator>=</operator><name>x_min</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then></if>
            <if>if<condition>(<expr><name>dest</name><operator>==</operator><name>x</name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>visit_count</name> <operator>+=</operator> <name>x</name> <operator>-</operator> <name>dest</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>y</name><operator>==</operator><name>last_y</name> <operator>&amp;&amp;</operator> <name>x</name><operator>==</operator><name>last_x</name></expr>)</condition><then><block>{
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>last_x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>last_y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            
            <if>if<condition>(<expr><name>x_min</name><operator>&lt;</operator><name>x</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>x_min</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name>y_min</name><operator>&lt;</operator><name>y</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>y_min</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block></then></if>
        }</block></else></if>
    }</block></while>
    <if>if<condition>(<expr><name>visit_count</name><operator>+</operator><name>k</name> <operator>&lt;</operator> <name>m</name><operator>*</operator><name>n</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt>
    }</block></then><else>else<block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
    }</block></else></if>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
