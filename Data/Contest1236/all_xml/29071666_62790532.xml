<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29071666_62790532.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vl</name></expr></argument>&gt;</argument_list></name></type> <name>vvl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vvl</name></expr></argument>&gt;</argument_list></name></type> <name>vvvl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vvvl</name></expr></argument>&gt;</argument_list></name></type> <name>vvvvl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>vvi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vvi</name></expr></argument>&gt;</argument_list></name></type> <name>vvvi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>vb</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vvb</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vvb</name></expr></argument>&gt;</argument_list></name></type> <name>vvvb</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vvvb</name></expr></argument>&gt;</argument_list></name></type> <name>vvvvb</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>vs</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vs</name></expr></argument>&gt;</argument_list></name></type> <name>vvs</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vvs</name></expr></argument>&gt;</argument_list></name></type> <name>vvvs</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vc</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vvc</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>vd</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vd</name></expr></argument>&gt;</argument_list></name></type> <name>vvd</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vvd</name></expr></argument>&gt;</argument_list></name></type> <name>vvvd</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>PL</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>PL</name></expr></argument>&gt;</argument_list></name></type> <name>vpl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>PL</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vvpl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vvpl</name></expr></argument>&gt;</argument_list></name></type> <name>vvvpl</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">1001001001</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>LINF</name> <init>= <expr><literal type="number">1e17</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pi</name> <init>= <expr><literal type="number">3.1415926535897932</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>string</name></type> <name>endstr</name> <init>= <expr><literal type="string">"\n"</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = (a); i &lt; b; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = (a); i &gt; b; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = 0; i &lt; n; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rrep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = n-1; i &gt; -1; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORMAP</name><parameter_list>(<parameter><type><name>it</name></type></parameter>, <parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto it = m.begin(); it != m.end(); it++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>epb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(X).begin(),(X).end()</cpp:value></cpp:define>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>T</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>a</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name><operator>%</operator><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>T</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>a</name> <operator>/</operator> <call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>b</name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>p_comp_fs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PL</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PL</name></type> <name>p2</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><name><name>p1</name><operator>.</operator><name>first</name></name> <operator>&lt;</operator> <name><name>p2</name><operator>.</operator><name>first</name></name></expr>;</return>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>bool</name></type> <name>p_comp_fg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PL</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PL</name></type> <name>p2</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><name><name>p1</name><operator>.</operator><name>first</name></name> <operator>&gt;</operator> <name><name>p2</name><operator>.</operator><name>first</name></name></expr>;</return>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>bool</name></type> <name>p_comp_ss</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PL</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PL</name></type> <name>p2</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><name><name>p1</name><operator>.</operator><name>second</name></name> <operator>&lt;</operator> <name><name>p2</name><operator>.</operator><name>second</name></name></expr>;</return>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>bool</name></type> <name>p_comp_sg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PL</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PL</name></type> <name>p2</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><name><name>p1</name><operator>.</operator><name>second</name></name> <operator>&gt;</operator> <name><name>p2</name><operator>.</operator><name>second</name></name></expr>;</return>}</block></function><empty_stmt>;</empty_stmt>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>uniquen</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>vec</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>ALL</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>vec</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name>unique</name><argument_list>(<argument><expr><call><name><name>vec</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vec</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>vec</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>vec</name></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>ll</name></type> <name>popcnt</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>__builtin_popcountll</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function><empty_stmt>;</empty_stmt>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>chmax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="boolean">true</literal></expr>;</return> }</block></then></if> <return>return <expr><literal type="boolean">false</literal></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>chmin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="boolean">true</literal></expr>;</return> }</block></then></if> <return>return <expr><literal type="boolean">false</literal></expr>;</return> }</block></function>
<comment type="line">//friend bool operator&lt;(const stc&amp; lhs, const stc&amp; rhs){</comment>
<comment type="line">//    return std::tie(lhs.l, lhs.r) &lt; std::tie(rhs.l, rhs.r);</comment>
<comment type="line">//}</comment>


<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<struct><template>template<parameter_list>&lt; <parameter><type><name>int</name></type> <name>mod</name></parameter> &gt;</parameter_list></template>
struct <name>ModInt</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
    <constructor><name>ModInt</name><parameter_list>()</parameter_list> <member_init_list>: <call><name>x</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
    <constructor><name>ModInt</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>y</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>x</name><argument_list>(<argument><expr><ternary><condition><expr><name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>y</name> <operator>%</operator> <name>mod</name></expr> </then><else>: <expr><operator>(</operator><name>mod</name> <operator>-</operator> <operator>(</operator><operator>-</operator><name>y</name><operator>)</operator> <operator>%</operator> <name>mod</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr></else></ternary></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
    <function type="operator"><type><name>ModInt</name> <modifier>&amp;</modifier></type><name>operator<name>+=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{
        <if>if<condition>(<expr><operator>(</operator><name>x</name> <operator>+=</operator> <name><name>p</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>&gt;=</operator> <name>mod</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>-=</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></function>
    <function type="operator"><type><name>ModInt</name> <modifier>&amp;</modifier></type><name>operator<name>-=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{
        <if>if<condition>(<expr><operator>(</operator><name>x</name> <operator>+=</operator> <name>mod</name> <operator>-</operator> <name><name>p</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>&gt;=</operator> <name>mod</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>-=</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></function>
    <function type="operator"><type><name>ModInt</name> <modifier>&amp;</modifier></type><name>operator<name>*=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call>(<name>int</name>) <argument_list>(<argument><expr><literal type="number">1LL</literal> <operator>*</operator> <name>x</name> <operator>*</operator> <name><name>p</name><operator>.</operator><name>x</name></name> <operator>%</operator> <name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></function>
    <function type="operator"><type><name>ModInt</name> <modifier>&amp;</modifier></type><name>operator<name>/=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><operator>*</operator><name>this</name> <operator>*=</operator> <call><name><name>p</name><operator>.</operator><name>inv</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></function>
    <function type="operator"><type><name>ModInt</name></type> <name>operator<name>-</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call><name>ModInt</name><argument_list>(<argument><expr><operator>-</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
    <function type="operator"><type><name>ModInt</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call><name>ModInt</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>p</name></expr>;</return> }</block></function>
    <function type="operator"><type><name>ModInt</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call><name>ModInt</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>p</name></expr>;</return> }</block></function>
    <function type="operator"><type><name>ModInt</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call><name>ModInt</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name>p</name></expr>;</return> }</block></function>
    <function type="operator"><type><name>ModInt</name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call><name>ModInt</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>/=</operator> <name>p</name></expr>;</return> }</block></function>
    <function type="operator"><type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>x</name> <operator>==</operator> <name><name>p</name><operator>.</operator><name>x</name></name></expr>;</return> }</block></function>
    <function type="operator"><type><name>bool</name></type> <name>operator<name>!=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>x</name> <operator>!=</operator> <name><name>p</name><operator>.</operator><name>x</name></name></expr>;</return> }</block></function>
    
    <function><type><name>ModInt</name></type> <name>inv</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name>x</name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name>mod</name></expr></init></decl>, <decl><type ref="prev"/><name>u</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{
            <expr_stmt><expr><name>t</name> <operator>=</operator> <name>a</name> <operator>/</operator> <name>b</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name> <operator>-=</operator> <name>t</name> <operator>*</operator> <name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>u</name> <operator>-=</operator> <name>t</name> <operator>*</operator> <name>v</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><call><name>ModInt</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <function><type><name>ModInt</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
        <decl_stmt><decl><type><name>ModInt</name></type> <name>ret</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>mul</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{
            <if>if<condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>*=</operator> <name>mul</name></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>mul</name> <operator>*=</operator> <name>mul</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>ret</name></expr>;</return>
    }</block></function>
    
    <friend>friend <function type="operator"><type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>x</name></name></expr>;</return>
    }</block></function></friend>
    
    <friend>friend <function type="operator"><type><name>istream</name> <modifier>&amp;</modifier></type><name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>ModInt</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int64_t</name></type> <name>t</name></decl>;</decl_stmt>
        <name>is</name> <expr_stmt><expr><operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
        <name>a</name> <expr_stmt><expr><operator>=</operator> <call><name><name>ModInt</name><argument_list type="generic">&lt; <argument><expr><name>mod</name></expr></argument> &gt;</argument_list></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><name>is</name><operator>)</operator></expr>;</return>
    }</block></function></friend>
    
    <function><specifier>static</specifier> <type><name>int</name></type> <name>get_mod</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><name>mod</name></expr>;</return> }</block></function>
</public>}</block>;</struct>

<using>using <name>mint</name> <init>= <type><name><name>ModInt</name><argument_list type="generic">&lt;<argument><expr><name>mod</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>mint</name></expr></argument>&gt;</argument_list></name></type> <name>vm</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vm</name></expr></argument>&gt;</argument_list></name></type> <name>vvm</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vvm</name></expr></argument>&gt;</argument_list></name></type> <name>vvvm</name>;</typedef>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name>M</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name> <operator>&gt;&gt;</operator> <name>M</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><call><name>mint</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>pow</name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>.</operator><call><name>pow</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endstr</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
