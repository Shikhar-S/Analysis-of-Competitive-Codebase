<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29048808_62805398.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>A</name></decl>,<decl><type ref="prev"/><name>M</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type><name><name>p</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>q</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>q</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>A</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>x</name><operator>=</operator><name>y</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>M</name><operator>=</operator><name>m</name><operator>-</operator><name>b</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><name>y</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>M</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>M</name></expr></argument>,<argument><expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
	<expr_stmt><expr><name>A</name><operator>+=</operator><name>M</name><operator>-</operator><name>y</name></expr><operator>,</operator><expr><name>a</name><operator>=</operator><name>x</name></expr><operator>,</operator><expr><name>y</name><operator>=</operator><name>M</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>M</name><operator>=</operator><name>n</name><operator>-</operator><name>c</name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>q</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><name><name>q</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><name>x</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>M</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>M</name></expr></argument>,<argument><expr><name><name>q</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
		<if>if<condition>(<expr><name>M</name><operator>==</operator><name>x</name></expr>)</condition><then>
			<block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><name>A</name><operator>+=</operator><name>M</name><operator>-</operator><name>x</name></expr><operator>,</operator><expr><name>b</name><operator>=</operator><name>m</name><operator>-</operator><name>y</name><operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>x</name><operator>=</operator><name>M</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>M</name><operator>=</operator><name>d</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name>y</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>M</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>M</name></expr></argument>,<argument><expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
		<if>if<condition>(<expr><name>M</name><operator>==</operator><name>y</name></expr>)</condition><then>
			<block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><name>A</name><operator>+=</operator><name>y</name><operator>-</operator><name>M</name></expr><operator>,</operator><expr><name>c</name><operator>=</operator><name>n</name><operator>-</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>y</name><operator>=</operator><name>M</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>M</name><operator>=</operator><name>a</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>q</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><name><name>q</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name>x</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>M</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>M</name></expr></argument>,<argument><expr><name><name>q</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
		<if>if<condition>(<expr><name>M</name><operator>==</operator><name>x</name></expr>)</condition><then>
			<block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><name>A</name><operator>+=</operator><name>x</name><operator>-</operator><name>M</name></expr><operator>,</operator><expr><name>d</name><operator>=</operator><name>y</name></expr><operator>,</operator><expr><name>x</name><operator>=</operator><name>M</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>M</name><operator>=</operator><name>m</name><operator>-</operator><name>b</name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><name>y</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>M</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>M</name></expr></argument>,<argument><expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
		<if>if<condition>(<expr><name>M</name><operator>==</operator><name>y</name></expr>)</condition><then>
			<block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><name>A</name><operator>+=</operator><name>M</name><operator>-</operator><name>y</name></expr><operator>,</operator><expr><name>a</name><operator>=</operator><name>x</name></expr><operator>,</operator><expr><name>y</name><operator>=</operator><name>M</name></expr>;</expr_stmt>
	}</block></while>
	<if>if<condition>(<expr><name>A</name><operator>==</operator><name>n</name><operator>*</operator><name>m</name><operator>-</operator><name>k</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal></expr>;</expr_stmt></block></then>
	<else>else
		<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal></expr>;</expr_stmt></block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
