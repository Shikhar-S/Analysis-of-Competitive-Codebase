<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29054594_62810013.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(s).begin(), (s).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rALL</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(s).rbegin(), (s).rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(s).size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqr</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s) * (s))</cpp:value></cpp:define>
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<typedef>typedef <type><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>point</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<decl_stmt><decl><type><name>mt19937</name></type> <name>rng</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>s_x</name><index>[<expr><literal type="number">100500</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>s_y</name><index>[<expr><literal type="number">100500</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//freopen("input.txt", "r", stdin);</comment>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s_x</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s_y</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>last_down_y</name> <init>= <expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>last_left_x</name> <init>= <expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>last_up_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>last_right_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>cnt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>turn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition>;</condition> <incr><expr><name>turn</name> <operator>=</operator> <operator>(</operator><name>turn</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">4</literal></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{ <comment type="line" format="doxygen">///0 - right, 1 - down, 2 - left, 3 - up</comment>
        <comment type="line">// /cout &lt;&lt; x &lt;&lt; " " &lt;&lt; y &lt;&lt; " " &lt;&lt; turn &lt;&lt; " " &lt;&lt; cnt &lt;&lt; endl;</comment>
        <if>if <condition>(<expr><name>turn</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{ <comment type="line" format="doxygen">///right</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>_y</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>s_x</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>it</name> <operator>==</operator> <name><name>s_x</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>_y</name> <operator>=</operator> <name>last_down_y</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>_y</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><operator>*</operator><name>it</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>last_down_y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            <if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>_y</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name>_y</name> <operator>-</operator> <name>y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name> <operator>=</operator> <name>_y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>last_right_x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>turn</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{ <comment type="line" format="doxygen">///down</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>_x</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>s_y</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>it</name> <operator>==</operator> <name><name>s_y</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>_x</name> <operator>=</operator> <name>last_left_x</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>_x</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><operator>*</operator><name>it</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>last_left_x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            <if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>_x</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name>_x</name> <operator>-</operator> <name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <name>_x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>last_down_y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>turn</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{ <comment type="line" format="doxygen">///left</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>_y</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>s_x</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>it</name> <operator>==</operator> <name><name>s_x</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>_y</name> <operator>=</operator> <name>last_up_y</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
            <else>else <block>{
                <expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>_y</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><operator>*</operator><name>it</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>last_up_y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>_y</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name>y</name> <operator>-</operator> <name>_y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name> <operator>=</operator> <name>_y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>last_left_x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>turn</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{ <comment type="line" format="doxygen">///up</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>_x</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>s_y</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>it</name> <operator>==</operator> <name><name>s_y</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>_x</name> <operator>=</operator> <name>last_right_x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
            <else>else <block>{
                <expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>_x</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><operator>*</operator><name>it</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>last_right_x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>_x</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name>x</name> <operator>-</operator> <name>_x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <name>_x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>last_up_y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <if>if <condition>(<expr><name>cnt</name> <operator>+</operator> <name>k</name> <operator>==</operator> <literal type="number">1LL</literal> <operator>*</operator> <name>n</name> <operator>*</operator> <name>m</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
}</block></function>
</unit>
