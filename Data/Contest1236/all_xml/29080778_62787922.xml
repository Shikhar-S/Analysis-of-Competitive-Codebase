<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29080778_62787922.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<function><type><name>long</name> <name>long</name></type> <name>powmod</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>pmx</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>pmn</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>pmm</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>pmn</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>pmn</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>powmod</name><argument_list>(<argument><expr><operator>(</operator><name>pmx</name> <operator>*</operator> <name>pmx</name><operator>)</operator> <operator>%</operator> <name>pmm</name></expr></argument>, <argument><expr><name>pmn</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>pmm</name></expr></argument>)</argument_list></call></expr>;</return></block></then>
	<else>else <block type="pseudo"><return>return <expr><operator>(</operator><name>pmx</name> <operator>*</operator> <call><name>powmod</name><argument_list>(<argument><expr><name>pmx</name></expr></argument>, <argument><expr><name>pmn</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pmm</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>pmm</name></expr>;</return></block></else></if>
}</block></function> 
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<comment type="line">// your code goes here</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>,<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>q</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<comment type="line">//cin &gt;&gt; q;</comment>
	<for>for<control>(<init><expr><name>r</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>r</name><operator>&lt;</operator><name>q</name></expr>;</condition><incr><expr><name>r</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>powmod</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name>powmod</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call><operator>+</operator><name>mod</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>mod</name><operator>)</operator></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
