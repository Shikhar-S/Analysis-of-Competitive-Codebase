<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29050072_62808094.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name><name>R</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>C</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>


<struct>struct <name>Point</name><block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
</public>}</block>;</struct>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>Point</name></expr></argument>&gt;</argument_list></name></type> <name>M</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>r</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>R</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>C</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>r1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r2</name> <init>= <expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>c1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c2</name> <init>= <expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Point</name></type> <name>u</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>u</name><operator>.</operator><name>r</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>u</name><operator>.</operator><name>c</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>M</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <literal type="number">1e9</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{
        <comment type="line">//cout&lt;&lt;s&lt;&lt;" "&lt;&lt;r1&lt;&lt;" "&lt;&lt;r2&lt;&lt;" "&lt;&lt;c1&lt;&lt;" "&lt;&lt;c2&lt;&lt;endl;</comment>

        <if>if<condition>(<expr><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>R</name><index>[<expr><name><name>u</name><operator>.</operator><name>r</name></name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>c</name> <init>= <expr><operator>*</operator><name><name>R</name><index>[<expr><name><name>u</name><operator>.</operator><name>r</name></name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>u</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>c</name> <operator>&lt;</operator> <name>c2</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>num</name> <operator>+=</operator> <operator>(</operator><name>r2</name> <operator>-</operator> <name>r1</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>c2</name> <operator>-</operator> <name>c</name><operator>)</operator></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>r1</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>u</name><operator>.</operator><name>c</name></name> <operator>=</operator> <name>c2</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if<condition>(<expr><name>s</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>C</name><index>[<expr><name><name>u</name><operator>.</operator><name>c</name></name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>r</name> <init>= <expr><operator>*</operator><name><name>C</name><index>[<expr><name><name>u</name><operator>.</operator><name>c</name></name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>u</name><operator>.</operator><name>r</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>r</name> <operator>&lt;</operator> <name>r2</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>num</name> <operator>+=</operator> <operator>(</operator><name>c2</name> <operator>-</operator> <name>c1</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>r2</name> <operator>-</operator> <name>r</name><operator>)</operator></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>r2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>c2</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>u</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name>r2</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if<condition>(<expr><name>s</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>R</name><index>[<expr><name><name>u</name><operator>.</operator><name>r</name></name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>c</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>--</operator><name><name>R</name><index>[<expr><name><name>u</name><operator>.</operator><name>r</name></name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>u</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>c</name> <operator>&gt;</operator> <name>c1</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>num</name> <operator>+=</operator> <operator>(</operator><name>r2</name> <operator>-</operator> <name>r1</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>c</name> <operator>-</operator> <name>c1</name><operator>)</operator></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>r2</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>u</name><operator>.</operator><name>c</name></name> <operator>=</operator> <name>c1</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{
            <expr_stmt><expr><name><name>C</name><index>[<expr><name><name>u</name><operator>.</operator><name>c</name></name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>r</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>--</operator><name><name>C</name><index>[<expr><name><name>u</name><operator>.</operator><name>c</name></name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>u</name><operator>.</operator><name>r</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>r</name> <operator>&gt;</operator> <name>r1</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>num</name> <operator>+=</operator> <operator>(</operator><name>c2</name> <operator>-</operator> <name>c1</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>r</name> <operator>-</operator> <name>r1</name><operator>)</operator></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>c1</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>u</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name>r1</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></else></if>
        <if>if<condition>(<expr><name><name>M</name><index>[<expr><operator>(</operator><name>s</name><operator>-</operator><literal type="number">1</literal><operator>+</operator><literal type="number">4</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>r</name> <operator>==</operator> <name><name>u</name><operator>.</operator><name>r</name></name> <operator>&amp;&amp;</operator> <name><name>M</name><index>[<expr><operator>(</operator><name>s</name><operator>-</operator><literal type="number">1</literal><operator>+</operator><literal type="number">4</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>c</name> <operator>==</operator> <name><name>u</name><operator>.</operator><name>c</name></name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        <expr_stmt><expr><name><name>M</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <name><name>u</name><operator>.</operator><name>r</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>M</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>c</name> <operator>=</operator> <name><name>u</name><operator>.</operator><name>c</name></name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>r2</name> <operator>-</operator> <name>r1</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c2</name> <operator>-</operator> <name>c1</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>s</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>;</expr_stmt>
    }</block></while>
    <if>if<condition>(<expr><name>num</name> <operator>!=</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
