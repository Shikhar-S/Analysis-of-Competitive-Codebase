<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29066895_62812537.cpp"><comment type="line">// :(</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>h</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>r</name><index>[<expr><name>h</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>c</name><index>[<expr><name>w</name></expr>]</index></name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name><operator>--</operator></expr><operator>,</operator> <expr><name>y</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>  <block type="pseudo"><expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>  <block type="pseudo"><expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

    <decl_stmt><decl><type><name>ll</name></type> <name>vis</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>all</name> <init>= <expr><operator>(</operator><name>ll</name><operator>)</operator><name>h</name><operator>*</operator><name>w</name><operator>-</operator><name>k</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>li</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ri</name> <init>= <expr><name>h</name></expr></init></decl>, <decl><type ref="prev"/><name>lj</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>rj</name> <init>= <expr><name>w</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>way</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition><block>{
        <if>if<condition>(<expr><name>way</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>nj</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>rj</name></expr></argument>,<argument><expr><operator>*</operator><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>vis</name> <operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name>nj</name></expr></argument>,<argument><expr><name>rj</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>j</name></expr>;</expr_stmt>
            <comment type="line">// if(nj &gt; rj)  break;</comment>
            <expr_stmt><expr><name>rj</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>rj</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>li</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>li</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>f</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <name>nj</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>   <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>j</name> <operator>=</operator> <name>nj</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then><elseif>else <if>if<condition>(<expr><name>way</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>ni</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>ri</name></expr></argument>, <argument><expr><operator>*</operator><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>vis</name> <operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ni</name></expr></argument>,<argument><expr><name>ri</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name></expr>;</expr_stmt>
            <comment type="line">// if(ni &gt; ri)  break;</comment>
            <expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ri</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>rj</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>rj</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>f</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>ni</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>   <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>i</name> <operator>=</operator> <name>ni</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if></elseif><elseif>else <if>if<condition>(<expr><name>way</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>nj</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name>lj</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>--</operator><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>vis</name> <operator>+=</operator> <name>j</name><operator>-</operator><call><name>max</name><argument_list>(<argument><expr><name>nj</name></expr></argument>,<argument><expr><name>lj</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <comment type="line">// if(nj &lt; lj)    break;</comment>
            <expr_stmt><expr><name>lj</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>lj</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ri</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>f</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <name>nj</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then>   <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>j</name> <operator>=</operator> <name>nj</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if></elseif><elseif>else <if>if<condition>(<expr><name>way</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>ni</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name>li</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>--</operator><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>vis</name> <operator>+=</operator> <name>i</name><operator>-</operator><call><name>max</name><argument_list>(<argument><expr><name>ni</name></expr></argument>,<argument><expr><name>li</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <comment type="line">// if(ni &lt; li)    break;</comment>
            <expr_stmt><expr><name>li</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>li</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>lj</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>lj</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
            <if>if<condition>(<expr><name>f</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>ni</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then>   <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>i</name> <operator>=</operator> <name>ni</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
        <expr_stmt><expr><name>way</name> <operator>=</operator> <operator>(</operator><name>way</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>vis</name><operator>+</operator><literal type="number">1</literal><operator>==</operator><name>all</name></expr> ?</condition><then> <expr><literal type="string">"Yes"</literal></expr> </then><else>: <expr><literal type="string">"No"</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
