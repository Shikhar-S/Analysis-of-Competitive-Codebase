<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29086571_62813630.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>need</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name><name>row</name><index>[<expr><literal type="number">200005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name><name>col</name><index>[<expr><literal type="number">200005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ii</name></type> <name>X</name></decl> , <decl><type ref="prev"/><name>Y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>,<parameter><decl><type><name>char</name></type> <name>dir</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>ok</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">1000000</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr> ;</return></block></then></if>
    <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>dir</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>Y</name><operator>.</operator><name>fr</name></name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>Y</name><operator>.</operator><name>fr</name></name></expr></argument> , <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>Y</name><operator>.</operator><name>sc</name></name> <operator>&lt;</operator> <name>j</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr> ;</return></block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>it</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>tar</name> <init>= <expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>it</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>tar</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>tar</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>tar</name></expr></argument> , <argument><expr><name><name>Y</name><operator>.</operator><name>sc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>tar</name> <operator>==</operator> <name>j</name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name>ok</name></expr>)</condition><then>
            <block>{
                 <return>return <expr><call><name>solve</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then>
            <else>else
                <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr> ;</return></block></else></if>
        }</block></then>
        <else>else
        <block>{

            <return>return <expr><call><name>abs</name><argument_list>(<argument><expr><name>tar</name><operator>-</operator><name>j</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>tar</name></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></then>
    <elseif>else <if>if<condition>(<expr><name>dir</name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>Y</name><operator>.</operator><name>sc</name></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>Y</name><operator>.</operator><name>sc</name></name></expr></argument> , <argument><expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>Y</name><operator>.</operator><name>fr</name></name> <operator>&gt;</operator> <name>j</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr> ;</return></block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>it</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>tar</name> <init>= <expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>it</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>tar</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name>tar</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>tar</name></expr></argument> , <argument><expr><name><name>Y</name><operator>.</operator><name>fr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>tar</name> <operator>==</operator> <name>j</name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name>ok</name></expr>)</condition><then>
            <block>{
                <return>return <expr><call><name>solve</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="char">'U'</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then>
            <else>else
                <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr> ;</return></block></else></if>
        }</block></then>
        <else>else
        <block>{
             <return>return <expr><call><name>abs</name><argument_list>(<argument><expr><name>tar</name><operator>-</operator><name>j</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>tar</name></expr></argument>,<argument><expr><literal type="char">'U'</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></then></if></elseif>
    <elseif>else <if>if<condition>(<expr><name>dir</name> <operator>==</operator> <literal type="char">'D'</literal></expr>)</condition><then>
    <block>{
        <if>if<condition>(<expr><name><name>X</name><operator>.</operator><name>sc</name></name> <operator>&lt;</operator> <name>i</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        <expr_stmt><expr><name><name>X</name><operator>.</operator><name>fr</name></name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>X</name><operator>.</operator><name>fr</name></name></expr></argument> , <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>it</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>col</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>col</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>tar</name> <init>= <expr><name><name>col</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>it</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>tar</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>tar</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>tar</name></expr></argument> , <argument><expr><name><name>X</name><operator>.</operator><name>sc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>tar</name> <operator>==</operator> <name>i</name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name>ok</name></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><call><name>solve</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="char">'L'</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block></then>
            <else>else
                <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr> ;</return></block></else></if>
        }</block></then>
        <else>else
        <block>{
            <return>return <expr><call><name>abs</name><argument_list>(<argument><expr><name>tar</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>solve</name><argument_list>(<argument><expr><name>tar</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="char">'L'</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></then></if></elseif>
    <elseif>else <if>if<condition>(<expr><name>dir</name> <operator>==</operator> <literal type="char">'U'</literal></expr>)</condition><then>
    <block>{
        <if>if<condition>(<expr><name><name>X</name><operator>.</operator><name>fr</name></name> <operator>&gt;</operator> <name>i</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr> ;</return></block></then></if>
        <expr_stmt><expr><name><name>X</name><operator>.</operator><name>sc</name></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>X</name><operator>.</operator><name>sc</name></name></expr></argument> , <argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>Y</name><operator>.</operator><name>fr</name></name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>Y</name><operator>.</operator><name>fr</name></name></expr></argument> , <argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>it</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>col</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>col</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>tar</name> <init>= <expr><name><name>col</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>it</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>tar</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>tar</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>tar</name></expr></argument> , <argument><expr><name><name>X</name><operator>.</operator><name>fr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if<condition>(<expr><name>tar</name> <operator>==</operator> <name>i</name></expr>)</condition><then>
        <block>{
             <if>if<condition>(<expr><name>ok</name></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><call><name>solve</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="char">'R'</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block></then>
            <else>else
                <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr> ;</return></block></else></if>
        }</block></then>
        <else>else
        <block>{
            <return>return <expr><call><name>abs</name><argument_list>(<argument><expr><name>tar</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>solve</name><argument_list>(<argument><expr><name>tar</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="char">'R'</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></then></if></elseif></if>
    <return>return <expr><literal type="number">0</literal></expr> ;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>need</name> <operator>=</operator> <literal type="number">1LL</literal> <operator>*</operator> <name>n</name><operator>*</operator><name>m</name> <operator>-</operator> <name>k</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>need</name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>X</name> <operator>=</operator> <operator>(</operator><call><name>mp</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>Y</name> <operator>=</operator> <operator>(</operator><call><name>mp</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><call><name>solve</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'R'</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>res</name> <operator>==</operator> <name>need</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>
</unit>
