<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29074742_62796147.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>res</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>c</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><empty_stmt>;</empty_stmt></block></while>
	<do>do<block>{
		<expr_stmt><expr><name>res</name><operator>=</operator><operator>(</operator><name>res</name><operator>*</operator><literal type="number">10</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>c</name><operator>^</operator><literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt>
	}</block> while<condition>(<expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition>;</do>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>res</name><index>[<expr><literal type="number">330</literal></expr>]</index><index>[<expr><literal type="number">330</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cmp</name><index>[<expr><literal type="number">330</literal></expr>]</index><index>[<expr><literal type="number">330</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>N</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>F</name><argument_list>(<argument><expr><call><name>int</name><argument_list>(<argument><expr><operator>*</operator> <name>s</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">330</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>x</name></expr></argument>, <argument><expr><name>int</name> <name>y</name></expr></argument>)</argument_list><argument_list>{
	<argument><expr><name>int</name> <name>ans</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>;
	for<argument><expr><operator>(</operator><name>int</name> <name>i</name><operator>=</operator><literal type="number">1</literal>; <name>i</name><operator>&lt;=</operator><name>N</name>; <name>i</name><operator>++</operator><operator>)</operator><block>{
		<for>for<control>(<init><decl><type><name>int</name> <name>j</name>=1</type></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name>N</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><expr_stmt><expr><block>{
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name><name>s</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
		}</block>
	}</expr></expr_stmt></for>
	<return>return <expr><name>ans</name></expr>;</return>
}</block>
<name>int</name> main<operator>(</operator><operator>)</operator> <block>{
	<expr><name>N</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;
	<for>for<control>(<init><decl><type><name>int</name> <name>i</name>=1</type></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><for>for<control>(<init><decl><type><name>int</name> <name>j</name>=1</type></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name>N</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><expr_stmt><expr><block>{
		<if>if<condition>(<expr><name>i</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>res</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>N</name><operator>+</operator><name>N</name><operator>+</operator><literal type="number">1</literal><operator>-</operator><name>j</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name><name>res</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>N</name><operator>+</operator><name>j</name></expr>;</expr_stmt></block></else></if>
	}</block></expr></expr_stmt></for></block></for>
	<comment type="block">/*while(true){
		memcpy(cmp, res, sizeof res);
		for(int t=1; t&lt;1000; t++){
			int i = rand()%N+1, x = rand()%N+1, y = rand()%N+1;
			swap(cmp[x][i], cmp[y][i]);
		}
		int sR=1110, sC=1110;		
		for(int x=1; x&lt;=N; x++)for(int y=1; y&lt;=N; y++){
			sR=min(sR,F(res, x, y));
			sC=min(sC,F(cmp, x, y));
		}
		if(sR!=sC){
			return 0;
		}
	}*/</comment>
	<for>for<control>(<init><decl><type><name>int</name> <name>i</name>=1</type></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><for>for<control>(<init><decl><type><name>int</name> <name>j</name>=1</type></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name>N</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><expr_stmt><expr><block>{
		<expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d%c"</literal></expr></argument>, <argument><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>j</name><operator>==</operator><name>N</name><operator>?</operator><literal type="char">'\n'</literal><operator>:</operator><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;
	}</block></expr></expr_stmt></for></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></expr></argument></argument_list></decl></decl_stmt></unit>
