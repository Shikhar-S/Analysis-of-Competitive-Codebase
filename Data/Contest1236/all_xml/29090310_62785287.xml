<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29090310_62785287.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lb</name></cpp:macro> <cpp:value>lower_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;"["&lt;&lt;#x&lt;&lt;": "&lt;&lt;x&lt;&lt;"]"&lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>p</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=p;i&lt;n;i++)</cpp:value></cpp:define>
<function_decl><type><name>ll</name></type> <name>exp</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
 <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

 	<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"/home/savish/Desktop/2019/io/input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"/home/savish/Desktop/2019/io/output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
    	<decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
    	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>

    	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    	<while>while<condition>(<expr><operator>(</operator><name>a</name><operator>&gt;=</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>b</name><operator>&gt;=</operator><literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>b</name><operator>&gt;=</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&gt;=</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition>
    	<block>{
    		<if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>a</name><operator>&gt;=</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>b</name><operator>&gt;=</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition><then>
    		<block>{
    			<expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="number">3</literal></expr>;</expr_stmt>
    			<expr_stmt><expr><name>c</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    			<expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
    			<continue>continue;</continue>
    		}</block></then></if>
    		<if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>b</name><operator>&gt;=</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&gt;=</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition><then>
    		<block>{
    			<expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="number">3</literal></expr>;</expr_stmt>
    			<expr_stmt><expr><name>b</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    			<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
    			<continue>continue;</continue>
    		}</block></then></if>

    		<if>if<condition>(<expr><name>c</name><operator>-</operator><name>b</name><operator>&gt;=</operator><name>b</name><operator>-</operator><name>a</name></expr>)</condition><then>
    		<block>{
    			<expr_stmt><expr><name>c</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    			<expr_stmt><expr><name>b</name><operator>-=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    			<expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="number">3</literal></expr>;</expr_stmt>
    		}</block></then>
    		<else>else
    		<block>{
    			<expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="number">3</literal></expr>;</expr_stmt>
    			<expr_stmt><expr><name>b</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    			<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
    		}</block></else></if>
    	}</block></while>
    	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></while>
    
    
<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>exp</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
	<block>{
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>ll</name></type> <name>temp</name> <init>=<expr><call><name>exp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>temp</name><operator>=</operator><operator>(</operator><name>temp</name><operator>*</operator><name>temp</name><operator>)</operator><operator>%</operator><name>m</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then>
	<block>{
		<return>return <expr><operator>(</operator><name>temp</name><operator>*</operator><operator>(</operator><name>a</name><operator>%</operator><name>m</name><operator>)</operator><operator>)</operator><operator>%</operator><name>m</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><name>temp</name></expr>;</return>
}</block></function>
</unit>
