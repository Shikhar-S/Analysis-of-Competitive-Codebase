<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29030381_62785477.cpp"><comment type="block">/*   drajingo                 **
**   Harmandeep Singh Kahlon  **
**   IIT (ISM) Dhanbad        */</comment>

<comment type="block">/* Slow and steady passes system testing : ) */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(), (x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>loop</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i64 i=0; i&lt;(n); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>loop1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i64 i=1; i&lt;=(n); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rloop</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i64 i=(n)-1; i&gt;=0; --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rloop1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i64 i=(n); i&gt;0; --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>loopit</name><parameter_list>(<parameter><type><name>it</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(__typeof(a.begin()) it = a.begin(); it != a.end(); ++it)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xx</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>std::make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rtn</name></cpp:macro> <cpp:value>return</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Max</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)&gt;(y)?(x):(y))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Min</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)&lt;(y)?(x):(y))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(cerr &lt;&lt; #x &lt;&lt; ": " &lt;&lt; x &lt;&lt; "\n")</cpp:value></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pc</name></cpp:macro> <cpp:value>putchar</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gc</name></cpp:macro> <cpp:value>getchar</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pc</name></cpp:macro> <cpp:value>putchar_unlocked</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gc</name></cpp:macro> <cpp:value>getchar_unlocked</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RT</name></cpp:macro> <cpp:value>fprintf(stderr, "\nTIME = %lf\n", 1.0 * clock()/CLOCKS_PER_SEC)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>INF</name> <init>= <expr><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">45LL</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>MAXLL</name> <init>= <expr><literal type="number">9223372036854775807LL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>MAXULL</name> <init>= <expr><literal type="number">18446744073709551615LLU</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>double</name></type> <name>DELTA</name> <init>= <expr><literal type="number">0.000000001L</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>i64</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ui64</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>i64</name></expr></argument>, <argument><expr><name>i64</name></expr></argument>&gt;</argument_list></name></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>i64</name></expr></argument>&gt;</argument_list></name></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>i64</name></expr></argument>&gt;</argument_list></name></name></expr></argument> &gt;</argument_list></name></name></type> <name>matrix</name>;</typedef>

<function><specifier>inline</specifier> <type><name>i64</name></type> <name>fmm</name><parameter_list>(<parameter><decl><type><name>i64</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>i64</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>i64</name></type> <name>m</name><init>=<expr><name>MOD</name></expr></init></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>i64</name></type> <name>r</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>a</name><operator>%=</operator><name>m</name></expr>;</expr_stmt><expr_stmt><expr><name>b</name><operator>%=</operator><name>m</name></expr>;</expr_stmt><while>while<condition>(<expr><name>b</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{<if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>r</name><operator>+=</operator><name>a</name></expr>;</expr_stmt><expr_stmt><expr><name>r</name><operator>%=</operator><name>m</name></expr>;</expr_stmt>}</block></then></if><expr_stmt><expr><name>a</name><operator>+=</operator><name>a</name></expr>;</expr_stmt><expr_stmt><expr><name>a</name><operator>%=</operator><name>m</name></expr>;</expr_stmt><expr_stmt><expr><name>b</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>}</block></while><expr_stmt><expr><name>rtn</name> <name>r</name><operator>%</operator><name>m</name></expr>;</expr_stmt>}</block></function>
<function><specifier>inline</specifier> <type><name>i64</name></type> <name>fme</name><parameter_list>(<parameter><decl><type><name>i64</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>i64</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>i64</name></type> <name>m</name><init>=<expr><name>MOD</name></expr></init></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>i64</name></type> <name>r</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>a</name><operator>%=</operator><name>m</name></expr>;</expr_stmt><while>while<condition>(<expr><name>b</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{<if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>r</name><operator>*=</operator><name>a</name></expr>;</expr_stmt><expr_stmt><expr><name>r</name><operator>%=</operator><name>m</name></expr>;</expr_stmt>}</block></then></if><expr_stmt><expr><name>a</name><operator>*=</operator><name>a</name></expr>;</expr_stmt><expr_stmt><expr><name>a</name><operator>%=</operator><name>m</name></expr>;</expr_stmt><expr_stmt><expr><name>b</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>}</block></while><return>return <expr><name>r</name><operator>%</operator><name>m</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>i64</name></type> <name>sfme</name><parameter_list>(<parameter><decl><type><name>i64</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>i64</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>i64</name></type> <name>m</name><init>=<expr><name>MOD</name></expr></init></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>i64</name></type> <name>r</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>a</name><operator>%=</operator><name>m</name></expr>;</expr_stmt><while>while<condition>(<expr><name>b</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{<if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>r</name><operator>=</operator><call><name>fmm</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>a</name><operator>=</operator><call><name>fmm</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>b</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>}</block></while><expr_stmt><expr><name>rtn</name> <name>r</name><operator>%</operator><name>m</name></expr>;</expr_stmt>}</block></function>
<decl_stmt><decl><type><name>vi</name></type> <name>primes</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>i64</name></type> <name>primsiz</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>vi</name></type> <name>fact</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>vi</name></type> <name>invfact</name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>sieve</name><parameter_list>(<parameter><decl><type><name>i64</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>i64</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt><decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></name></type> <name>a</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt><expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt><expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt><for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init><condition><expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
	<if>if<condition>(<expr><operator>!</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{<for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>*</operator><name>i</name></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>+=</operator><name>i</name></expr></incr>)</control><block>{<expr_stmt><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>}</block></for>}</block></then></if>}</block></for><for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name><name>primes</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for><expr_stmt><expr><name>primsiz</name><operator>=</operator><call><name><name>primes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>sieve</name><parameter_list>()</parameter_list> <block>{<decl_stmt><decl><type><name>i64</name></type> <name>n</name><init>=<expr><literal type="number">1010000</literal></expr></init></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></name></type> <name>a</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt><expr_stmt><expr><call><name><name>primes</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">79252</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init><condition><expr><operator>(</operator><name>j</name><operator>=</operator><operator>(</operator><name>i</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt></block></for><for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">3</literal></expr>;</init><condition><expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<if>if<condition>(<expr><operator>!</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{<expr_stmt><expr><name>k</name><operator>=</operator><operator>(</operator><name>i</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt><for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>*</operator><name>i</name></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>+=</operator><name>k</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt></block></for>}</block></then></if>}</block></for>
	<expr_stmt><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>primes</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if></block></for><expr_stmt><expr><name>primsiz</name><operator>=</operator><name>k</name></expr>;</expr_stmt>}</block></function>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>isPrimeSmall</name><parameter_list>(<parameter><decl><type><name>ui64</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><operator>(</operator><operator>(</operator><operator>!</operator><operator>(</operator><name>n</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>&amp;&amp;</operator> <name>n</name><operator>!=</operator><literal type="number">2</literal><operator>)</operator><operator>||</operator><operator>(</operator><name>n</name><operator>&lt;</operator><literal type="number">2</literal><operator>)</operator><operator>||</operator><operator>(</operator><name>n</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name><operator>!=</operator><literal type="number">3</literal><operator>)</operator></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
	<for>for<control>(<init><decl><type><name>ui64</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><literal type="number">36</literal><operator>*</operator><name>k</name><operator>*</operator><name>k</name><operator>-</operator><literal type="number">12</literal><operator>*</operator><name>k</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>k</name></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><operator>(</operator><name>n</name><operator>%</operator><operator>(</operator><literal type="number">6</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal><operator>)</operator><operator>||</operator><operator>(</operator><name>n</name><operator>%</operator><operator>(</operator><literal type="number">6</literal><operator>*</operator><name>k</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></block></for><return>return <expr><literal type="boolean">true</literal></expr>;</return>}</block></function>
<function><type><name>bool</name></type> <name>_p</name><parameter_list>(<parameter><decl><type><name>ui64</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ui64</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>ui64</name></type> <name>t</name></decl>,<decl><type ref="prev"/><name>u</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>u</name><operator>=</operator><name>n</name><operator>/</operator><literal type="number">2</literal></expr><operator>,</operator><expr><name>t</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><while>while<condition>(<expr><operator>!</operator><operator>(</operator><name>u</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block>{<expr_stmt><expr><name>u</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt><expr_stmt><expr><operator>++</operator><name>t</name></expr>;</expr_stmt>}</block></while><expr_stmt><expr><name>p</name><operator>=</operator><call><name>fme</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>u</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>t</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<expr_stmt><expr><name>c</name><operator>=</operator><operator>(</operator><name>p</name><operator>*</operator><name>p</name><operator>)</operator><operator>%</operator><name>n</name></expr>;</expr_stmt><if>if<condition>(<expr><operator>(</operator><name>c</name><operator>==</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name>p</name><operator>!=</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name>p</name><operator>!=</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>rtn</name> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>p</name><operator>=</operator><name>c</name></expr>;</expr_stmt>}</block></for><if>if<condition>(<expr><name>c</name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>rtn</name> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>rtn</name> <literal type="number">0</literal></expr>;</expr_stmt>}</block></function>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>isPrime</name><parameter_list>(<parameter><decl><type><name>ui64</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><operator>(</operator><operator>(</operator><operator>!</operator><operator>(</operator><name>n</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>&amp;&amp;</operator><name>n</name><operator>!=</operator><literal type="number">2</literal><operator>)</operator><operator>||</operator><operator>(</operator><name>n</name><operator>&lt;</operator><literal type="number">2</literal><operator>)</operator><operator>||</operator><operator>(</operator><name>n</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>n</name><operator>!=</operator><literal type="number">3</literal><operator>)</operator></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>rtn</name> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if><if>if<condition>(<expr><name>n</name><operator>&lt;</operator><literal type="number">1373653</literal></expr>)</condition><then><block>{
	<for>for<control>(<init><decl><type><name>ui64</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">36</literal><operator>*</operator><name>k</name><operator>*</operator><name>k</name><operator>)</operator><operator>-</operator><operator>(</operator><literal type="number">12</literal><operator>*</operator><name>k</name><operator>)</operator><operator>)</operator><operator>&lt;</operator><name>n</name><operator>)</operator></expr>;</condition><incr><expr><operator>++</operator><name>k</name></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><operator>(</operator><name>n</name><operator>%</operator><operator>(</operator><literal type="number">6</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal><operator>)</operator><operator>||</operator><operator>(</operator><name>n</name><operator>%</operator><operator>(</operator><literal type="number">6</literal><operator>*</operator><name>k</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>rtn</name> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if></block></for><expr_stmt><expr><name>rtn</name> <literal type="number">1</literal></expr>;</expr_stmt>}</block></then></if><if>if<condition>(<expr><name>n</name><operator>&lt;</operator><literal type="number">9080191</literal></expr>)</condition><then><block>{
	<if>if<condition>(<expr><call><name>_p</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>||</operator><call><name>_p</name><argument_list>(<argument><expr><literal type="number">73</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>rtn</name> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>rtn</name> <literal type="number">1</literal></expr>;</expr_stmt>}</block></then></if><if>if<condition>(<expr><call><name>_p</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>||</operator><call><name>_p</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>||</operator><call><name>_p</name><argument_list>(<argument><expr><literal type="number">61</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>rtn</name> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>rtn</name> <literal type="number">1</literal></expr>;</expr_stmt>}</block></function>
<function><type><name>ui64</name></type> <name>nCk</name><parameter_list>(<parameter><decl><type><name>i64</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>i64</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>ui64</name></type> <name>m</name><init>=<expr><name>MOD</name></expr></init></decl></parameter>)</parameter_list> <block>{<if>if<condition>(<expr><name><name>k</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal><operator>||</operator><name>k</name></expr></argument>&gt;</argument_list></name><name>n</name><operator>||</operator><name>n</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>rtn</name> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if><if>if<condition>(<expr><name>k</name><operator>==</operator><literal type="number">0</literal><operator>||</operator><name>k</name><operator>==</operator><name>n</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>rtn</name> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if><if>if<condition>(<expr><call><name><name>fact</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&gt;=</operator><operator>(</operator><name>ui64</name><operator>)</operator><name>n</name><operator>&amp;&amp;</operator><call><name>isPrime</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
<expr_stmt><expr><call><name>rtn</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>fact</name><index>[<expr><name>n</name></expr>]</index></name><operator>*</operator><name><name>invfact</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>m</name><operator>)</operator><operator>*</operator><name><name>invfact</name><index>[<expr><name>n</name><operator>-</operator><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>%</operator><name>m</name></expr>;</expr_stmt>}</block></then></if><decl_stmt><decl><type><name>ui64</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>a</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>k</name><operator>=</operator><call><name>Min</name><argument_list>(<argument><expr><name>k</name></expr></argument>,<argument><expr><name>n</name><operator>-</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><for>for<control>(<init>;</init><condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>ui64</name><operator>)</operator><name>k</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<expr_stmt><expr><name>a</name><operator>=</operator><operator>(</operator><name>a</name><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>i</name><operator>)</operator><operator>)</operator><operator>%</operator><name>m</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>j</name><operator>&lt;</operator><operator>(</operator><name>ui64</name><operator>)</operator><name>k</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>a</name><operator>%</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition><block>{<expr_stmt><expr><name>a</name><operator>=</operator><name>a</name><operator>/</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt><expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>}</block></while>}</block></for><while>while<condition>(<expr><name>j</name><operator>&lt;</operator><operator>(</operator><name>ui64</name><operator>)</operator><name>k</name></expr>)</condition><block>{<expr_stmt><expr><name>a</name><operator>=</operator><name>a</name><operator>/</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt><expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>}</block></while><return>return <expr><name>a</name><operator>%</operator><name>m</name></expr>;</return>}</block></function>
<function><type><name>void</name></type> <name>nCkInit</name><parameter_list>(<parameter><decl><type><name>ui64</name></type> <name>m</name><init>=<expr><name>MOD</name></expr></init></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>i64</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>mx</name><init>=<expr><literal type="number">1010000</literal></expr></init></decl>;</decl_stmt><expr_stmt><expr><call><name><name>fact</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>mx</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>invfact</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>mx</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>fact</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>mx</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
<expr_stmt><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>i</name><operator>*</operator><name><name>fact</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>m</name></expr>;</expr_stmt>}</block></for><expr_stmt><expr><name><name>invfact</name><index>[<expr><name>mx</name></expr>]</index></name><operator>=</operator><call><name>fme</name><argument_list>(<argument><expr><name><name>fact</name><index>[<expr><name>mx</name></expr>]</index></name></expr></argument>,<argument><expr><name>m</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><for>for<control>(<init><expr><name>i</name><operator>=</operator><name>mx</name><operator>-</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block>{<expr_stmt><expr><name><name>invfact</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>invfact</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>%</operator><name>m</name></expr>;</expr_stmt>}</block></for>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if><return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><type><name>void</name></type> <name>extGCD</name><parameter_list>(<parameter><decl><type><name>i64</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>i64</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>i64</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>i64</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{<if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><expr_stmt><expr><name>rtn</name></expr>;</expr_stmt>}</block></then></if><decl_stmt><decl><type><name>i64</name></type> <name>x1</name></decl>,<decl><type ref="prev"/><name>y1</name></decl>;</decl_stmt><expr_stmt><expr><call><name>extGCD</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>,<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>x</name><operator>=</operator><name>y1</name></expr>;</expr_stmt><expr_stmt><expr><name>y</name><operator>=</operator><name>x1</name><operator>-</operator><operator>(</operator><name>a</name><operator>/</operator><name>b</name><operator>)</operator><operator>*</operator><name>y1</name></expr>;</expr_stmt>}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>i64</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>gc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>n</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><while>while<condition>(<expr><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>c</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><block>{<expr_stmt><expr><name>c</name><operator>=</operator><call><name>gc</name><argument_list>()</argument_list></call></expr>;</expr_stmt><if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>n</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>}</block></while>
	<while>while<condition>(<expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block>{<expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt><expr_stmt><expr><name>c</name><operator>=</operator><call><name>gc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while><if>if<condition>(<expr><name>n</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>gc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>c</name><operator>!=</operator><literal type="char">'\n'</literal><operator>&amp;&amp;</operator><name>c</name><operator>!=</operator><literal type="char">'\0'</literal><operator>&amp;&amp;</operator><name>c</name><operator>!=</operator><literal type="char">' '</literal><operator>&amp;&amp;</operator><name>c</name><operator>!=</operator><literal type="char">'\r'</literal><operator>&amp;&amp;</operator><name>c</name><operator>!=</operator><name>EOF</name></expr>)</condition><block>{<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name><operator>=</operator><name>c</name></expr>;</expr_stmt><expr_stmt><expr><name>c</name><operator>=</operator><call><name>gc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while><expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt><return>return <expr><name>i</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>i64</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><operator>(</operator><ternary><condition><expr><name>a</name><operator>&lt;</operator><literal type="number">0</literal></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt><if>if<condition>(<expr><name>n</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>a</name><operator>=</operator><operator>-</operator><name>a</name></expr>;</expr_stmt></block></then></if><decl_stmt><decl><type><name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt><decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><do>do<block>{<expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name><operator>=</operator><name>a</name><operator>%</operator><literal type="number">10</literal><operator>+</operator><literal type="char">'0'</literal></expr>;</expr_stmt><expr_stmt><expr><name>a</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt>}</block>while<condition>(<expr><name>a</name></expr>)</condition>;</do>
	<if>if<condition>(<expr><name>n</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>pc</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt><while>while<condition>(<expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name>pc</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>i</name><operator>--</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while><expr_stmt><expr><call><name>pc</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>putln</name><parameter_list>(<parameter><decl><type><name>i64</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><operator>(</operator><ternary><condition><expr><name>a</name><operator>&lt;</operator><literal type="number">0</literal></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt><if>if<condition>(<expr><name>n</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>a</name><operator>=</operator><operator>-</operator><name>a</name></expr>;</expr_stmt></block></then></if><decl_stmt><decl><type><name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt><decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><do>do<block>{<expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name><operator>=</operator><name>a</name><operator>%</operator><literal type="number">10</literal><operator>+</operator><literal type="char">'0'</literal></expr>;</expr_stmt><expr_stmt><expr><name>a</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt>}</block>while<condition>(<expr><name>a</name></expr>)</condition>;</do>
	<if>if<condition>(<expr><name>n</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>pc</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt><while>while<condition>(<expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name>pc</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>i</name><operator>--</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while><expr_stmt><expr><call><name>pc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<decl_stmt><decl><type><name>mt19937</name></type> <name>rng</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>K</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<function><type><name>matrix</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>matrix</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>matrix</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ui64</name></type> <name>m</name><init>=<expr><name>MOD</name></expr></init></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>matrix</name></type> <name>c</name><argument_list>(<argument><expr><name>K</name></expr></argument>,<argument><expr><call><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>i64</name></expr></argument>&gt;</argument_list></name></name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt><macro><name>loop</name><argument_list>(<argument>ii</argument>,<argument>K</argument>)</argument_list></macro><macro><name>loop</name><argument_list>(<argument>jj</argument>,<argument>K</argument>)</argument_list></macro><macro><name>loop</name><argument_list>(<argument>kk</argument>,<argument>K</argument>)</argument_list></macro><expr_stmt><expr><name><name>c</name><index>[<expr><name>ii</name></expr>]</index><index>[<expr><name>jj</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>c</name><index>[<expr><name>ii</name></expr>]</index><index>[<expr><name>jj</name></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>ii</name></expr>]</index><index>[<expr><name>kk</name></expr>]</index></name><operator>*</operator><name><name>b</name><index>[<expr><name>kk</name></expr>]</index><index>[<expr><name>jj</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>m</name></expr>;</expr_stmt><decl_stmt><decl><type><name>rtn</name></type> <name>c</name></decl>;</decl_stmt>}</block></function>
<function><type><name>matrix</name></type> <name>fme</name><parameter_list>(<parameter><decl><type><name>matrix</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ui64</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>ui64</name></type> <name>m</name><init>=<expr><name>MOD</name></expr></init></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><decl_stmt><decl><type><name>rtn</name></type> <name>a</name></decl>;</decl_stmt></block></then></if><if>if<condition>(<expr><name>n</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><decl_stmt><decl><type><name>rtn</name></type> <name>mul</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><call><name>fme</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></decl>;</decl_stmt></block></then></if><decl_stmt><decl><type><name>matrix</name></type> <name>x</name><init>=<expr><call><name>fme</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>rtn</name></type> <name>mul</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></decl>;</decl_stmt>}</block></function>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</comment>

<decl_stmt><decl><type><specifier>const</specifier> <name>i64</name></type> <name>N</name><init>=<expr><literal type="number">100100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>i64</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>i64</name></type> <name>t</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>m</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxx</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>minn</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>curr</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>num</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>siz</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n3</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n4</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ind</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>i64</name></type> <name>root</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>diff</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>q</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>choice</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>d</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>begg</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>endd</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pos</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>lo</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>hi</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mid</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>s3</name></decl>, <decl><type ref="prev"/><name>str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>ch1</name></decl>, <decl><type ref="prev"/><name>ch2</name></decl>, <decl><type ref="prev"/><name>ch3</name></decl>, <modifier>*</modifier><decl><type ref="prev"/><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>dub</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////////////////////////////////////</comment>

	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n1</name> <operator>&gt;&gt;</operator> <name>n2</name> <operator>&gt;&gt;</operator> <name>n3</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <macro><name>loop</name><argument_list>(<argument>i</argument>, <argument>n1+<literal type="number">1</literal></argument>)</argument_list></macro> <block>{
            <comment type="line">// take i from 1st</comment>
            <if>if<condition>(<expr><literal type="number">2</literal><operator>*</operator><name>i</name> <operator>&gt;</operator> <name>n2</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>k</name> <operator>=</operator> <name>n2</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>curr</name> <operator>=</operator> <literal type="number">3</literal><operator>*</operator><name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>curr</name> <operator>+=</operator> <literal type="number">3</literal><operator>*</operator><call><name>min</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>n3</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//cout &lt;&lt; curr &lt;&lt; '\n';</comment>
            <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	}</block></while>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
