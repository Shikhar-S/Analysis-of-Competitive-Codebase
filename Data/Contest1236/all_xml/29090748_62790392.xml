<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29090748_62790392.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ii</name></cpp:macro> <cpp:value>pair &lt; int , int &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LS</name></cpp:macro> <cpp:value>pair &lt; ll , string &gt;</cpp:value></cpp:define>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>uint</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ldbl</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>dbl</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>ldbl</name></type> <name>E</name> <init>= <expr><literal type="number">2.71828182845904523536</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ldbl</name></type> <name>pi</name> <init>= <expr><literal type="number">3.141592653589793238462643383279502884197</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dbl</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name> <init>= <expr><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">30</literal></expr></init></decl>;</decl_stmt>

<comment type="line" format="doxygen">///scanf("%d %d",&amp;n,&amp;m);</comment>
<comment type="line" format="doxygen">///printf("%d %d",n,m);</comment>
<comment type="line" format="doxygen">///printf("-1 -1");</comment>


<comment type="block" format="doxygen">/** /////////// ** Code ** /////////// **/</comment>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>memo</name> <index>[<expr><literal type="number">200</literal></expr>]</index><index>[<expr><literal type="number">200</literal></expr>]</index><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>dp</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{
    <comment type="line">//if (x&lt;1 &amp;&amp; y &lt;2) return 0;</comment>
    <comment type="line">//if (y&lt;1 &amp;&amp; z &lt;2) return 0;</comment>

    <decl_stmt><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>ret</name> <init>= <expr><name><name>memo</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>z</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>ret</name></expr>;</return></block></then></if>

    <decl_stmt><decl><type><name>ll</name></type> <name>path1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>path2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>x</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>path1</name> <operator>=</operator> <literal type="number">3</literal> <operator>+</operator> <call><name>dp</name> <argument_list>(<argument><expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><name>y</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>z</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>path2</name> <operator>=</operator> <literal type="number">3</literal> <operator>+</operator> <call><name>dp</name> <argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>z</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <return>return <expr><name>ret</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>path1</name></expr></argument>,<argument><expr><name>path2</name></expr></argument>)</argument_list></call></expr>;</return>

}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>memo</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>memo</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>dp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
