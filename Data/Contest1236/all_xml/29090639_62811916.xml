<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29090639_62811916.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>va</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vb</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MN</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>,<decl><type ref="prev"/><name>M</name></decl>,<decl><type ref="prev"/><name>K</name></decl>,<decl><type ref="prev"/><name>dir</name></decl>,<decl><type ref="prev"/><name>xpos</name></decl>,<decl><type ref="prev"/><name>ypos</name></decl>,<decl><type ref="prev"/><name>cnt</name></decl>,<decl><type ref="prev"/><name>x1</name></decl>,<decl><type ref="prev"/><name>x2</name></decl>,<decl><type ref="prev"/><name>y1</name></decl>,<decl><type ref="prev"/><name>y2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>X</name><index>[<expr><name>MN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>Y</name><index>[<expr><name>MN</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name> <operator>&gt;&gt;</operator> <name>M</name> <operator>&gt;&gt;</operator> <name>K</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>K</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>X</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>Y</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <comment type="line">//X[i].push_back(0);</comment>
        <comment type="line">//X[i].push_back(M+1);</comment>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>M</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <comment type="line">//Y[i].push_back(0);</comment>
        <comment type="line">//Y[i].push_back(N+1);</comment>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>ch</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>sum</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>xpos</name> <operator>=</operator> <name>ypos</name> <operator>=</operator> <name>dir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>x2</name> <operator>=</operator> <name>N</name><operator>+</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>y1</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>y2</name> <operator>=</operator> <name>M</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>ch</name><operator>&lt;</operator><literal type="number">1</literal></expr>)</condition><block>{
        <comment type="line">//cout &lt;&lt; xpos &lt;&lt; ' ' &lt;&lt; ypos &lt;&lt; '\n';</comment>
        <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>lower_bound</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>xpos</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>X</name><index>[<expr><name>xpos</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>ypos</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>X</name><index>[<expr><name>xpos</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>cnt</name><operator>==</operator><name><name>X</name><index>[<expr><name>xpos</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>y2</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>xpos</name></expr>]</index><index>[<expr><name>cnt</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y2</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            <comment type="line">//cout &lt;&lt; cnt &lt;&lt; tmp;</comment>
            <if>if<condition>(<expr><name>tmp</name><operator>==</operator><name>ypos</name></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>xpos</name><operator>!=</operator><literal type="number">1</literal><operator>||</operator><name>ypos</name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ch</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            }</block></then></if>
            <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>tmp</name><operator>-</operator><name>ypos</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ypos</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>x1</name> <operator>=</operator> <name>xpos</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>lower_bound</name><argument_list>(<argument><expr><name><name>Y</name><index>[<expr><name>ypos</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>Y</name><index>[<expr><name>ypos</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>xpos</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>Y</name><index>[<expr><name>ypos</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>cnt</name><operator>==</operator><name><name>Y</name><index>[<expr><name>ypos</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>x2</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>Y</name><index>[<expr><name>ypos</name></expr>]</index><index>[<expr><name>cnt</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>x2</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            <if>if<condition>(<expr><name>tmp</name><operator>==</operator><name>xpos</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ch</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>tmp</name><operator>-</operator><name>xpos</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xpos</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>y2</name> <operator>=</operator> <name>ypos</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>lower_bound</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>xpos</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>X</name><index>[<expr><name>xpos</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>ypos</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>X</name><index>[<expr><name>xpos</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>cnt</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>y1</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>xpos</name></expr>]</index><index>[<expr><name>cnt</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y1</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            <if>if<condition>(<expr><name>tmp</name><operator>==</operator><name>ypos</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ch</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>ypos</name><operator>-</operator><name>tmp</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ypos</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>x2</name> <operator>=</operator> <name>xpos</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>lower_bound</name><argument_list>(<argument><expr><name><name>Y</name><index>[<expr><name>ypos</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>Y</name><index>[<expr><name>ypos</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>xpos</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>Y</name><index>[<expr><name>ypos</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>cnt</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>x1</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>Y</name><index>[<expr><name>ypos</name></expr>]</index><index>[<expr><name>cnt</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>x1</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            <if>if<condition>(<expr><name>tmp</name><operator>==</operator><name>xpos</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ch</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>xpos</name><operator>-</operator><name>tmp</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xpos</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>y1</name> <operator>=</operator> <name>ypos</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>dir</name> <operator>=</operator> <name>dir</name><operator>%</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <comment type="line">//cout &lt;&lt; sum;</comment>
    <if>if<condition>(<expr><name>sum</name><operator>+</operator><name>K</name><operator>==</operator><operator>(</operator><name>ll</name><operator>)</operator><name>N</name><operator>*</operator><name>M</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr>;</expr_stmt></block></else></if>
}</block></function>
</unit>
