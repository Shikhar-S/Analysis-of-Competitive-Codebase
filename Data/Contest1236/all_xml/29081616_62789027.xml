<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29081616_62789027.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>fp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>y</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>tem</name> <init>= <expr><call><name>fp</name><argument_list>(<argument><expr><name>x</name></expr></argument> , <argument><expr><name>y</name> <operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>%</operator><name>mod</name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>y</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1LL</literal><operator>*</operator><name>tem</name><operator>*</operator><name>tem</name><operator>%</operator><name>mod</name><operator>*</operator><name>x</name><operator>%</operator><name>mod</name></expr>;</return></block></then>
    <else>else
        <block type="pseudo"><return>return <expr><literal type="number">1LL</literal><operator>*</operator><name>tem</name><operator>*</operator><name>tem</name><operator>%</operator><name>mod</name></expr>;</return></block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> , <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>fp</name><argument_list>( <argument><expr><operator>(</operator><call><name>fp</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument> , <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
