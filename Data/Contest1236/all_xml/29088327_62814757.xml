<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29088327_62814757.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<using>using <name>ll</name><init>=<type><name>long</name> <name>long</name></type></init>;</using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>X</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>Y</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>dx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dy</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>gg</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>wp</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>ck</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>st</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>,<expr><name>y</name></expr>}</block></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>st</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>gg</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
}</block></function>


<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>K</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>K</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_</name> <operator>&lt;</operator> <name>K</name></expr>;</condition> <incr><expr><name>_</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>X</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>emplace_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>Y</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>emplace_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>Y</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Y</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>xl</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>xr</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>yl</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>yr</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>K</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>xl</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>X</name><index>[<expr><name>xl</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>yl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><ternary><condition><expr><name>it</name><operator>==</operator><name><name>X</name><index>[<expr><name>xl</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>?</condition><then><expr><name>yr</name></expr></then><else>: <expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>yr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>yr</name> <operator>&gt;</operator> <name>y</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>sq</name> <init>= <expr><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name>xr</name><operator>-</operator><name>xl</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>yr</name><operator>-</operator><name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>sq</name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>gg</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>xl</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>xr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>yr</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
                    <expr_stmt><expr><call><name>ck</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></for>
            <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>sq</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>yr</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt> <expr_stmt><expr><name>xl</name><operator>++</operator></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>wp</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        
        <expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>lower_bound</name><argument_list>(<argument><expr><name><name>Y</name><index>[<expr><name>yr</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Y</name><index>[<expr><name>yr</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>xl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><ternary><condition><expr><name>it</name><operator>==</operator><name><name>Y</name><index>[<expr><name>yr</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>?</condition><then><expr><name>xr</name></expr></then><else>: <expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>xr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>xr</name> <operator>&gt;</operator> <name>x</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>sq</name> <init>= <expr><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name>yr</name><operator>-</operator><name>yl</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>xr</name><operator>-</operator><name>x</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>sq</name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>gg</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>xr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>yl</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>yr</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
                    <expr_stmt><expr><call><name>ck</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></for>
            <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>sq</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>xr</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt> <expr_stmt><expr><name>yr</name><operator>--</operator></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>wp</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>xr</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>X</name><index>[<expr><name>xr</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>yr</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>X</name><index>[<expr><name>xr</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <ternary><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">0</literal></expr>?</condition><then><expr><name>yl</name></expr></then><else>:<expr><name><name>X</name><index>[<expr><name>xr</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>yl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name>yl</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>sq</name> <init>= <expr><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name>xr</name><operator>-</operator><name>xl</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>y</name><operator>-</operator><name>yl</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>sq</name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>gg</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>xl</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>xr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>yl</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>y</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
                    <expr_stmt><expr><call><name>ck</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></for>
            <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>sq</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>yl</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt> <expr_stmt><expr><name>xr</name><operator>--</operator></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>wp</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>Y</name><index>[<expr><name>yl</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Y</name><index>[<expr><name>yl</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>xr</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>Y</name><index>[<expr><name>yl</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <ternary><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">0</literal></expr>?</condition><then><expr><name>xl</name></expr></then><else>:<expr><name><name>Y</name><index>[<expr><name>yl</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>xl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>xl</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>sq</name> <init>= <expr><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name>yr</name><operator>-</operator><name>yl</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>x</name><operator>-</operator><name>xl</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>sq</name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>gg</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>xl</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>x</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>yl</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>yr</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
                    <expr_stmt><expr><call><name>ck</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></for>
            <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>sq</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>xl</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt> <expr_stmt><expr><name>yl</name><operator>++</operator></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>wp</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></while>
    <expr_stmt><expr><call><name>wp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>
</unit>
