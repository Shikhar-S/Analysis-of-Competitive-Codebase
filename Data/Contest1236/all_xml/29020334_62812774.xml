<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29020334_62812774.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>row</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>col</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>upper_row</name></decl>, <decl><type ref="prev"/><name>lower_row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>upper_col</name></decl>, <decl><type ref="prev"/><name>lower_col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>row_for</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>it</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>newX</name> <init>= <expr><name>x</name></expr></init></decl>, <decl><type ref="prev"/><name>newY</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>it</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>upper_col</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>newX</name><operator>-</operator><name>x</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name>newY</name><operator>-</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>upper_row</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
    <return>return <expr><call><name>make_pair</name><argument_list>(<argument><expr><name>newX</name></expr></argument>, <argument><expr><name>newY</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>row_back</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>it</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>newX</name> <init>= <expr><name>x</name></expr></init></decl>, <decl><type ref="prev"/><name>newY</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>it</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>lower_col</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>newX</name><operator>-</operator><name>x</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name>newY</name><operator>-</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lower_row</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
    <return>return <expr><call><name>make_pair</name><argument_list>(<argument><expr><name>newX</name></expr></argument>, <argument><expr><name>newY</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>col_for</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>it</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>newX</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>it</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>lower_row</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>newY</name> <init>= <expr><name>y</name></expr></init></decl>;</decl_stmt>
    <comment type="line">//cout &lt;&lt; col[y][it] &lt;&lt; endl;</comment>
    <comment type="line">//cout &lt;&lt; "HIGH" &lt;&lt; col[y][it]-1 &lt;&lt; " " &lt;&lt; lower_row-1 &lt;&lt; endl;</comment>
    <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>newX</name><operator>-</operator><name>x</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name>newY</name><operator>-</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>upper_col</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
    <return>return <expr><call><name>make_pair</name><argument_list>(<argument><expr><name>newX</name></expr></argument>, <argument><expr><name>newY</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>col_back</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>it</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>newX</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>it</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>upper_row</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>newY</name> <init>= <expr><name>y</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>newX</name><operator>-</operator><name>x</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name>newY</name><operator>-</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lower_col</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
    <return>return <expr><call><name>make_pair</name><argument_list>(<argument><expr><name>newX</name></expr></argument>, <argument><expr><name>newY</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//freopen("in.txt", "r", stdin);</comment>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>upper_row</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>lower_row</name> <operator>=</operator> <name>n</name><operator>+</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>lower_col</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>upper_col</name> <operator>=</operator> <name>m</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>x1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>y1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>P</name> <init>= <expr><call><name>row_for</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <name><name>P</name><operator>.</operator><name>first</name></name></expr><operator>,</operator> <expr><name>y1</name> <operator>=</operator> <name><name>P</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>hi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition><block>{
        <comment type="line">//cout &lt;&lt; x1 &lt;&lt; " " &lt;&lt; y1 &lt;&lt; endl;</comment>
        <expr_stmt><expr><name>type</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>type</name> <operator>=</operator> <name>type</name><operator>%</operator><literal type="number">4</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>P</name></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>P</name> <operator>=</operator> <call><name>row_for</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <elseif>else <if>if<condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>P</name> <operator>=</operator> <call><name>col_for</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>P</name> <operator>=</operator> <call><name>row_back</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <else>else <block type="pseudo"><expr_stmt><expr><name>P</name> <operator>=</operator> <call><name>col_back</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        <decl_stmt><decl><type><name>int</name></type> <name>x2</name> <init>= <expr><name><name>P</name><operator>.</operator><name>first</name></name></expr></init></decl>, <decl><type ref="prev"/><name>y2</name> <init>= <expr><name><name>P</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>x2</name> <operator>==</operator> <name>x1</name> <operator>&amp;&amp;</operator> <name>y2</name> <operator>==</operator> <name>y1</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then>
        <else>else <block>{
            <expr_stmt><expr><name>x1</name> <operator>=</operator> <name>x2</name></expr><operator>,</operator> <expr><name>y1</name> <operator>=</operator> <name>y2</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <if>if<condition>(<expr><name>cnt</name> <operator>+</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>n</name><operator>*</operator><name>m</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr>;</expr_stmt></block></else></if>
}</block></function></unit>
