<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29089875_62811211.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pri</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>void</name></type> <name>masterstroke</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>ll</name></type> <name>count</name><init>=<expr><name>n</name><operator>*</operator><name>m</name><operator>-</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>left</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>right</name><init>=<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>top</name><init>=<expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>bottom</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>row</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>col</name><index>[<expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>


	
	<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	<comment type="line">//	cout&lt;&lt;x&lt;&lt;y&lt;&lt;endl;</comment>
		
	}</block></for>
	<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<expr_stmt><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></for>
		<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></for>
	<comment type="line">//	for(auto x:col[2])cout&lt;&lt;x&lt;&lt;endl;</comment>
	<decl_stmt><decl><type><name>ll</name></type> <name>dir</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>curx</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>cury</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>ch</name></decl>;</decl_stmt>
	
	<while>while<condition>(<expr><name>count</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{
		<comment type="line">//cout&lt;&lt;count&lt;&lt;endl;</comment>
		<if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>auto</name></type> <name>f</name><init>=<expr><call><name>upper_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>curx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>cury</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>z</name><init>=<expr><operator>*</operator><name>f</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>e</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>count</name><operator>-=</operator><operator>(</operator><name>e</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>cury</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>cury</name><operator>=</operator><name>e</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>left</name><operator>=</operator><name>curx</name></expr>;</expr_stmt>
		}</block></then></if>
		
		<if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
		    <decl_stmt><decl><type><name>auto</name></type> <name>f</name><init>=<expr><call><name>upper_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>cury</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>curx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>z</name><init>=<expr><operator>*</operator><name>f</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>e</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>count</name><operator>-=</operator><operator>(</operator><name>e</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>curx</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>curx</name><operator>=</operator><name>e</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>top</name><operator>=</operator><name>cury</name></expr>;</expr_stmt>
		}</block></then></if>
		
		<if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
			
			<decl_stmt><decl><type><name>auto</name></type> <name>f</name><init>=<expr><call><name>upper_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>curx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>cury</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>f</name><operator>--</operator></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>z</name><init>=<expr><operator>*</operator><name>f</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>e</name><init>=<expr><call><name>max</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>count</name><operator>-=</operator><operator>(</operator><name>cury</name><operator>-</operator><operator>(</operator><name>e</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>cury</name><operator>=</operator><name>e</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>right</name><operator>=</operator><name>curx</name></expr>;</expr_stmt>
			
		}</block></then></if>
		<if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><then><block>{
		<comment type="line">//  cout&lt;&lt;curx&lt;&lt;"sss"&lt;&lt;endl;</comment>
			<decl_stmt><decl><type><name>auto</name></type> <name>f</name><init>=<expr><call><name>upper_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>cury</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>curx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">//	cout&lt;&lt;"d"&lt;&lt;*f&lt;&lt;endl;</comment>
			<expr_stmt><expr><name>f</name><operator>--</operator></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>z</name><init>=<expr><operator>*</operator><name>f</name></expr></init></decl>;</decl_stmt>
		<comment type="line">//	cout&lt;&lt;z&lt;&lt;left&lt;&lt;"sss"&lt;&lt;endl;</comment>
			<decl_stmt><decl><type><name>ll</name></type> <name>e</name><init>=<expr><call><name>max</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>count</name><operator>-=</operator><operator>(</operator><name>curx</name><operator>-</operator><operator>(</operator><name>e</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
		<comment type="line">//	cout&lt;&lt;e&lt;&lt;endl;</comment>
			<expr_stmt><expr><name>curx</name><operator>=</operator><name>e</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>bottom</name><operator>=</operator><name>cury</name></expr>;</expr_stmt>
		}</block></then></if>
		
		<if>if<condition>(<expr><name><name>ch</name><index>[<expr><call><name>MP</name><argument_list>(<argument><expr><name>curx</name></expr></argument>,<argument><expr><name>cury</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><name><name>ch</name><index>[<expr><call><name>MP</name><argument_list>(<argument><expr><name>curx</name></expr></argument>,<argument><expr><name>cury</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>dir</name><operator>=</operator><operator>(</operator><name>dir</name><operator>)</operator><operator>%</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<comment type="line">//	cout&lt;&lt;curx&lt;&lt;" "&lt;&lt;cury&lt;&lt;endl;</comment>
	<comment type="line">//	cout&lt;&lt;dir&lt;&lt;"gg"&lt;&lt;endl;</comment>
	}</block></while>
<comment type="line">//	cout&lt;&lt;count&lt;&lt;endl;</comment>
	<if>if<condition>(<expr><name>count</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
	
	
	
	}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<comment type="line">//cout&lt;&lt;pri+3;</comment>
	<decl_stmt><decl><type><name>ll</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	 <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//cin&gt;&gt;t;</comment>
	<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>t</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>masterstroke</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>

	<comment type="line">// your code goes here</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
