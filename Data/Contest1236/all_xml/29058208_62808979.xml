<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29058208_62808979.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><name>ll</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>a</name><index>[<expr><literal type="number">100009</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><literal type="number">100009</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{

        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>b</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name><operator>::</operator> <name>iterator</name></name></type> <name>it</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>y</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>mnx</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>mny</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>mxx</name><init>=<expr><name>n</name></expr></init></decl>,<decl><type ref="prev"/><name>mxy</name><init>=<expr><name>m</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
    <block>{

        <if>if<condition>(<expr><operator>!</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{<expr_stmt><expr><name>it</name><operator>=</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if>if<condition>(<expr><name>it</name><operator>!=</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>mxy</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>mxy</name></expr></argument>,<argument><expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>}</block></then></if>
        <expr_stmt><expr><name>ans1</name><operator>+=</operator><operator>(</operator><name>mxy</name><operator>-</operator><name>y</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name><operator>=</operator><name>mxy</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mnx</name><operator>++</operator></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>mxx</name><operator>&lt;</operator><name>mnx</name><operator>||</operator><name>mxy</name><operator>&lt;</operator><name>mny</name></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
        <if>if<condition>(<expr><operator>!</operator><name><name>b</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{<expr_stmt><expr><name>it</name><operator>=</operator><name><name>b</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if>if<condition>(<expr><name>it</name><operator>!=</operator><name><name>b</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>mxx</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>mxx</name></expr></argument>,<argument><expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>}</block></then></if>
        <expr_stmt><expr><name>ans1</name><operator>+=</operator><operator>(</operator><name>mxx</name><operator>-</operator><name>x</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name><operator>=</operator><name>mxx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mxy</name><operator>--</operator></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>mxx</name><operator>&lt;</operator><name>mnx</name><operator>||</operator><name>mxy</name><operator>&lt;</operator><name>mny</name></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
        <if>if<condition>(<expr><operator>!</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{<expr_stmt><expr><name>it</name><operator>=</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><if>if<condition>(<expr><name>it</name><operator>!=</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then>

            <block>{
                <expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>mny</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>mny</name></expr></argument>,<argument><expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    <expr_stmt><expr><name>ans1</name><operator>+=</operator><operator>(</operator><name>y</name><operator>-</operator><name>mny</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name><operator>=</operator><name>mny</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mxx</name><operator>--</operator></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>mxx</name><operator>&lt;</operator><name>mnx</name><operator>||</operator><name>mxy</name><operator>&lt;</operator><name>mny</name></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
    <if>if<condition>(<expr><operator>!</operator><name><name>b</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{<expr_stmt><expr><name>it</name><operator>=</operator><name><name>b</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><if>if<condition>(<expr><name>it</name><operator>!=</operator><name><name>b</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then>

            <block>{
                <expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>mnx</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>mnx</name></expr></argument>,<argument><expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    <expr_stmt><expr><name>ans1</name><operator>+=</operator><operator>(</operator><name>x</name><operator>-</operator><name>mnx</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name><operator>=</operator><name>mnx</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mny</name><operator>++</operator></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>mxx</name><operator>&lt;</operator><name>mnx</name><operator>||</operator><name>mxy</name><operator>&lt;</operator><name>mny</name></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
    }</block></while>
    <if>if<condition>(<expr><name>ans1</name><operator>+</operator><literal type="number">1</literal><operator>==</operator><operator>(</operator><operator>(</operator><name>n</name><operator>*</operator><name>m</name><operator>)</operator><operator>-</operator><name>k</name><operator>)</operator></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal></expr>;</expr_stmt></block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
