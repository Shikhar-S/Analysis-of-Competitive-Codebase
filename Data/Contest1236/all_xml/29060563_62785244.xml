<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29060563_62785244.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>srt</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sort(a.begin(), a.end());</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(), (x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = 0; i &lt; (int)(n); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>for1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = 1; i &lt;= (int)(n); ++i)</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>precision</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
      <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>LL</name></type> <name>an</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if>if<condition>(<expr><name>c</name><operator>&gt;=</operator><literal type="number">2</literal><operator>*</operator><name>b</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>an</name><operator>+=</operator><literal type="number">3</literal><operator>*</operator><name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>an</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <continue>continue;</continue>
      }</block></then>
      <else>else<block>{
        <expr_stmt><expr><name>an</name><operator>+=</operator><operator>(</operator><name>c</name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>-=</operator><operator>(</operator><name>c</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>b</name><operator>&gt;=</operator><literal type="number">2</literal><operator>*</operator><name>a</name></expr>)</condition><then><block>{
          <expr_stmt><expr><name>an</name><operator>+=</operator><literal type="number">3</literal><operator>*</operator><name>a</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>an</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt> 
          <continue>continue;</continue>
        }</block></then>
        <else>else<block>{
          <expr_stmt><expr><name>an</name><operator>+=</operator><operator>(</operator><name>b</name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>an</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
          <continue>continue;</continue>
        }</block></else></if>
      }</block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
