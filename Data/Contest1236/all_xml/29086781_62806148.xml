<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29086781_62806148.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> , <decl><type ref="prev"/><name>m</name></decl> , <decl><type ref="prev"/><name>q</name></decl> , <decl><type ref="prev"/><name>lx</name></decl> , <decl><type ref="prev"/><name>ly</name></decl> , <decl><type ref="prev"/><name>rx</name></decl> , <decl><type ref="prev"/><name>ry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>s</name></decl> , <decl><type ref="prev"/><name>s0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>sx1</name><index>[<expr><name>maxn</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>sy1</name><index>[<expr><name>maxn</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>sx2</name><index>[<expr><name>maxn</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>sy2</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl> , <decl><type ref="prev"/><name>j</name></decl> , <decl><type ref="prev"/><name>x</name></decl> , <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>q</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>q</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sx1</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sy1</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sx2</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><operator>-</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sy2</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><operator>-</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>rx</name> <operator>=</operator> <name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ry</name> <operator>=</operator> <name>m</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>lx</name> <operator>=</operator> <name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ly</name> <operator>=</operator> <name>y</name> <operator>=</operator> <name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>s0</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>auto</name></type> <name>p1</name> <init>= <expr><name><name>sx1</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>p1</name> <operator>==</operator> <name><name>sx1</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><operator>*</operator><name>p1</name><operator>)</operator> <operator>&gt;=</operator> <name>ry</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>ry</name><operator>-</operator><name>y</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>ry</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>y</name> <operator>=</operator> <name>ry</name></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><name>s</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>p1</name><operator>)</operator><operator>-</operator><name>y</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>ry</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>p1</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>y</name> <operator>=</operator> <name>ry</name></expr>;</expr_stmt>
		}</block></else></if>
		<if>if <condition>(<expr><name>s0</name> <operator>==</operator> <name>s</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><name>s0</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>auto</name></type> <name>p2</name> <init>= <expr><name><name>sy1</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>p2</name> <operator>==</operator> <name><name>sy1</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><operator>*</operator><name>p2</name><operator>)</operator> <operator>&gt;=</operator> <name>rx</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>rx</name><operator>-</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>rx</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name> <operator>=</operator> <name>rx</name></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><name>s</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>p2</name><operator>)</operator><operator>-</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>rx</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>p2</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name> <operator>=</operator> <name>rx</name></expr>;</expr_stmt>
		}</block></else></if>
		<if>if <condition>(<expr><name>s0</name> <operator>==</operator> <name>s</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><name>s0</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>auto</name></type> <name>p3</name> <init>= <expr><name><name>sx2</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><operator>-</operator><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>p3</name> <operator>==</operator> <name><name>sx2</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>-</operator><operator>(</operator><operator>*</operator><name>p3</name><operator>)</operator> <operator>&lt;=</operator> <name>ly</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>y</name><operator>-</operator><name>ly</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>ly</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>y</name> <operator>=</operator> <name>ly</name></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>y</name><operator>+</operator><operator>(</operator><operator>*</operator><name>p3</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>ly</name> <operator>=</operator> <literal type="number">1</literal><operator>-</operator><operator>(</operator><operator>*</operator><name>p3</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>y</name> <operator>=</operator> <name>ly</name></expr>;</expr_stmt>
		}</block></else></if>
		<if>if <condition>(<expr><name>s0</name> <operator>==</operator> <name>s</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><name>s0</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>auto</name></type> <name>p4</name> <init>= <expr><name><name>sy2</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><operator>-</operator><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>p4</name> <operator>==</operator> <name><name>sy2</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>-</operator><operator>(</operator><operator>*</operator><name>p4</name><operator>)</operator> <operator>&lt;=</operator> <name>lx</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>x</name><operator>-</operator><name>lx</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>lx</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name> <operator>=</operator> <name>lx</name></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>x</name><operator>+</operator><operator>(</operator><operator>*</operator><name>p4</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>lx</name> <operator>=</operator> <literal type="number">1</literal><operator>-</operator><operator>(</operator><operator>*</operator><name>p4</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name> <operator>=</operator> <name>lx</name></expr>;</expr_stmt>
		}</block></else></if>
		<if>if <condition>(<expr><name>s0</name> <operator>==</operator> <name>s</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
	}</block></while>
	<if>if <condition>(<expr><name>s</name> <operator>==</operator> <operator>(</operator><name>LL</name><operator>)</operator><name>n</name><operator>*</operator><name>m</name><operator>-</operator><name>q</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt></block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
