<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29090553_62814325.cpp"><comment type="block">/*
 _     _                             
| |__ | |__   __ _  __ _ _   _  __ _ 
| '_ \| '_ \ / _` |/ _` | | | |/ _` |
| |_) | | | | (_| | (_| | |_| | (_| |
|_.__/|_| |_|\__,_|\__, |\__, |\__,_|
                   |___/ |___/       
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro>          <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>          <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ppb</name></cpp:macro>         <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>endl</name></cpp:macro>		<cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mii</name></cpp:macro>         <cpp:value>map&lt;ll int,ll int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>msi</name></cpp:macro>         <cpp:value>map&lt;string,ll int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mis</name></cpp:macro>         <cpp:value>map&lt;ll int, string&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mpi</name></cpp:macro>         <cpp:value>map&lt;pair&lt;ll int,ll int&gt;,ll int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro>         <cpp:value>pair&lt;ll int,ll int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro>          <cpp:value>vector&lt;ll int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vs</name></cpp:macro>          <cpp:value>vector&lt;string&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(a).begin(),(a).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro>           <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro>           <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>(ll int)x.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hell</name></cpp:macro>        <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lbnd</name></cpp:macro>        <cpp:value>lower_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ubnd</name></cpp:macro>        <cpp:value>upper_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bs</name></cpp:macro>          <cpp:value>binary_search</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro>          <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>what_is</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>cerr &lt;&lt; #x &lt;&lt; " is " &lt;&lt; x &lt;&lt; endl;</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro>  <cpp:value>100005</cpp:value></cpp:define>

<decl_stmt><decl><type><name>vi</name></type> <name><name>vx</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vi</name></type> <name><name>vy</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

 
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>TESTS</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<comment type="line">// cin&gt;&gt;TESTS;</comment>
	<while>while<condition>(<expr><name>TESTS</name><operator>--</operator></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>ll</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vx</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vy</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<for>for<control>(<init><decl><type><name>ll</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name><name>vx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<for>for<control>(<init><decl><type><name>ll</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><call><name>max</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>vx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>vy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>xb1</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>xb2</name><init>=<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>yb1</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>yb2</name><init>=<expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>x</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>dir</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
		<block>{
			<if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>xb1</name><operator>&lt;</operator><name>x</name><operator>&amp;&amp;</operator><name>x</name><operator>&lt;</operator><name>xb2</name><operator>&amp;&amp;</operator><name>yb1</name><operator>&lt;</operator><name>y</name><operator>&amp;&amp;</operator><name>y</name><operator>&lt;</operator><name>yb2</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
			<block>{
				<decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>idx</name><init>=<expr><call><name>lower_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>vx</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>vx</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>tmpy</name><init>=<expr><name><name>vx</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>tmpy</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>tmpy</name></expr></argument>,<argument><expr><name>yb2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if>if<condition>(<expr><name>tmpy</name><operator>==</operator><name>y</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
				<expr_stmt><expr><name>cnt</name><operator>+=</operator><name>tmpy</name><operator>-</operator><name>y</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>y</name><operator>=</operator><name>tmpy</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>yb2</name><operator>=</operator><name>y</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>xb1</name><operator>=</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then>
			<elseif>else <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
			<block>{
				<decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>idx</name><init>=<expr><call><name>lower_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>vy</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>vy</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>tmpx</name><init>=<expr><name><name>vy</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>tmpx</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>tmpx</name></expr></argument>,<argument><expr><name>xb2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if>if<condition>(<expr><name>tmpx</name><operator>==</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
				<expr_stmt><expr><name>cnt</name><operator>+=</operator><name>tmpx</name><operator>-</operator><name>x</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>x</name><operator>=</operator><name>tmpx</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>y</name><operator>=</operator><name>y</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>xb2</name><operator>=</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>yb2</name><operator>=</operator><name>y</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if></elseif>
			<elseif>else <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then>
			<block>{
				<decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>idx</name><init>=<expr><call><name>upper_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>vx</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>vx</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>idx</name><operator>--</operator></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>tmpy</name><init>=<expr><name><name>vx</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>tmpy</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>tmpy</name></expr></argument>,<argument><expr><name>yb1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if>if<condition>(<expr><name>tmpy</name><operator>==</operator><name>y</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
				<expr_stmt><expr><name>cnt</name><operator>+=</operator><name>y</name><operator>-</operator><name>tmpy</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>y</name><operator>=</operator><name>tmpy</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">4</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>yb1</name><operator>=</operator><name>y</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>xb2</name><operator>=</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if></elseif>
			<else>else
			<block>{
				<decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>idx</name><init>=<expr><call><name>upper_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>vy</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>vy</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>idx</name><operator>--</operator></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>tmpx</name><init>=<expr><name><name>vy</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>tmpx</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>tmpx</name></expr></argument>,<argument><expr><name>xb1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if>if<condition>(<expr><name>tmpx</name><operator>==</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
				<expr_stmt><expr><name>cnt</name><operator>+=</operator><name>x</name><operator>-</operator><name>tmpx</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>x</name><operator>=</operator><name>tmpx</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>y</name><operator>=</operator><name>y</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>xb1</name><operator>=</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>yb1</name><operator>=</operator><name>y</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></while>
		<decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>nonvis</name><init>=<expr><name>n</name><operator>*</operator><name>m</name><operator>-</operator><name>k</name><operator>-</operator><name>cnt</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><operator>!</operator><name>nonvis</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal></expr>;</expr_stmt></block></else></if>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
