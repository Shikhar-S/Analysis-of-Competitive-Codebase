<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29087344_62791711.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d%I64d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>sol</name> <init>= <expr><literal type="number">1LL</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>p5000</name> <init>= <expr><literal type="number">1LL</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">5000</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>p5000</name> <operator>=</operator> <operator>(</operator><name>p5000</name><operator>*</operator><literal type="number">2LL</literal><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt></block></for>
	<while>while <condition>(<expr><name>m</name><operator>&gt;=</operator><literal type="number">5000LL</literal></expr>)</condition> <block>{
		<expr_stmt><expr><name>m</name><operator>-=</operator><literal type="number">5000LL</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>sol</name> <operator>=</operator> <operator>(</operator><name>sol</name><operator>*</operator><name>p5000</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
	}</block></while>
<comment type="line">//	cout &lt;&lt;"oveed"&lt;&lt;endl;</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>sol</name> <operator>=</operator> <operator>(</operator><name>sol</name> <operator>*</operator> <literal type="number">2LL</literal><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt></block></for>
<comment type="line">//	cout &lt;&lt;"asd\n";</comment>
<comment type="line">//	cout &lt;&lt;sol&lt;&lt;endl;</comment>
	<expr_stmt><expr><name>sol</name> <operator>=</operator> <operator>(</operator><name>sol</name> <operator>+</operator> <name>MOD</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>P5</name> <init>= <expr><literal type="number">1LL</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//	cout &lt;&lt;1&lt;&lt;endl;</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">5000</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>P5</name> <operator>=</operator> <operator>(</operator><name>P5</name><operator>*</operator><name>sol</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>ll</name></type> <name>rj</name> <init>= <expr><literal type="number">1LL</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//cout &lt;&lt;"oveed"&lt;&lt;endl;</comment>
	<while>while <condition>(<expr><name>n</name><operator>&gt;=</operator><literal type="number">5000LL</literal></expr>)</condition> <block>{
		<expr_stmt><expr><name>n</name><operator>-=</operator><literal type="number">5000LL</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rj</name> <operator>=</operator> <operator>(</operator><name>rj</name> <operator>*</operator> <name>P5</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
	}</block></while>
<comment type="line">//	cout &lt;&lt;"nigad"&lt;&lt;endl;</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>rj</name> <operator>=</operator> <operator>(</operator><name>rj</name><operator>*</operator><name>sol</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt></block></for>
<comment type="line">//		cout &lt;&lt;123412&lt;&lt;endl;</comment>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator><name>rj</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
