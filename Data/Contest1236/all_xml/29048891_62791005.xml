<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29048891_62791005.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>extra</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>, <decl><type ref="prev"/><name>one</name></decl> , <decl><type ref="prev"/><name>two</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <name>b</name></expr><operator>,</operator> <expr><name>z</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>extra</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>one</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cc</name> <init>= <expr><name>c</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>e</name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <expr_stmt><expr><name>b</name> <operator>-=</operator> <name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>extra</name> <operator>-=</operator> <name>p</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>one</name> <operator>+=</operator> <name>p</name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>one</name> <operator>+=</operator> <name>p</name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>two</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>cc</name> <operator>=</operator> <name>b</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>-=</operator> <name>p</name></expr><operator>,</operator> <expr><name>y</name> <operator>-=</operator> <name>p</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>two</name> <operator>+=</operator> <name>p</name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>two</name> <operator>+=</operator> <name>p</name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>max</name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    }</block></while>
}</block></function></unit>
