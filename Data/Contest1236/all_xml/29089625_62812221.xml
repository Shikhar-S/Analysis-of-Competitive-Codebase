<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29089625_62812221.cpp"><comment type="line" format="doxygen">///By Stephan Ramirez dsramirezc@unal.edu.co</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ms</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a,v,sizeof a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>100015</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>der</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>izq</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>arr</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>abj</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>tot</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>vis</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
		<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"in.txt"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//freopen("out.txt","w",stdout);</comment>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tot</name><operator>=</operator><name>n</name><operator>*</operator><name>m</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>dir</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>de</name><init>=<expr><name>m</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iz</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ar</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ba</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>posi</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>posj</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>der</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push</name><argument_list>(<argument><expr><operator>-</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>izq</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>arr</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push</name><argument_list>(<argument><expr><operator>-</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>abj</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>xx</name><init>=<expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>ba</name><operator>&lt;=</operator><name>ar</name> <operator>&amp;&amp;</operator> <name>de</name><operator>&gt;=</operator><name>iz</name></expr>)</condition><block>{
        <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
            <while>while<condition>(<expr><name><name>der</name><index>[<expr><name>posi</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>der</name><index>[<expr><name>posi</name></expr>]</index></name><operator>.</operator><call><name>top</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>&lt;</operator><name>posj</name></expr>)</condition>
                <block type="pseudo"><expr_stmt><expr><name><name>der</name><index>[<expr><name>posi</name></expr>]</index></name><operator>.</operator><call><name>pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
            <decl_stmt><decl><type><name>int</name></type> <name>cor</name><init>=<expr><name>de</name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>der</name><index>[<expr><name>posi</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>cor</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>cor</name></expr></argument>,<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>der</name><index>[<expr><name>posi</name></expr>]</index></name><operator>.</operator><call><name>top</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>ba</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>de</name><operator>=</operator><name>cor</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>vis</name><operator>+=</operator><name>cor</name><operator>-</operator><name>posj</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>posj</name><operator>=</operator><name>cor</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <while>while<condition>(<expr><name><name>arr</name><index>[<expr><name>posj</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><name>posj</name></expr>]</index></name><operator>.</operator><call><name>top</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>&lt;</operator><name>posi</name></expr>)</condition>
                <block type="pseudo"><expr_stmt><expr><name><name>arr</name><index>[<expr><name>posj</name></expr>]</index></name><operator>.</operator><call><name>pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
            <decl_stmt><decl><type><name>int</name></type> <name>cor</name><init>=<expr><name>ar</name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>arr</name><index>[<expr><name>posj</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>cor</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>cor</name></expr></argument>,<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><name>posj</name></expr>]</index></name><operator>.</operator><call><name>top</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>de</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>ar</name><operator>=</operator><name>cor</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>vis</name><operator>+=</operator><name>cor</name><operator>-</operator><name>posi</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>posi</name><operator>=</operator><name>cor</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <while>while<condition>(<expr><name><name>izq</name><index>[<expr><name>posi</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>izq</name><index>[<expr><name>posi</name></expr>]</index></name><operator>.</operator><call><name>top</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>&gt;</operator><name>posj</name></expr>)</condition>
                <block type="pseudo"><expr_stmt><expr><name><name>izq</name><index>[<expr><name>posi</name></expr>]</index></name><operator>.</operator><call><name>pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
            <decl_stmt><decl><type><name>int</name></type> <name>cor</name><init>=<expr><name>iz</name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>izq</name><index>[<expr><name>posi</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>cor</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>cor</name></expr></argument>,<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>izq</name><index>[<expr><name>posi</name></expr>]</index></name><operator>.</operator><call><name>top</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>ar</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>iz</name><operator>=</operator><name>cor</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>vis</name><operator>+=</operator><name>posj</name><operator>-</operator><name>cor</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>posj</name><operator>=</operator><name>cor</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
            <while>while<condition>(<expr><name><name>abj</name><index>[<expr><name>posj</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>abj</name><index>[<expr><name>posj</name></expr>]</index></name><operator>.</operator><call><name>top</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>&gt;</operator><name>posi</name></expr>)</condition>
                <block type="pseudo"><expr_stmt><expr><name><name>abj</name><index>[<expr><name>posj</name></expr>]</index></name><operator>.</operator><call><name>pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
            <decl_stmt><decl><type><name>int</name></type> <name>cor</name><init>=<expr><name>ba</name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>abj</name><index>[<expr><name>posj</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>cor</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>cor</name></expr></argument>,<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>abj</name><index>[<expr><name>posj</name></expr>]</index></name><operator>.</operator><call><name>top</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>iz</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>ba</name><operator>=</operator><name>cor</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>vis</name><operator>+=</operator><name>posi</name><operator>-</operator><name>cor</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>posi</name><operator>=</operator><name>cor</name></expr>;</expr_stmt>
        }</block></then></if>
       <comment type="line">// printf("%d %d %d %d %d\n",ar,ba,de,iz,vis);</comment>
        <comment type="line">//printf("%d %d\n",posi,posj);</comment>
        <expr_stmt><expr><name>dir</name><operator>=</operator><operator>(</operator><name>dir</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>;</expr_stmt>
	}</block></while>
	<comment type="line">//cout&lt;&lt;vis&lt;&lt;" "&lt;&lt;k&lt;&lt;" "&lt;&lt;" "&lt;&lt;tot&lt;&lt;endl;</comment>
	<if>if<condition>(<expr><operator>(</operator><name>vis</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>k</name><operator>)</operator><operator>==</operator><name>tot</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
