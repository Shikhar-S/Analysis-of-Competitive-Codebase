<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29082191_62786597.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>

<decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>u32</name> <init>= <type><name>uint32_t</name></type></init>;</using>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>constexpr</specifier> <type><name>T</name></type> <name>INF</name> <init>= <expr><call><name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">32</literal><operator>*</operator><literal type="number">15</literal><operator>+</operator><literal type="number">208</literal></expr></init></decl>;</decl_stmt>

<struct><template>template<parameter_list>&lt;<parameter><type><name>ll</name></type> <name>M</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></parameter>&gt;</parameter_list></template>
struct <name>modint</name><block>{<public type="default">
    <decl_stmt><decl><type><name>ll</name></type> <name>val</name></decl>;</decl_stmt>
    <constructor><name>modint</name><parameter_list>()</parameter_list><member_init_list>: <call><name>val</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></member_init_list><block>{}</block></constructor>
    <constructor><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
    <specifier>explicit</specifier> <name>modint</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>val</name> <operator>=</operator> <name>t</name><operator>%</operator><name>M</name></expr>;</expr_stmt> <if>if<condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>val</name> <operator>+=</operator> <name>M</name></expr>;</expr_stmt></block></then></if>}</block></constructor>

    <function><type><name>modint</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name>modint</name></type> <name>res</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>x</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>k</name></expr>)</condition><block>{
            <if>if<condition>(<expr><name>k</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>*=</operator> <name>x</name></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>x</name> <operator>*=</operator> <name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>res</name></expr>;</return>
    }</block></function>
    <function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
    <type><name>modint</name><modifier>&amp;</modifier></type> <name>operator<name>=</name></name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name>val</name> <operator>=</operator> <name>a</name><operator>%</operator><name>M</name></expr>;</expr_stmt> <if>if<condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>val</name> <operator>+=</operator> <name>M</name></expr>;</expr_stmt></block></then></if> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
    <function><type><name>modint</name></type> <name>inv</name><parameter_list>()</parameter_list> <block>{<return>return <expr><call><name>pow</name><argument_list>(<argument><expr><name>M</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
    <function type="operator"><type><name>modint</name><modifier>&amp;</modifier></type> <name>operator<name>+=</name></name><parameter_list>(<parameter><decl><type><name>modint</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>a</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt> <if>if<condition>(<expr><name>val</name> <operator>&gt;=</operator> <name>M</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>val</name> <operator>-=</operator> <name>M</name></expr>;</expr_stmt></block></then></if> <return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></function>
    <function type="operator"><type><name>modint</name><modifier>&amp;</modifier></type> <name>operator<name>-=</name></name><parameter_list>(<parameter><decl><type><name>modint</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name>val</name> <operator>+=</operator> <name>M</name><operator>-</operator><name><name>a</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt> <if>if<condition>(<expr><name>val</name> <operator>&gt;=</operator> <name>M</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>val</name> <operator>-=</operator> <name>M</name></expr>;</expr_stmt></block></then></if> <return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></function>
    <function type="operator"><type><name>modint</name><modifier>&amp;</modifier></type> <name>operator<name>*=</name></name><parameter_list>(<parameter><decl><type><name>modint</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">1LL</literal><operator>*</operator><name>val</name><operator>*</operator><name><name>a</name><operator>.</operator><name>val</name></name><operator>%</operator><name>M</name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></function>
    <function type="operator"><type><name>modint</name><modifier>&amp;</modifier></type> <name>operator<name>/=</name></name><parameter_list>(<parameter><decl><type><name>modint</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator> <operator>*=</operator> <call><name><name>a</name><operator>.</operator><name>inv</name></name><argument_list>()</argument_list></call></expr>;</return>}</block></function>
    <function type="operator"><type><name>modint</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><name>modint</name></type> <name>a</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<return>return <expr><call><name>modint</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>+=</operator><name>a</name></expr>;</return>}</block></function>
    <function type="operator"><type><name>modint</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><name>modint</name></type> <name>a</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<return>return <expr><call><name>modint</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>-=</operator><name>a</name></expr>;</return>}</block></function>
    <function type="operator"><type><name>modint</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><name>modint</name></type> <name>a</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<return>return <expr><call><name>modint</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>*=</operator><name>a</name></expr>;</return>}</block></function>
    <function type="operator"><type><name>modint</name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><name>modint</name></type> <name>a</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<return>return <expr><call><name>modint</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>/=</operator><name>a</name></expr>;</return>}</block></function>
    <function type="operator"><type><name>modint</name></type> <name>operator<name>-</name></name><parameter_list>()</parameter_list><block>{ <return>return <expr><call><name>modint</name><argument_list>(<argument><expr><operator>-</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
    <function type="operator"><type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name></type> <name>a</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<return>return <expr><name>val</name> <operator>==</operator> <name><name>a</name><operator>.</operator><name>val</name></name></expr>;</return>}</block></function>
    <function type="operator"><type><name>bool</name></type> <name>operator<name>!=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name></type> <name>a</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<return>return <expr><name>val</name> <operator>!=</operator> <name><name>a</name><operator>.</operator><name>val</name></name></expr>;</return>}</block></function>
    <function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name></type> <name>a</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<return>return <expr><name>val</name> <operator>&lt;</operator> <name><name>a</name><operator>.</operator><name>val</name></name></expr>;</return>}</block></function>
</public>}</block>;</struct>

<using>using <name>mint</name> <init>= <type><name><name>modint</name><argument_list type="generic">&lt;<argument><expr><name>MOD</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><call><name>mint</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>pow</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>-</operator><call><name>mint</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>pow</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>.</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
