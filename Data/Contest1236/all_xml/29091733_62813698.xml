<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29091733_62813698.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name><name>x</name><index>[<expr><literal type="number">111111</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><literal type="number">111111</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>cx</name></decl>,<decl><type ref="prev"/><name>cy</name></decl>,<decl><type ref="prev"/><name>dir</name></decl>,<decl><type ref="prev"/><name>ly</name></decl>,<decl><type ref="prev"/><name>ry</name></decl>,<decl><type ref="prev"/><name>lx</name></decl>,<decl><type ref="prev"/><name>rx</name></decl>,<decl><type ref="prev"/><name>cur</name></decl>,<decl><type ref="prev"/><name>gg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>ho1</name><index>[<expr><literal type="number">111111</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ho2</name><index>[<expr><literal type="number">111111</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>v1</name><index>[<expr><literal type="number">111111</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>v2</name><index>[<expr><literal type="number">111111</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>f</name></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>go</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>dir</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
	<block>{
		<if>if <condition>(<expr><name><name>ho1</name><index>[<expr><name>cx</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><name>ry</name><operator>-</operator><name>cy</name><operator>)</operator></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>ry</name><operator>==</operator><name>cy</name> <operator>&amp;&amp;</operator> <name>f</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
			<expr_stmt><expr><name>cy</name><operator>=</operator><name>ry</name></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><name>cur</name><operator>=</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>ho1</name><index>[<expr><name>cx</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>ho1</name><index>[<expr><name>cx</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>cy</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>ho1</name><index>[<expr><name>cx</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>cur</name><operator>==</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>ho1</name><index>[<expr><name>cx</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then> 
			<block>{
				<expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><name>ry</name><operator>-</operator><name>cy</name><operator>)</operator></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>ry</name><operator>==</operator><name>cy</name> <operator>&amp;&amp;</operator> <name>f</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
				<expr_stmt><expr><name>cy</name><operator>=</operator><name>ry</name></expr>;</expr_stmt>
			}</block></then> 
			<else>else
			<block>{
				<expr_stmt><expr><name>gg</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>ry</name></expr></argument>,<argument><expr><name><name>ho1</name><index>[<expr><name>cx</name></expr>]</index><index>[<expr><name>cur</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><name>gg</name><operator>-</operator><name>cy</name><operator>)</operator></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>gg</name><operator>==</operator><name>cy</name> <operator>&amp;&amp;</operator> <name>f</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
				<expr_stmt><expr><name>cy</name><operator>=</operator><name>gg</name></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
		<expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt><expr_stmt><expr><name>lx</name><operator>=</operator><name>cx</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></then>
	<elseif>else <if>if <condition>(<expr><name>dir</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
	<block>{
		<if>if <condition>(<expr><name><name>v1</name><index>[<expr><name>cy</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><name>rx</name><operator>-</operator><name>cx</name><operator>)</operator></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>rx</name><operator>==</operator><name>cx</name> <operator>&amp;&amp;</operator> <name>f</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
			<expr_stmt><expr><name>cx</name><operator>=</operator><name>rx</name></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><name>cur</name><operator>=</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>v1</name><index>[<expr><name>cy</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>v1</name><index>[<expr><name>cy</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>cx</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>v1</name><index>[<expr><name>cy</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>cur</name><operator>==</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>v1</name><index>[<expr><name>cy</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then> 
			<block>{
				<expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><name>rx</name><operator>-</operator><name>cx</name><operator>)</operator></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>rx</name><operator>==</operator><name>cx</name> <operator>&amp;&amp;</operator> <name>f</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
				<expr_stmt><expr><name>cx</name><operator>=</operator><name>rx</name></expr>;</expr_stmt>
			}</block></then> 
			<else>else
			<block>{
				<expr_stmt><expr><name>gg</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>rx</name></expr></argument>,<argument><expr><name><name>v1</name><index>[<expr><name>cy</name></expr>]</index><index>[<expr><name>cur</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><name>gg</name><operator>-</operator><name>cx</name><operator>)</operator></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>gg</name><operator>==</operator><name>cx</name> <operator>&amp;&amp;</operator> <name>f</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
				<expr_stmt><expr><name>cx</name><operator>=</operator><name>gg</name></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
		<expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt><expr_stmt><expr><name>ry</name><operator>=</operator><name>cy</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></then></if></elseif>
	<elseif>else <if>if <condition>(<expr><name>dir</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then>
	<block>{
		<if>if <condition>(<expr><name><name>ho2</name><index>[<expr><name>cx</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><name>cy</name><operator>-</operator><name>ly</name><operator>)</operator></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>cy</name><operator>==</operator><name>ly</name> <operator>&amp;&amp;</operator> <name>f</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
			<expr_stmt><expr><name>cy</name><operator>=</operator><name>ly</name></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><name>cur</name><operator>=</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>ho2</name><index>[<expr><name>cx</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>ho2</name><index>[<expr><name>cx</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><operator>-</operator><name>cy</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>ho2</name><index>[<expr><name>cx</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>cur</name><operator>==</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>ho2</name><index>[<expr><name>cx</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><name>cy</name><operator>-</operator><name>ly</name><operator>)</operator></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>cy</name><operator>==</operator><name>ly</name> <operator>&amp;&amp;</operator> <name>f</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
				<expr_stmt><expr><name>cy</name><operator>=</operator><name>ly</name></expr>;</expr_stmt>
			}</block></then>
			<else>else 
			<block>{
				<expr_stmt><expr><name>gg</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>ly</name></expr></argument>,<argument><expr><operator>-</operator><name><name>ho2</name><index>[<expr><name>cx</name></expr>]</index><index>[<expr><name>cur</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><name>cy</name><operator>-</operator><name>gg</name><operator>)</operator></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>cy</name><operator>==</operator><name>gg</name> <operator>&amp;&amp;</operator> <name>f</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
				<expr_stmt><expr><name>cy</name><operator>=</operator><name>gg</name></expr>;</expr_stmt> 
			}</block></else></if>
		}</block></else></if>
		<expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">4</literal></expr>;</expr_stmt><expr_stmt><expr><name>rx</name><operator>=</operator><name>cx</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></then></if></elseif>
	<else>else
	<block>{
		<if>if <condition>(<expr><name><name>v2</name><index>[<expr><name>cy</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><name>cx</name><operator>-</operator><name>lx</name><operator>)</operator></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>cx</name><operator>==</operator><name>lx</name> <operator>&amp;&amp;</operator> <name>f</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
			<expr_stmt><expr><name>cx</name><operator>=</operator><name>lx</name></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><name>cur</name><operator>=</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>v2</name><index>[<expr><name>cy</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>v2</name><index>[<expr><name>cy</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><operator>-</operator><name>cx</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>v2</name><index>[<expr><name>cy</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>cur</name><operator>==</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>v2</name><index>[<expr><name>cy</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><name>cx</name><operator>-</operator><name>lx</name><operator>)</operator></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>cx</name><operator>==</operator><name>lx</name> <operator>&amp;&amp;</operator> <name>f</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
				<expr_stmt><expr><name>cx</name><operator>=</operator><name>lx</name></expr>;</expr_stmt>
			}</block></then>
			<else>else 
			<block>{
				<expr_stmt><expr><name>gg</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>lx</name></expr></argument>,<argument><expr><operator>-</operator><name><name>v2</name><index>[<expr><name>cy</name></expr>]</index><index>[<expr><name>cur</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><name>cx</name><operator>-</operator><name>gg</name><operator>)</operator></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>cx</name><operator>==</operator><name>gg</name> <operator>&amp;&amp;</operator> <name>f</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
				<expr_stmt><expr><name>cx</name><operator>=</operator><name>gg</name></expr>;</expr_stmt> 
			}</block></else></if>	
		}</block></else></if>
		<expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>ly</name><operator>=</operator><name>cy</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></else></if>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ho1</name><index>[<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ho2</name><index>[<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><operator>-</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>v1</name><index>[<expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>v2</name><index>[<expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><operator>-</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if <condition>(<expr><name><name>ho1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>ho1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>ho1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>ho2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>ho2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if <condition>(<expr><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>v2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>v2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cx</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>cy</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>ly</name><operator>=</operator><name>lx</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>ry</name><operator>=</operator><name>m</name></expr>;</expr_stmt><expr_stmt><expr><name>rx</name><operator>=</operator><name>n</name></expr>;</expr_stmt><expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<while>while<condition>(<expr><call><name>go</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></while>
	<if>if <condition>(<expr><name>ans</name><operator>==</operator><literal type="number">1ll</literal><operator>*</operator><name>n</name><operator>*</operator><name>m</name><operator>-</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
