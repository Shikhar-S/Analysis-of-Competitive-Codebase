<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29085037_62798031.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
        <comment type="block">/*
        long long Sum = (pow(1ll*n,4)-pow(1ll*n,3))/2;
        long long gr = n * (n-1) / 2;
        cout &lt;&lt; "Sum = " &lt;&lt; Sum &lt;&lt; ", group = " &lt;&lt; gr &lt;&lt; endl;
        cout &lt;&lt; 1.0 * Sum / gr &lt;&lt; endl;
        */</comment>
        <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>ans</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
                        <if>if <condition>(<expr><name>j</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>n</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else>else <block>{
                                <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>j</name><operator>*</operator><name>n</name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                }</block></for>
        }</block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d%c"</literal></expr></argument>,<argument><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">" \n"</literal><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal><operator>==</operator><name>n</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        }</block></for>
        <comment type="block">/*
        for (int i = 0; i &lt; n; ++i) {
                for (int j = 0; j &lt; n; ++j) {
                        if (i == j) continue;
                        int res = 0;
                        for (int a = 0; a &lt; n; ++a) {
                                for (int b = 0; b &lt; n; ++b) {
                                        if (ans[i][a] &gt; ans[j][b]) ++res;       
                                }
                        }
                        printf ("from %d to %d  = %d\n",i+1,j+1,res);
                }
        }
        */</comment>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
