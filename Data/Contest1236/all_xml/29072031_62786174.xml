<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29072031_62786174.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line">// type alias</comment>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>II</name>;</typedef>
<typedef>typedef <type><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>III</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>VI</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>VS</name>;</typedef>
<typedef>typedef <type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>MAPII</name>;</typedef>
<typedef>typedef <type><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>SETI</name>;</typedef>
<using><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> using <name>VV</name><init>=<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<comment type="line">// minmax</comment>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>SMIN</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>a</name><operator>=</operator><ternary><condition><expr><operator>(</operator><name>a</name><operator>&gt;</operator><name>b</name><operator>)</operator></expr>?</condition><then><expr><name>b</name></expr></then><else>:<expr><name>a</name></expr></else></ternary></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>SMAX</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>a</name><operator>=</operator><ternary><condition><expr><operator>(</operator><name>a</name><operator>&lt;</operator><name>b</name><operator>)</operator></expr>?</condition><then><expr><name>b</name></expr></then><else>:<expr><name>a</name></expr></else></ternary></expr>;</return> }</block></function>
<comment type="line">// repetition</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORE</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(a);i&lt;=(b);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPE</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>for(int i=0;i&lt;=(n);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(a);i&lt;(b);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>for(int i=0;i&lt;(n);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>arr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto&amp; x:arr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int((a).size())</cpp:value></cpp:define>
<comment type="line">// collection</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).begin(),(c).end()</cpp:value></cpp:define>
<comment type="line">// DP</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINUS</name><parameter_list>(<parameter><type><name>dp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(dp, -1, sizeof(dp))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZERO</name><parameter_list>(<parameter><type><name>dp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(dp, 0, sizeof(dp))</cpp:value></cpp:define>
<comment type="line">// stdout</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>println</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stdout, ##args),putchar('\n');</cpp:value></cpp:define>
<comment type="line">// debug cerr</comment>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>Iter</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>__kumaerrc</name><parameter_list>(<parameter><decl><type><name>Iter</name></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>Iter</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{ <for>for<control>(<init>;</init> <condition><expr><name>begin</name><operator>!=</operator><name>end</name></expr>;</condition> <incr><expr><operator>++</operator><name>begin</name></expr></incr>)</control> <block>{ <expr_stmt><expr><name>cerr</name><operator>&lt;&lt;</operator><operator>*</operator><name>begin</name><operator>&lt;&lt;</operator><literal type="char">','</literal></expr>;</expr_stmt> }</block></for> <expr_stmt><expr><name>cerr</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>__kumaerr</name><parameter_list>(<parameter><decl><type><name><name>istream_iterator</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>it</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>it</name></expr>;</expr_stmt> <expr_stmt><expr><name>cerr</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>__kumaerr</name><parameter_list>(<parameter><decl><type><name><name>istream_iterator</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>it</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Args</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cerr</name><operator>&lt;&lt;</operator><operator>*</operator><name>it</name><operator>&lt;&lt;</operator><literal type="string">"="</literal><operator>&lt;&lt;</operator><name>a</name><operator>&lt;&lt;</operator><literal type="string">", "</literal></expr><operator>,</operator><expr><call><name>__kumaerr</name><argument_list>(<argument><expr><operator>++</operator><name>it</name></expr></argument>, <argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>S</name></parameter>, <parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>_os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>,<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></name><modifier>&amp;</modifier></type> <name>_p</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>_os</name><operator>&lt;&lt;</operator><literal type="string">"{"</literal><operator>&lt;&lt;</operator><name><name>_p</name><operator>.</operator><name>first</name></name><operator>&lt;&lt;</operator><literal type="char">','</literal><operator>&lt;&lt;</operator><name><name>_p</name><operator>.</operator><name>second</name></name><operator>&lt;&lt;</operator><literal type="string">"}"</literal></expr>;</return> }</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__KUMATRACE__</name></cpp:macro> <cpp:value>true</cpp:value></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__KUMATRACE__</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dump</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator&lt;string&gt; _it(_ss); __kumaerr(_it, args); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dumpc</name><parameter_list>(<parameter><type><name>ar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ cerr&lt;&lt;#ar&lt;&lt;": "; FORR(x,(ar)) { cerr &lt;&lt; x &lt;&lt; ','; } cerr &lt;&lt; endl; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dumpC</name><parameter_list>(<parameter><type><name>beg</name></type></parameter>,<parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ cerr&lt;&lt;"~"&lt;&lt;#end&lt;&lt;": "; __kumaerrc(beg,end); }</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dump</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dumpc</name><parameter_list>(<parameter><type><name>ar</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dumpC</name><parameter_list>(<parameter><type><name>beg</name></type></parameter>,<parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// $ cp-batch Stones | diff Stones.out -</comment>
<comment type="line">// $ g++ -std=c++14 -Wall -O2 -D_GLIBCXX_DEBUG -fsanitize=address Stones.cpp &amp;&amp; ./a.out</comment>

<comment type="block">/*
 
 10/17/2019
 
 6:36-
 
 */</comment>

<decl_stmt><decl><type><name>int</name></type> <name>Q</name></decl>,<decl><type ref="prev"/><name>A</name></decl>,<decl><type ref="prev"/><name>B</name></decl>,<decl><type ref="prev"/><name>C</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>res</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <macro><name>REPE</name><argument_list>(<argument>x</argument>,<argument>A</argument>)</argument_list></macro><macro><name>REPE</name><argument_list>(<argument>y</argument>,<argument>B</argument>)</argument_list></macro> <if>if<condition>(<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><name>y</name><operator>&lt;=</operator><name>B</name><operator>&amp;&amp;</operator><literal type="number">2</literal><operator>*</operator><name>y</name><operator>&lt;=</operator><name>C</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>SMAX</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><literal type="number">3</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>res</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>fixed</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>Q</name></expr>;</expr_stmt>
  <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>Q</argument>)</argument_list></macro> <block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>A</name><operator>&gt;&gt;</operator><name>B</name><operator>&gt;&gt;</operator><name>C</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
