<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29063606_62815335.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>lint</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<comment type="line">//at most one dead end tunnel</comment>
<comment type="line">//all tunnel have right turns</comment>
<comment type="line">//right-tunnel cannot star at lowest except row 1</comment>
<decl_stmt><decl><type><name>int</name></type> <name><name>dr</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dc</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>R</name></decl>, <decl><type ref="prev"/><name>C</name></decl>, <decl><type ref="prev"/><name>K</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>ROW</name><index>[<expr><literal type="number">300005</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>COL</name><index>[<expr><literal type="number">300005</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>ALLROW</name></decl>, <decl><type ref="prev"/><name>ALLCOL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>str</name></decl>, <decl><type ref="prev"/><name>etr</name></decl>, <decl><type ref="prev"/><name>stc</name></decl>, <decl><type ref="prev"/><name>etc</name></decl>;</decl_stmt>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>R</name> <operator>&gt;&gt;</operator> <name>C</name> <operator>&gt;&gt;</operator> <name>K</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>etr</name> <operator>=</operator> <name>R</name></expr><operator>,</operator> <expr><name>stc</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>etc</name> <operator>=</operator> <name>C</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>K</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>r</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ROW</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>COL</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ALLROW</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ALLCOL</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>ans</name> <operator>&lt;</operator> <name>R</name> <operator>*</operator> <name>C</name> <operator>-</operator> <name>K</name> <operator>&amp;&amp;</operator> <name>str</name> <operator>&lt;=</operator> <name>etr</name> <operator>+</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>stc</name> <operator>&lt;=</operator> <name>etc</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{
        <if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>k</name> <init>= <expr><name><name>ROW</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>k</name> <operator>!=</operator> <name><name>ROW</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>k</name> <operator>&lt;=</operator> <name>etc</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                <comment type="line">// cout &lt;&lt; "No\n";</comment>
                <comment type="line">// return 0;</comment>
                <if>if <condition>(<expr><operator>*</operator><name>k</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>stc</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
                <expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>labs</name><argument_list>(<argument><expr><name>j</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>k</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>j</name> <operator>=</operator> <operator>*</operator><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>etc</name> <operator>=</operator> <operator>*</operator><name>k</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>etc</name> <operator>-</operator> <name>j</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>j</name> <operator>=</operator> <name>etc</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>etc</name><operator>--</operator></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>d</name> <operator>%=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>k</name> <init>= <expr><name><name>COL</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>k</name> <operator>!=</operator> <name><name>COL</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>k</name> <operator>&lt;=</operator> <name>etr</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                <comment type="line">// cout &lt;&lt; "No\n";</comment>
                <comment type="line">// return 0;</comment>
                <if>if <condition>(<expr><operator>*</operator><name>k</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>str</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
                <expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>labs</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>k</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>*</operator><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>etr</name> <operator>=</operator> <operator>*</operator><name>k</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>etr</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name> <operator>=</operator> <name>etr</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>etr</name><operator>--</operator></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>d</name> <operator>%=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>k</name> <init>= <expr><name><name>ROW</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><name>k</name> <operator>!=</operator> <name><name>ROW</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>k</name> <operator>!=</operator> <name><name>ROW</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>prev</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            
            <if>if <condition>(<expr><name>ok</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>k</name> <operator>&gt;=</operator> <name>stc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                <comment type="line">// cout &lt;&lt; "No\n";</comment>
                <comment type="line">// return 0;</comment>
                <if>if <condition>(<expr><operator>*</operator><name>k</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>etc</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
                <expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>labs</name><argument_list>(<argument><expr><name>j</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>k</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>j</name> <operator>=</operator> <operator>*</operator><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>stc</name> <operator>=</operator> <operator>*</operator><name>k</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>j</name> <operator>-</operator> <name>stc</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>j</name> <operator>=</operator> <name>stc</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>stc</name><operator>++</operator></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>d</name> <operator>%=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>k</name> <init>= <expr><name><name>COL</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><operator>(</operator><name>k</name> <operator>!=</operator> <name><name>COL</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>k</name> <operator>!=</operator> <name><name>COL</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>prev</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <if>if <condition>(<expr><name>ok</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>k</name> <operator>&gt;=</operator> <name>str</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                <comment type="line">// cout &lt;&lt; "No\n";</comment>
                <comment type="line">// return 0;</comment>
                <if>if <condition>(<expr><operator>*</operator><name>k</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>etr</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
                <expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>labs</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>k</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>*</operator><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>str</name> <operator>=</operator> <operator>*</operator><name>k</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>i</name> <operator>-</operator> <name>str</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>d</name> <operator>%=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
        <comment type="line">// cout &lt;&lt; i &lt;&lt; " " &lt;&lt; j &lt;&lt; "\n";</comment>
    }</block></while>
    <comment type="line">// cout &lt;&lt; "Yes\n";</comment>
    <if>if <condition>(<expr><name>ans</name> <operator>==</operator> <name>R</name> <operator>*</operator> <name>C</name> <operator>-</operator> <name>K</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt></block></else></if>
}</block></function></unit>
