<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29086245_62809466.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>bool</name></type> <name>Enlarge</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>T</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><ternary><condition><expr><name>a</name><operator>&lt;</operator><name>b</name></expr>?</condition><then><expr><name>a</name><operator>=</operator><name>b</name></expr></then></ternary></expr><operator>,</operator><expr><literal type="number">1</literal><operator>:</operator><literal type="number">0</literal></expr>;</return>
}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>bool</name></type> <name>Reduce</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>T</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><ternary><condition><expr><name>a</name><operator>&gt;</operator><name>b</name></expr>?</condition><then><expr><name>a</name><operator>=</operator><name>b</name></expr></then></ternary></expr><operator>,</operator><expr><literal type="number">1</literal><operator>:</operator><literal type="number">0</literal></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>XN</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">11</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name><name>ho</name><index>[<expr><name>XN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ve</name><index>[<expr><name>XN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>tot</name><init>=<expr><literal type="number">1LL</literal><operator>*</operator><name>n</name><operator>*</operator><name>m</name><operator>-</operator><name>k</name></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>k</name><operator>--</operator></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ho</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ve</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>ho</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ho</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>sort</name></name><argument_list>(<argument><expr><name><name>ho</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>ho</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
                <expr_stmt><expr><name><name>ve</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ve</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>sort</name></name><argument_list>(<argument><expr><name><name>ve</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>ve</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cnt</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></expr></argument>,<argument><expr><name><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></expr></argument>&gt;</argument_list></name></name></type> <name>dirs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mnx</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>mny</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>mxx</name><init>=<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>mxy</name><init>=<expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>std::lower_bound(a.begin(),a.end(),b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ub</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>std::upper_bound(a.begin(),a.end(),b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>std::make_pair(x,y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dirs[mp(x,y)].insert(c); if(dirs[mp(x,y)].size()&gt;2) { break; }</cpp:value></cpp:define>
        <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name><operator>=</operator><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><operator>*</operator><call><name>ub</name><argument_list>(<argument><expr><name><name>ho</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>mxy</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>cnt</name><operator>+=</operator><name>t</name><operator>-</operator><name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name><operator>=</operator><name>t</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Enlarge</name><argument_list>(<argument><expr><name>mnx</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name><operator>=</operator><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><operator>*</operator><call><name>ub</name><argument_list>(<argument><expr><name><name>ve</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>mxx</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cnt</name><operator>+=</operator><name>t</name><operator>-</operator><name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name><operator>=</operator><name>t</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Reduce</name><argument_list>(<argument><expr><name>mxy</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name><operator>=</operator><call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><operator>*</operator><call><name><name>std</name><operator>::</operator><name>prev</name></name><argument_list>(<argument><expr><call><name>lb</name><argument_list>(<argument><expr><name><name>ho</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>mny</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cnt</name><operator>+=</operator><name>y</name><operator>-</operator><name>t</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name><operator>=</operator><name>t</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Reduce</name><argument_list>(<argument><expr><name>mxx</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name><operator>=</operator><call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><operator>*</operator><call><name><name>std</name><operator>::</operator><name>prev</name></name><argument_list>(<argument><expr><call><name>lb</name><argument_list>(<argument><expr><name><name>ve</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>mnx</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cnt</name><operator>+=</operator><name>x</name><operator>-</operator><name>t</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name><operator>=</operator><name>t</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Enlarge</name><argument_list>(<argument><expr><name>mny</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><operator>(</operator><ternary><condition><expr><name>cnt</name><operator>==</operator><name>tot</name></expr>?</condition><then><expr><literal type="string">"Yes"</literal></expr></then><else>:<expr><literal type="string">"No"</literal></expr></else></ternary><operator>)</operator><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
