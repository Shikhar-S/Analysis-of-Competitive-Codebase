<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29090967_62811379.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>sx</name><index>[<expr><name>n</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>sy</name><index>[<expr><name>m</name></expr>]</index></name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr><operator>,</operator><expr><name>x</name><operator>--</operator></expr><operator>,</operator><expr><name>y</name><operator>--</operator></expr><operator>,</operator><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>,<expr><name>y</name></expr>}</block></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>sx</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>sy</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>sx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>sx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>sy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>sy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>stx</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>ex</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>sty</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>ey</name><init>=<expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>d</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{
    	<if>if<condition>(<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>,<expr><name>j</name></expr>}</block></expr></argument>)</argument_list></call><operator>!=</operator><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
    	<if>if<condition>(<expr><name>i</name><operator>&gt;</operator><name>ex</name><operator>||</operator><name>i</name><operator>&lt;</operator><name>stx</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
    	<if>if<condition>(<expr><name>j</name><operator>&gt;</operator><name>ey</name><operator>||</operator><name>j</name><operator>&lt;</operator><name>sty</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
    	<if>if<condition>(<expr><name>d</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
    		<decl_stmt><decl><type><name>int</name></type> <name>ub</name><init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>sx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>sx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>sx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    		<if>if<condition>(<expr><name>ub</name><operator>&lt;</operator><name><name>sx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&amp;&amp;</operator><name>ub</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ub</name> <operator>=</operator> <name><name>sx</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>ub</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
    		<else>else <block type="pseudo"><expr_stmt><expr><name>ub</name> <operator>=</operator> <name>ey</name></expr>;</expr_stmt></block></else></if>
    		<if>if<condition>(<expr><name><name>sx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>||</operator><name><name>ub</name><argument_list type="generic">&lt;<argument><expr><name>sty</name> <operator>||</operator><name>ub</name></expr></argument>&gt;</argument_list></name><name>ey</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ub</name> <operator>=</operator> <name>ey</name></expr>;</expr_stmt></block></then></if>
    		<for>for<control>(<init><decl><type><name>int</name></type> <name>yy</name> <init>= <expr><name>ub</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>yy</name><operator>&lt;=</operator><name>ey</name></expr>;</condition><incr><expr><name>yy</name><operator>++</operator></expr></incr>)</control>
    			<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>xx</name><init>=<expr><name>stx</name></expr></init></decl>;</init><condition><expr><name>xx</name><operator>&lt;=</operator><name>ex</name></expr>;</condition><incr><expr><name>xx</name><operator>++</operator></expr></incr>)</control><block>{
    				<if>if<condition>(<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><block>{<expr><name>xx</name></expr>,<expr><name>yy</name></expr>}</block></expr></argument>)</argument_list></call><operator>==</operator><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
    					<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal></expr>;</expr_stmt>
    					<return>return <expr><literal type="number">0</literal></expr>;</return>
					}</block></then></if>
				}</block></for></block></for>
			<expr_stmt><expr><name>d</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>stx</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>ey</name> <operator>=</operator> <name>ub</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>j</name> <operator>=</operator> <name>ey</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name>d</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
    		<decl_stmt><decl><type><name>int</name></type> <name>ub</name><init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>sy</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>sy</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>sy</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    		<if>if<condition>(<expr><name>ub</name><operator>&lt;</operator><name><name>sy</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&amp;&amp;</operator><name>ub</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ub</name> <operator>=</operator> <name><name>sy</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>ub</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
    		<else>else <block type="pseudo"><expr_stmt><expr><name>ub</name> <operator>=</operator> <name>ex</name></expr>;</expr_stmt></block></else></if>
    		<if>if<condition>(<expr><name><name>sy</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>||</operator><name><name>ub</name><argument_list type="generic">&lt;<argument><expr><name>stx</name> <operator>||</operator><name>ub</name></expr></argument>&gt;</argument_list></name><name>ex</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ub</name> <operator>=</operator> <name>ex</name></expr>;</expr_stmt></block></then></if>
    		<for>for<control>(<init><decl><type><name>int</name></type> <name>xx</name><init>=<expr><name>ub</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>xx</name><operator>&lt;=</operator><name>ex</name></expr>;</condition><incr><expr><name>xx</name><operator>++</operator></expr></incr>)</control>
    			<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>yy</name> <init>= <expr><name>sty</name></expr></init></decl>;</init><condition><expr><name>yy</name><operator>&lt;=</operator><name>ey</name></expr>;</condition><incr><expr><name>yy</name><operator>++</operator></expr></incr>)</control><block>{
    				<if>if<condition>(<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><block>{<expr><name>xx</name></expr>,<expr><name>yy</name></expr>}</block></expr></argument>)</argument_list></call><operator>==</operator><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    					<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal></expr>;</expr_stmt>
    					<return>return <expr><literal type="number">0</literal></expr>;</return>
					}</block></then></if>
				}</block></for></block></for>
			<expr_stmt><expr><name>d</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>ey</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>ex</name> <operator>=</operator> <name>ub</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>i</name> <operator>=</operator> <name>ex</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name>d</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>ub</name><init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>sx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>sx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>sx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    		<if>if<condition>(<expr><name>ub</name><operator>&lt;</operator><name><name>sx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&amp;&amp;</operator><name>ub</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ub</name> <operator>=</operator> <name><name>sx</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>ub</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
    		<else>else <block type="pseudo"><expr_stmt><expr><name>ub</name> <operator>=</operator> <name>sty</name></expr>;</expr_stmt></block></else></if>
    		<if>if<condition>(<expr><name><name>sx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>||</operator><name><name>ub</name><argument_list type="generic">&lt;<argument><expr><name>sty</name> <operator>||</operator><name>ub</name></expr></argument>&gt;</argument_list></name><name>ey</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ub</name> <operator>=</operator> <name>sty</name></expr>;</expr_stmt></block></then></if>
    		<for>for<control>(<init><decl><type><name>int</name></type> <name>yy</name> <init>= <expr><name>ub</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>yy</name><operator>&gt;=</operator><name>sty</name></expr>;</condition><incr><expr><name>yy</name><operator>--</operator></expr></incr>)</control>
    			<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>xx</name><init>=<expr><name>stx</name></expr></init></decl>;</init><condition><expr><name>xx</name><operator>&lt;=</operator><name>ex</name></expr>;</condition><incr><expr><name>xx</name><operator>++</operator></expr></incr>)</control><block>{
    				<if>if<condition>(<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><block>{<expr><name>xx</name></expr>,<expr><name>yy</name></expr>}</block></expr></argument>)</argument_list></call><operator>==</operator><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
    					<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal></expr>;</expr_stmt>
    					<return>return <expr><literal type="number">0</literal></expr>;</return>
					}</block></then></if>
				}</block></for></block></for>
			<expr_stmt><expr><name>d</name><operator>=</operator><literal type="number">4</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>ex</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>sty</name> <operator>=</operator> <name>ub</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>j</name> <operator>=</operator> <name>sty</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name>d</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><then><block>{
    		<decl_stmt><decl><type><name>int</name></type> <name>ub</name><init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>sy</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>sy</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>sy</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    		<if>if<condition>(<expr><name>ub</name><operator>&lt;</operator><name><name>sy</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&amp;&amp;</operator><name>ub</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ub</name> <operator>=</operator> <name><name>sy</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>ub</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
    		<else>else <block type="pseudo"><expr_stmt><expr><name>ub</name> <operator>=</operator> <name>stx</name></expr>;</expr_stmt></block></else></if>
    		<if>if<condition>(<expr><name><name>sy</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>||</operator><name><name>ub</name><argument_list type="generic">&lt;<argument><expr><name>stx</name> <operator>||</operator><name>ub</name></expr></argument>&gt;</argument_list></name><name>ex</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ub</name> <operator>=</operator> <name>stx</name></expr>;</expr_stmt></block></then></if>
    		<for>for<control>(<init><decl><type><name>int</name></type> <name>xx</name><init>=<expr><name>ub</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>xx</name><operator>&gt;=</operator><name>stx</name></expr>;</condition><incr><expr><name>xx</name><operator>--</operator></expr></incr>)</control>
    			<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>yy</name> <init>= <expr><name>sty</name></expr></init></decl>;</init><condition><expr><name>yy</name><operator>&lt;=</operator><name>ey</name></expr>;</condition><incr><expr><name>yy</name><operator>++</operator></expr></incr>)</control><block>{
    				<if>if<condition>(<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><block>{<expr><name>xx</name></expr>,<expr><name>yy</name></expr>}</block></expr></argument>)</argument_list></call><operator>==</operator><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
    					<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal></expr>;</expr_stmt>
    					<return>return <expr><literal type="number">0</literal></expr>;</return>
					}</block></then></if>
				}</block></for></block></for>
			<expr_stmt><expr><name>d</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>sty</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>stx</name> <operator>=</operator> <name>ub</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>i</name> <operator>=</operator> <name>stx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
	}</block></while>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><name>stx</name></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>ex</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><expr><name>j</name><operator>=</operator><name>sty</name></expr>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>ey</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>,<expr><name>j</name></expr>}</block></expr></argument>)</argument_list></call><operator>==</operator><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
    					<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal></expr>;</expr_stmt>
    					<return>return <expr><literal type="number">0</literal></expr>;</return>
					}</block></then></if></block></for></block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
