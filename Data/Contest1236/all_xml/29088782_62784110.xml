<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29088782_62784110.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<comment type="line">//#include &lt;ext/pb_ds/assoc_container.hpp&gt;</comment>
<comment type="line">//#include &lt;ext/pb_ds/tree_policy.hpp&gt;</comment>
<typedef>typedef <type><name>long</name> <name>long</name></type>       <name>ll</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>                <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro>                <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>            <cpp:value>(a).begin(), (a).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>clr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro>          <cpp:value>memset(a, (h), sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fore</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>for (ll i = b; i &lt; e; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>for (int i = b; i &lt; e; i++)</cpp:value></cpp:define>
<function><type><name>ll</name></type> <name>faster_in</name><parameter_list>()</parameter_list><block>{<decl_stmt><decl><type><name>ll</name></type> <name>r</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt><for>for<control>(<init><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</init><condition><expr><name>c</name><operator>&lt;=</operator><literal type="number">32</literal></expr>;</condition><incr><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for><if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>-</operator><call><name>faster_in</name><argument_list>()</argument_list></call></expr>;</return></block></then></if><for>for<control>(<init>;</init><condition><expr><name>c</name><operator>&gt;</operator><literal type="number">32</literal></expr>;</condition><incr><expr><name>r</name><operator>=</operator><operator>(</operator><name>r</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>r</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for><return>return <expr><name>r</name></expr>;</return>}</block></function>
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line">//using namespace __gnu_pbds;</comment>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>casos</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>casos</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>casos</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>maxx</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <macro><name>forr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">101</literal></argument>)</argument_list></macro>
        <block>{
            <macro><name>forr</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">101</literal></argument>)</argument_list></macro>
            <block>{
                <if>if <condition>(<expr><name>i</name><operator>&lt;=</operator><name>a</name> <operator>&amp;&amp;</operator> <literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><name>j</name><operator>&lt;=</operator><name>b</name> <operator>&amp;&amp;</operator> <literal type="number">2</literal><operator>*</operator><name>j</name><operator>&lt;=</operator><name>c</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>maxx</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>maxx</name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><name>j</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block>
        }</block>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>maxx</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></while>    
}</block></function>
<comment type="line">// PLUS ULTRA!</comment></unit>
