<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29051240_62807668.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>obs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>col</name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>possible</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>r</name> <operator>&lt;</operator> <name>l</name> <operator>||</operator> <name>d</name> <operator>&lt;</operator> <name>u</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>row</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>it</name> <operator>!=</operator> <name><name>row</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>it</name><operator>)</operator> <operator>&lt;=</operator> <name>r</name></expr>)</condition><then><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>u</name></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>d</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><operator>*</operator><name>it</name></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>r</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><operator>!</operator><call><name><name>obs</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>}</block></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
            }</block></for>
        }</block></for>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>it</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>u</name><operator>++</operator></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>r</name> <operator>&lt;</operator> <name>l</name> <operator>||</operator> <name>d</name> <operator>&lt;</operator> <name>u</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    <expr_stmt><expr><name>it</name> <operator>=</operator> <name><name>col</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>it</name> <operator>!=</operator> <name><name>col</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>it</name><operator>)</operator> <operator>&lt;=</operator> <name>d</name></expr>)</condition><then><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>*</operator><name>it</name></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>d</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>l</name></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>r</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><operator>!</operator><call><name><name>obs</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>}</block></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
            }</block></for>
        }</block></for>
        <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>it</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>r</name> <operator>&lt;</operator> <name>l</name> <operator>||</operator> <name>d</name> <operator>&lt;</operator> <name>u</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    <expr_stmt><expr><name>it</name> <operator>=</operator> <name><name>row</name><index>[<expr><name>d</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>it</name> <operator>!=</operator> <name><name>row</name><index>[<expr><name>d</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><operator>--</operator><name>it</name><operator>)</operator> <operator>&gt;=</operator> <name>l</name></expr>)</condition><then><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>u</name></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>d</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>l</name></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>it</name><operator>)</operator></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><operator>!</operator><call><name><name>obs</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>}</block></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
            }</block></for>
        }</block></for>
        <expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>it</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>d</name><operator>--</operator></expr>;</expr_stmt>

    <if>if<condition>(<expr><name>r</name> <operator>&lt;</operator> <name>l</name> <operator>||</operator> <name>d</name> <operator>&lt;</operator> <name>u</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    <expr_stmt><expr><name>it</name> <operator>=</operator> <name><name>col</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>it</name> <operator>!=</operator> <name><name>col</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><operator>--</operator><name>it</name><operator>)</operator> <operator>&gt;=</operator> <name>u</name></expr>)</condition><then><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>u</name></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <operator>(</operator><operator>*</operator><name>it</name><operator>)</operator></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>l</name></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>r</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><operator>!</operator><call><name><name>obs</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>}</block></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
            }</block></for>
        }</block></for>
        <expr_stmt><expr><name>u</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>it</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>

    <return>return <expr><call><name>possible</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>col</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>k</name><operator>--</operator></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>obs</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <if>if<condition>(<expr><call><name>possible</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
}</block></function></unit>
