<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29089393_62785988.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
 
<function><type><name>void</name></type> <name>printvector</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
      <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function>
 
 

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
   <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>

   <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>

   <decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>;</decl_stmt>
   <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
   <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
   <block>{
      <decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>ll</name></type> <name>stones</name><init>=<expr><name>a</name><operator>+</operator><name>b</name><operator>+</operator><name>c</name></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">100</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
      <block>{
        <if>if<condition>(<expr><name>b</name><operator>-</operator><name>i</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then>
          <block type="pseudo"><continue>continue;</continue></block></then>
        <else>else
          <block type="pseudo"><break>break;</break></block></else></if>
      }</block></for>

      <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

      <expr_stmt><expr><name>b</name><operator>=</operator><name>b</name><operator>-</operator><name>i</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>c</name><operator>=</operator><name>c</name><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>i</name></expr>;</expr_stmt>

       <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">100</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
          <if>if<condition>(<expr><name>a</name><operator>-</operator><name>i</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b</name><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><continue>continue;</continue></block></then>
          <else>else
            <block type="pseudo"><break>break;</break></block></else></if>
        }</block></for>

      <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

      <expr_stmt><expr><name>a</name><operator>=</operator><name>a</name><operator>-</operator><name>i</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>b</name><operator>=</operator><name>b</name><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>i</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>stones</name><operator>-</operator><operator>(</operator><name>a</name><operator>+</operator><name>b</name><operator>+</operator><name>c</name><operator>)</operator><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
   }</block></while>
}</block></function></unit>
