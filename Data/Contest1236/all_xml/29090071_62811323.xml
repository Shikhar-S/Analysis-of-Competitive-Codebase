<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29090071_62811323.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>boost</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);cin.tie();cout.tie();</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>k</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = k ; i &lt; n ; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>k</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = k ; i &lt;= n ; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)x.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VAR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#x &lt;&lt; " " &lt;&lt; x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v).begin(), (v).end()</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pil</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pli</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>

<decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>ob</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>col</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>row</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>colVec</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>rowVec</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name>boost</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><name>n</name><operator>*</operator><name>m</name> <operator>-</operator> <name>k</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>ob</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>st</name> <operator>&gt;&gt;</operator> <name><name>ob</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nd</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>colVec</name><index>[<expr><name><name>ob</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nd</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name><name>ob</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rowVec</name><index>[<expr><name><name>ob</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>st</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name><name>ob</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>rowVec</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><decl><type><name>auto</name></type> <name>c</name> <range>: <expr><name><name>rowVec</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
			<expr_stmt><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>colVec</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>auto</name></type> <name>c</name><range>: <expr><name><name>colVec</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	}</block></for>
	<decl_stmt><decl><type><name>bool</name></type> <name>moved</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bottom</name> <init>= <expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>right</name> <init>= <expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
		<comment type="line">// cout &lt;&lt; x &lt;&lt; " " &lt;&lt; y &lt;&lt; " " &lt;&lt; ans &lt;&lt; "\n";;</comment>
		<if>if<condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>closestObstacle</name> <init>= <expr><name>right</name></expr></init></decl>;</decl_stmt>
			<while>while <condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>front</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>y</name></expr>)</condition> <block>{
				<expr_stmt><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pop_front</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></while>
			<if>if <condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>closestObstacle</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>closestObstacle</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>front</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<comment type="line">// cout &lt;&lt; closestObstacle &lt;&lt; " " &lt;&lt; x &lt;&lt; " " &lt;&lt; y &lt;&lt; " xd\n";</comment>
			<if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>closestObstacle</name><operator>-</operator><name>y</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>moved</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name>moved</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name> <operator>-=</operator> <operator>(</operator><name>closestObstacle</name> <operator>-</operator> <name>y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>y</name> <operator>=</operator> <name>closestObstacle</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>top</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>closestObstacle</name> <init>= <expr><name>left</name></expr></init></decl>;</decl_stmt>
			<while>while <condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>back</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>y</name></expr>)</condition> <block>{
				<expr_stmt><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pop_back</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></while>
			<if>if <condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>closestObstacle</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>closestObstacle</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>back</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<comment type="line">// cout &lt;&lt; closestObstacle &lt;&lt; " " &lt;&lt; x &lt;&lt; " " &lt;&lt; y &lt;&lt; " XD\n";</comment>
			<if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>closestObstacle</name><operator>-</operator><name>y</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name>ans</name> <operator>-=</operator> <operator>(</operator><name>y</name> <operator>-</operator> <name>closestObstacle</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>y</name> <operator>=</operator> <name>closestObstacle</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>bottom</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<elseif>else <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>closestObstacle</name> <init>= <expr><name>bottom</name></expr></init></decl>;</decl_stmt>
			<while>while <condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>front</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>x</name></expr>)</condition> <block>{
				<expr_stmt><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>pop_front</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></while>
			<if>if <condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>closestObstacle</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>closestObstacle</name></expr></argument>, <argument><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>front</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>

			<if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>closestObstacle</name><operator>-</operator><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name>ans</name> <operator>-=</operator> <operator>(</operator><name>closestObstacle</name> <operator>-</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name> <operator>=</operator> <name>closestObstacle</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>right</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<elseif>else <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>closestObstacle</name> <init>= <expr><name>top</name></expr></init></decl>;</decl_stmt>
			<while>while <condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>back</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>x</name></expr>)</condition> <block>{
				<expr_stmt><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>pop_back</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></while>
			<if>if <condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>closestObstacle</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>closestObstacle</name></expr></argument>, <argument><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>back</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<comment type="line">// cout &lt;&lt; "&gt;" &lt;&lt; closestObstacle &lt;&lt; " " &lt;&lt; x &lt;&lt; " " &lt;&lt; y &lt;&lt; "\n";</comment>
			<if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>closestObstacle</name><operator>-</operator><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name>ans</name> <operator>-=</operator> <operator>(</operator><name>x</name> <operator>-</operator> <name>closestObstacle</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name> <operator>=</operator> <name>closestObstacle</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>left</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>	
		}</block></then></if></elseif></if>
		<expr_stmt><expr><name>dir</name><operator>++</operator></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
	}</block></while>
	<if>if <condition>(<expr><name>ans</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
	}</block></then>
	<else>else <block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt>
	}</block></else></if>
}</block></function></unit>
