<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29068052_62804288.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<comment type="line">//ios::sync_with_stdio(false);cin.tie(0);</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ppii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>pipi</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>ppll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>plpl</name>;</typedef>
<typedef>typedef <type><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>tl</name>;</typedef>
<decl_stmt><decl><type><name>ll</name></type> <name>mod</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>mod2</name><init>=<expr><literal type="number">998244353</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>mod3</name><init>=<expr><literal type="number">1000003</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>mod4</name><init>=<expr><literal type="number">998244853</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>inf</name><init>=<expr><literal type="number">1000000000000000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>pi</name><init>=<expr><literal type="number">2</literal><operator>*</operator><call><name>acos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>m</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=m;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rrep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=n;i&gt;=m;i--)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name><name>dh</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dw</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ddh</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><init>=<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ddw</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><init>=<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>lmax</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>a</name><operator>&lt;</operator><name>b</name></expr>)</condition><then><block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></then>
    <else>else <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></else></if>
}</block></function>
<function><type><name>ll</name></type> <name>lmin</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>a</name><operator>&lt;</operator><name>b</name></expr>)</condition><then><block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then>
    <else>else <block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></else></if>
}</block></function>
<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>a</name><operator>&lt;</operator><name>b</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>a</name><operator>%</operator><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></then></if>
    <return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>Pow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>ret</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>now</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>k</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{
        <if>if<condition>(<expr><name>k</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ret</name><operator>*=</operator><name>now</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>now</name><operator>*=</operator><name>now</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>beki</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>ret</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>now</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>k</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{
        <if>if<condition>(<expr><name>k</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>ret</name><operator>*=</operator><name>now</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>now</name><operator>*=</operator><name>now</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>now</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>gyaku</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><call><name>beki</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name><name>h</name><index>[<expr><name>k</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>w</name><index>[<expr><name>k</name></expr>]</index></name></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>k</argument>)</argument_list></macro><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>h</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><name><name>w</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>v</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>vv</name><index>[<expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>k</argument>)</argument_list></macro><block>{
        <expr_stmt><expr><name><name>v</name><index>[<expr><name><name>h</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name><name>w</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vv</name><index>[<expr><name><name>w</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name><name>h</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>m+<literal type="number">1</literal></argument>)</argument_list></macro><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>vv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>vv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>cnt</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>nh</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>nw</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>u</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>d</name><init>=<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">4</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
            
            <decl_stmt><decl><type><name>ll</name></type> <name>y</name><init>=<expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>nh</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>nh</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>nw</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>v</name><index>[<expr><name>nh</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>ne</name><init>=<expr><name>r</name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>y</name><operator>!=</operator><name><name>v</name><index>[<expr><name>nh</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ne</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>ne</name></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>nh</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name>i</name><operator>!=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>ne</name><operator>==</operator><name>nw</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>cnt</name><operator>+=</operator><name>ne</name><operator>-</operator><name>nw</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>nw</name><operator>=</operator><name>ne</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name><operator>=</operator><name>ne</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then>
        <elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">4</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            
            <decl_stmt><decl><type><name>ll</name></type> <name>y</name><init>=<expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>vv</name><index>[<expr><name>nw</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>vv</name><index>[<expr><name>nw</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>nh</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>vv</name><index>[<expr><name>nw</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>ne</name><init>=<expr><name>d</name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>y</name><operator>!=</operator><name><name>vv</name><index>[<expr><name>nw</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ne</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>ne</name></expr></argument>,<argument><expr><name><name>vv</name><index>[<expr><name>nw</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name>ne</name><operator>==</operator><name>nh</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>cnt</name><operator>+=</operator><name>ne</name><operator>-</operator><name>nh</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>nh</name><operator>=</operator><name>ne</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>d</name><operator>=</operator><name>ne</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">4</literal><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>y</name><init>=<expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>nh</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>nh</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>nw</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>v</name><index>[<expr><name>nh</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>y</name><operator>--</operator></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>ne</name><init>=<expr><name>l</name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>y</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ne</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>ne</name></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>nh</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name>ne</name><operator>==</operator><name>nw</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>cnt</name><operator>+=</operator><name>nw</name><operator>-</operator><name>ne</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>nw</name><operator>=</operator><name>ne</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>l</name><operator>=</operator><name>ne</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">4</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>y</name><init>=<expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>vv</name><index>[<expr><name>nw</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>vv</name><index>[<expr><name>nw</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>nh</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>vv</name><index>[<expr><name>nw</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>y</name><operator>--</operator></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>ne</name><init>=<expr><name>u</name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>y</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ne</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>ne</name></expr></argument>,<argument><expr><name><name>vv</name><index>[<expr><name>nw</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name>ne</name><operator>==</operator><name>nh</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>cnt</name><operator>+=</operator><name>nh</name><operator>-</operator><name>ne</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>nh</name><operator>=</operator><name>ne</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>u</name><operator>=</operator><name>ne</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
    }</block></for>
    <if>if<condition>(<expr><name>cnt</name><operator>+</operator><name>k</name><operator>==</operator><name>n</name><operator>*</operator><name>m</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
}</block></function>
</unit>
