<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29063719_62806423.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>R</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>C</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>R</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>C</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><name>n</name></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>u</name> <operator>&lt;</operator> <name>d</name> <operator>&amp;&amp;</operator> <name>l</name> <operator>&lt;</operator> <name>r</name></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>R</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>it</name> <operator>!=</operator> <name><name>R</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>it</name> <operator>&lt;=</operator> <name>r</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>nr</name> <init>= <expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>nr</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>r</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>u</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>d</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <if>if <condition>(<expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>pos</name> <operator>+</operator> <name>j</name> <operator>-</operator> <name>u</name> <operator>||</operator> <name><name>C</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pos</name> <operator>+</operator> <name>j</name> <operator>-</operator> <name>u</name></expr>]</index></name> <operator>!=</operator> <name>j</name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">0</literal></expr>;</return>
                    }</block></then></if>
                }</block></for>
            }</block></for>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <name>nr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>r</name></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
        <expr_stmt><expr><name>u</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>lower_bound</name><argument_list>(<argument><expr><name><name>C</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>it</name> <operator>!=</operator> <name><name>C</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>it</name> <operator>&lt;=</operator> <name>d</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>nd</name> <init>= <expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>nd</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>d</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>l</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>r</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <if>if <condition>(<expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>pos</name> <operator>+</operator> <name>j</name> <operator>-</operator> <name>l</name> <operator>||</operator> <name><name>R</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pos</name> <operator>+</operator> <name>j</name> <operator>-</operator> <name>l</name></expr>]</index></name> <operator>!=</operator> <name>j</name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">0</literal></expr>;</return>
                    }</block></then></if>
                }</block></for>
            }</block></for>
            <expr_stmt><expr><name>d</name> <operator>=</operator> <name>nd</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>u</name> <operator>&gt;</operator> <name>d</name></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
        <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>lower_bound</name><argument_list>(<argument><expr><name><name>R</name><index>[<expr><name>d</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><index>[<expr><name>d</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>it</name> <operator>!=</operator> <name><name>R</name><index>[<expr><name>d</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>it</name> <operator>&lt;=</operator> <name>r</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>R</name><index>[<expr><name>d</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><index>[<expr><name>d</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nl</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>--</operator><name>it</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>l</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>nl</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>u</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>d</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <if>if <condition>(<expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>pos</name> <operator>+</operator> <name>j</name> <operator>-</operator> <name>u</name> <operator>||</operator> <name><name>C</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pos</name> <operator>+</operator> <name>j</name> <operator>-</operator> <name>u</name></expr>]</index></name> <operator>!=</operator> <name>j</name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">0</literal></expr>;</return>
                    }</block></then></if>
                }</block></for>
            }</block></for>
            <expr_stmt><expr><name>l</name> <operator>=</operator> <name>nl</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>r</name></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
        <expr_stmt><expr><name>d</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>lower_bound</name><argument_list>(<argument><expr><name><name>C</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>it</name> <operator>!=</operator> <name><name>C</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>it</name> <operator>&lt;=</operator> <name>d</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>C</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nu</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>--</operator><name>it</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>u</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>nu</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>l</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>r</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <if>if <condition>(<expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>pos</name> <operator>+</operator> <name>j</name> <operator>-</operator> <name>l</name> <operator>||</operator> <name><name>R</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pos</name> <operator>+</operator> <name>j</name> <operator>-</operator> <name>l</name></expr>]</index></name> <operator>!=</operator> <name>j</name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">0</literal></expr>;</return>
                    }</block></then></if>
                }</block></for>
            }</block></for>
            <expr_stmt><expr><name>u</name> <operator>=</operator> <name>nu</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>u</name> <operator>&gt;</operator> <name>d</name></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
        <expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
