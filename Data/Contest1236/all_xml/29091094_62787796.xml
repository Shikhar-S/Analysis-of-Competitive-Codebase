<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29091094_62787796.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <name>t</name></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>c</name> <operator>&gt;</operator> <name>b</name> <operator>*</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>b</name> <operator>*</operator> <literal type="number">3</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
        <elseif>else <if>if<condition>(<expr><name>b</name> <operator>-</operator> <name>c</name> <operator>/</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>a</name> <operator>*</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>c</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>a</name> <operator>*</operator> <literal type="number">3</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then></if></elseif>
        <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>c</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>b</name> <operator>-</operator> <name>c</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
    }</block></for>
}</block></function></unit>
