<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29088060_62799095.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>rl</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #x &lt;&lt; ": " &lt;&lt; (x) &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// 1</comment>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MX</name><init>=<expr><literal type="number">309</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>res</name><index>[<expr><name>MX</name></expr>]</index><index>[<expr><name>MX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<comment type="block">/*
int score()
{
    int result=n*n;

    for(int i=0; i&lt;n; i++)
    {
        for(int j=i+1; j&lt;n; j++)
        {

            int curr=0;
            for(int u=0; u&lt;n; u++)
            {
                for(int v=0; v&lt;n; v++) curr+=res[i][u]&gt;res[j][v];
            }

            result=min(result, curr);
            result=min(result, n*n-curr);

        }
    }

    return result;
}
*/</comment>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//freopen("A.txt", "r", stdin);</comment>
    <comment type="line">//freopen("output.txt", "w", stdout);</comment>
    <comment type="line">//ios_base::sync_with_stdio(false);</comment>
    <comment type="line">//cin.tie(nullptr); cout.tie(nullptr);</comment>


    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>base</name><init>=<expr><name>j</name><operator>*</operator><name>n</name></expr></init></decl>;</decl_stmt>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name>j</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>base</name><operator>+</operator><name>i</name></expr>;</expr_stmt></block></then>
            <else>else
            <block type="pseudo"><expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>base</name><operator>+</operator><operator>(</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name><operator>)</operator></expr>;</expr_stmt></block></else></if>
        }</block></for>
    }</block></for>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>+</operator><name><name>res</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></for>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    }</block></for>

    <comment type="line">//int max_poss=(n*n)/2;</comment>
    <comment type="line">//dbg(score());</comment>
    <comment type="line">//dbg(max_poss);</comment>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
