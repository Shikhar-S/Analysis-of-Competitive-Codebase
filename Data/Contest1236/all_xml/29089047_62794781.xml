<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29089047_62794781.cpp">        <cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
        <using>using <namespace>namespace <name>std</name>;</namespace></using>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mex</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define> 
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test</name></cpp:macro> <cpp:value>int t;cin&gt;&gt;t;while(t--)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast</name></cpp:macro>  <cpp:value>ios_base::sync_with_stdio(false);cin.tie(NULL);</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fo</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;n;i++)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rfo</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&gt;=b;i--)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bg</name></cpp:macro> <cpp:value>begin()</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>en</name></cpp:macro> <cpp:value>end()</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ub</name></cpp:macro> <cpp:value>upper_bound</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lb</name></cpp:macro> <cpp:value>lower_bound</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>veci</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>veclli</name></cpp:macro> <cpp:value>vector&lt;long long int&gt;</cpp:value></cpp:define> 
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sci</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d",&amp;x);</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scc</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%c",&amp;x);</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scs</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%s",x);</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sclli</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld",&amp;x);</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>plli</name></cpp:macro> <cpp:value>pair&lt;long long int ,lont long int&gt;</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>foit</name><parameter_list>(<parameter><type><name>it</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto it=x.begin();it!=x.end();it++)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;n;i++) printf("%d ",arr);</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.size()</cpp:value></cpp:define>
        <function><type><name>int</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>t</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt>
            <while>while<condition>(<expr><name>l</name></expr>)</condition>
            <block>{
                <if>if<condition>(<expr><name>l</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>*</operator><name>t</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><name>t</name><operator>=</operator><operator>(</operator><name>t</name><operator>*</operator><name>t</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>l</name><operator>=</operator><name>l</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></while>
            <return>return <expr><name>ans</name></expr>;</return>
        }</block></function>
        
        <function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
        <block>{
          <decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>n</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>k</name><init>=<expr><name>n</name><operator>*</operator><name>n</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>v</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>bool</name></type> <name>b</name><init>=<expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
          <while>while<condition>(<expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>)</condition>
          <block>{
            <macro><name>fo</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro>
            <block>{
                <if>if<condition>(<expr><name>b</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                <else>else 
                <block>{
                    <expr_stmt><expr><name><name>v</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal><operator>-</operator><name>j</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
            }</block>
            <expr_stmt><expr><name>b</name><operator>=</operator><operator>!</operator><name>b</name></expr>;</expr_stmt>
            
          }</block></while>
          <macro><name>fo</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro>
          <block>{
              <macro><name>fo</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
              <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
          }</block>
        }</block></function></unit>
