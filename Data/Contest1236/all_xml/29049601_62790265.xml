<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29049601_62790265.cpp"><using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>mod</name> <init>=  <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>fac</name></decl>, <decl><type ref="prev"/><name>ifac</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>power</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mod</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>base</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>exp</name></expr>)</condition>
    <block>{
        <if>if <condition>(<expr><name>exp</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>res</name><operator>*=</operator><name>base</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>res</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>exp</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>base</name><operator>*=</operator><name>base</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>base</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>inv</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mod</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><call><name>power</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>preCompute</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>fac</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>sz</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ifac</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>sz</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>fac</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>fac</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>fac</name><index>[<expr><name>i</name></expr>]</index></name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name>ifac</name><index>[<expr><name>sz</name></expr>]</index></name><operator>=</operator><call><name>inv</name><argument_list>(<argument><expr><name><name>fac</name><index>[<expr><name>sz</name></expr>]</index></name></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>sz</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>ifac</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>ifac</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></for>
}</block></function>

<function><type><name>int</name></type> <name>nCr</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>n</name><operator>&gt;=</operator><name>r</name> <operator>&amp;&amp;</operator> <name>r</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>fac</name><index>[<expr><name>n</name></expr>]</index></name><operator>*</operator><name><name>ifac</name><index>[<expr><name>n</name><operator>-</operator><name>r</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name><operator>)</operator><operator>*</operator><name><name>ifac</name><index>[<expr><name>r</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return></block></then></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<function><type><name>signed</name></type> <name>main</name> <parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>IOS</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>power</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>+</operator> <name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>power</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>y</name></expr>;</expr_stmt>

    
}</block></function>
</unit>
