<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29084971_62792698.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;n;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=1;i&lt;=n;++i)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name><init>=<expr><literal type="number">1e+9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<struct>struct <name>mint</name><block>{<public type="default">
  <decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>;</decl_stmt>
  <constructor><name>mint</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list><member_init_list>:<call><name>x</name><argument_list>(<argument><expr><name>x</name><operator>%</operator><name>MOD</name></expr></argument>)</argument_list></call></member_init_list><block>{}</block></constructor>
  <function type="operator"><type><name>mint</name><modifier>&amp;</modifier></type> <name>operator<name>+=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><operator>(</operator><name>x</name><operator>+=</operator><name><name>a</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>&gt;=</operator><name>MOD</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name><operator>-=</operator><name>MOD</name></expr>;</expr_stmt></block></then></if>
    <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
  }</block></function>
  <function type="operator"><type><name>mint</name><modifier>&amp;</modifier></type> <name>operator<name>-=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><operator>(</operator><name>x</name> <operator>+=</operator> <name>MOD</name><operator>-</operator><name><name>a</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>&gt;=</operator><name>MOD</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name><operator>-=</operator><name>MOD</name></expr>;</expr_stmt></block></then></if>
    <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
  }</block></function>
  <function type="operator"><type><name>mint</name><modifier>&amp;</modifier></type> <name>operator<name>*=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><operator>(</operator><name>x</name><operator>*=</operator><name><name>a</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>%=</operator><name>MOD</name></expr>;</expr_stmt>
    <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
  }</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name></type> <name>a</name></decl></parameter>)</parameter_list> <specifier>const</specifier><block>{
    <decl_stmt><decl><type><name>mint</name></type> <name>res</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <return>return <expr><name>res</name><operator>+=</operator><name>a</name></expr>;</return>
  }</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name></type> <name>a</name></decl></parameter>)</parameter_list> <specifier>const</specifier><block>{
    <decl_stmt><decl><type><name>mint</name></type> <name>res</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <return>return <expr><name>res</name><operator>-=</operator><name>a</name></expr>;</return>
  }</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name></type> <name>a</name></decl></parameter>)</parameter_list> <specifier>const</specifier><block>{
    <decl_stmt><decl><type><name>mint</name></type> <name>res</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <return>return <expr><name>res</name><operator>*=</operator><name>a</name></expr>;</return>
  }</block></function>
  <function><type><name>mint</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>t</name></decl></parameter>)</parameter_list> <specifier>const</specifier><block>{
    <if>if<condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>mint</name></type> <name>a</name> <init>= <expr><call><name>pow</name><argument_list>(<argument><expr><name>t</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>a</name><operator>*=</operator><name>a</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>t</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name><operator>*=</operator><operator>*</operator><name>this</name></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name>a</name></expr>;</return>
  }</block></function>
  
  <comment type="line">//for prime mod</comment>
  <function><type><name>mint</name></type> <name>inv</name><parameter_list>()</parameter_list> <specifier>const</specifier><block>{
    <return>return <expr><call><name>pow</name><argument_list>(<argument><expr><name>MOD</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
  <function type="operator"><type><name>mint</name><modifier>&amp;</modifier></type> <name>operator<name>/=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator> <operator>*=</operator> <call><name><name>a</name><operator>.</operator><name>inv</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name></type> <name>a</name></decl></parameter>)</parameter_list> <specifier>const</specifier><block>{
    <decl_stmt><decl><type><name>mint</name></type> <name>res</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <return>return <expr><name>res</name><operator>/=</operator><name>a</name></expr>;</return>
  }</block></function>
</public>}</block>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>mint</name></type> <name>res</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>mint</name></type> <name>t</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name><operator>*</operator><call><name><name>t</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>-=</operator> <operator>(</operator><name>mint</name><operator>)</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>res</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>res</name><operator>.</operator><name>x</name></name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
