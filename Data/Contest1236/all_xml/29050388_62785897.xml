<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29050388_62785897.cpp"><comment type="block">/*input
3
3 4 5
1 0 5
5 3 2
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>double</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RE</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = 1; i &lt;= n; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RED</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = n; i &gt; 0; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPS</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 1; (i*i) &lt;= n; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = 0; i &lt; (int)n; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = a; i &lt; b; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = n-1; i &gt;= 0; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = a; i &gt;= b; i--)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(),v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vvi</name></cpp:macro> <cpp:value>vector&lt;vi&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (auto it = arr.begin(); it != arr.end(); ++it) cout &lt;&lt; *it &lt;&lt; " "; cout &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; x &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; x &lt;&lt; " " &lt;&lt; y &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; x &lt;&lt; " " &lt;&lt; y &lt;&lt; " " &lt;&lt; z &lt;&lt; endl;</cpp:value></cpp:define>

<typedef>typedef <type><name><name>tree</name><argument_list type="generic">&lt;
<argument><expr><name>int</name></expr></argument>,
<argument><expr><name>null_type</name></expr></argument>,
<argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name>rb_tree_tag</name></expr></argument>,
<argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type>
<name>ordered_set</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">1e18</literal><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name> <init>= <expr><literal type="number">3.14159265358979323846264338</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>raise</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name>MOD</name></expr></init></decl></parameter>)</parameter_list><block>{
  <if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
  <if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if>
  <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>x</name> <operator>*=</operator> <call><name>raise</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name> <operator>%=</operator> <name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name> <operator>*=</operator> <name>x</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name> <operator>%=</operator> <name>m</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>n</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>x</name><operator>*=</operator> <name>a</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>x</name> <operator>%=</operator> <name>m</name></expr>;</expr_stmt>
    <return>return <expr><name>x</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>floor1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>n</name><operator>%</operator><name>k</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>n</name><operator>/</operator><name>k</name></expr>;</return></block></then></if>
    <return>return <expr><operator>(</operator><name>n</name><operator>/</operator><name>k</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>ceil1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><call><name>floor1</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">101</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>queue</name><argument_list type="generic">&lt; <argument><expr><name><name>pair</name><argument_list type="generic">&lt; <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
  	<comment type="line">//cin &gt;&gt; n;</comment>
  	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
  	<while>while<condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
  	<macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>N</argument>)</argument_list></macro><block>{
  		<macro><name>REP</name><argument_list>(<argument>j</argument>,<argument>N</argument>)</argument_list></macro><block>{
  			<macro><name>REP</name><argument_list>(<argument>k</argument>,<argument>N</argument>)</argument_list></macro><expr_stmt><expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  		}</block>
  	}</block>
  	<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><block>{<expr><block>{<expr><name>a</name></expr>,<expr><name>b</name></expr>}</block></expr>,<expr><name>c</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  	<expr_stmt><expr><name><name>vis</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  	<decl_stmt><decl><type><name>int</name></type> <name>suma</name> <init>= <expr><name>a</name><operator>+</operator><name>b</name><operator>+</operator><name>c</name></expr></init></decl>;</decl_stmt>
  	<while>while<condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
  		<decl_stmt><decl><type><name>int</name></type> <name>a1</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name><name>f</name><operator>.</operator><name>f</name></name></expr></init></decl>;</decl_stmt>
  		<decl_stmt><decl><type><name>int</name></type> <name>b1</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name><name>f</name><operator>.</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
  		<decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>s</name></expr></init></decl>;</decl_stmt>
  		<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  		<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name>suma</name><operator>-</operator><operator>(</operator><name>a1</name><operator>+</operator><name>b1</name><operator>+</operator><name>c1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  		<if>if<condition>(<expr><name>a1</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>and</operator> <name>b1</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
  			<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>a1</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>b1</name><operator>-</operator><literal type="number">2</literal></expr>]</index><index>[<expr><name>c1</name></expr>]</index></name></expr>)</condition><then><block>{

  			}</block></then>
  			<else>else<block>{
  				<expr_stmt><expr><name><name>vis</name><index>[<expr><name>a1</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>b1</name><operator>-</operator><literal type="number">2</literal></expr>]</index><index>[<expr><name>c1</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  				<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><block>{<expr><block>{<expr><name>a1</name><operator>-</operator><literal type="number">1</literal></expr>,<expr><name>b1</name><operator>-</operator><literal type="number">2</literal></expr>}</block></expr>,<expr><name>c1</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  			}</block></else></if>
  		}</block></then></if>
  		<if>if<condition>(<expr><name>b1</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>and</operator> <name>c1</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
  			<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>a1</name></expr>]</index><index>[<expr><name>b1</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>c1</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>)</condition><then><block>{

  			}</block></then>
  			<else>else<block>{
  				<expr_stmt><expr><name><name>vis</name><index>[<expr><name>a1</name></expr>]</index><index>[<expr><name>b1</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>c1</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  				<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><block>{<expr><block>{<expr><name>a1</name></expr>,<expr><name>b1</name><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,<expr><name>c1</name><operator>-</operator><literal type="number">2</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  			}</block></else></if>
  		}</block></then></if>
  	}</block></while>
  	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//freopen(".in","r",stdin);freopen(".out","w",stdout);</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
  <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
    <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
