<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29088706_62787788.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>ksm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>rtn</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>y</name></expr>)</condition>
	<block>{
		<if>if<condition>(<expr><name>y</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>rtn</name><operator>*=</operator><name>x</name></expr><operator>,</operator><expr><name>rtn</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>x</name><operator>*=</operator><name>x</name></expr><operator>,</operator><expr><name>x</name><operator>%=</operator><name>mod</name></expr><operator>,</operator><expr><name>y</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>rtn</name></expr>;</return>
}</block></function>
<function><type><name>signed</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><call><name>ksm</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>--</operator><name>t</name></expr><operator>,</operator><expr><name>t</name><operator>+=</operator><name>mod</name></expr><operator>,</operator><expr><name>t</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>ksm</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
