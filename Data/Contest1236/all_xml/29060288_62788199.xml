<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29060288_62788199.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastio</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lli</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y1</name></cpp:macro> <cpp:value>arayikhalatyan</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>j1</name></cpp:macro> <cpp:value>jiglypuff</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<function><type><name>lli</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>lli</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if>
	<return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>lli</name></type> <name>cg</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><name>n</name> <operator>^</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
}</block></function>
<function><type><name>lli</name></type> <name>SUM</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><operator>(</operator><name>a</name> <operator>*</operator> <operator>(</operator><name>a</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>CAN</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>m</name></expr>)</condition><then>
	<block>{
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></then></if>
	<return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>
<function><type><name>double</name></type> <name>her</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y2</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>x1</name> <operator>-</operator> <name>x2</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>x1</name> <operator>-</operator> <name>x2</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y1</name> <operator>-</operator> <name>y2</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y1</name> <operator>-</operator> <name>y2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>string</name></type> <name>strsum</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>string</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>c</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>b</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name><name>b</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>a</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
	<block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>b</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>a</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name>b</name> <operator>+=</operator> <literal type="string">"0"</literal></expr>;</expr_stmt>
		}</block></for>
	}</block></then>
	<else>else
	<block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>b</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name>a</name> <operator>+=</operator> <literal type="string">"0"</literal></expr>;</expr_stmt>
		}</block></for>
	}</block></else></if>
 
	<expr_stmt><expr><name>a</name> <operator>+=</operator> <literal type="string">"0"</literal></expr><operator>,</operator> <expr><name>b</name> <operator>+=</operator> <literal type="string">"0"</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>a</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal> <operator>+</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal> <operator>+</operator> <name>p</name><operator>)</operator> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal> <operator>-</operator> <literal type="char">'0'</literal> <operator>+</operator> <name>p</name><operator>)</operator> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	}</block></for>
	<if>if <condition>(<expr><name><name>c</name><index>[<expr><call><name><name>c</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>c</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>c</name></expr>;</return>
}</block></function>
<function><type><name>string</name></type> <name>strmin</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>string</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><call><name><name>a</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>b</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></then></if>
	<if>if <condition>(<expr><call><name><name>b</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>a</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>a</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></then></if>
		<if>if <condition>(<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if>
	}</block></for>
	<return>return <expr><name>a</name></expr>;</return>
}</block></function>
 
<decl_stmt><decl><type><name>char</name></type> <name><name>vow</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'u'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dx</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dy</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
 
 
 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">3e5</literal> <operator>+</operator> <literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lli</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
 
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<function><type><name>lli</name></type> <name>bp</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>lli</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>lli</name></type> <name>sm</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>a</name></expr>)</condition>
	<block>{
		<if>if<condition>(<expr><literal type="number">1</literal> <operator>&amp;</operator> <name>a</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>*=</operator> <name>sm</name></expr><operator>,</operator> <expr><name>ret</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>sm</name><operator>*=</operator><name>sm</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>sm</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name>fastio</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>lli</name></type> <name>pat</name> <init>= <expr><call><name>bp</name><argument_list>(<argument><expr><literal type="number">2LL</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>bp</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
