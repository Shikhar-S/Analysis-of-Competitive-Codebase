<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29086352_62807130.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>db</name>;</typedef>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>void</name></type> <name>MAX</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>y</name><operator>&gt;</operator><name>x</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name>y</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>void</name></type> <name>MIN</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>y</name><operator>&lt;</operator><name>x</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name>y</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>void</name></type> <name>rd</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><decl_stmt><decl><type><name>char</name></type> <name>o</name></decl>,<decl><type ref="prev"/><name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>o</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name>o</name><operator>&lt;</operator><literal type="number">48</literal></expr>)</condition><block type="pseudo"><if>if<condition>(<expr><name>o</name><operator>==</operator><literal type="number">45</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><operator>-</operator><name>f</name></expr>;</expr_stmt></block></then></if></block></while>
	<do>do <block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>o</name><operator>^</operator><literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt></block>
	while<condition>(<expr><name>o</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name>o</name><operator>&gt;</operator><literal type="number">47</literal></expr>)</condition>;</do>
	<expr_stmt><expr><name>x</name><operator>*=</operator><name>f</name></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>M</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>U</name></decl>,<decl><type ref="prev"/><name>D</name></decl>,<decl><type ref="prev"/><name>L</name></decl>,<decl><type ref="prev"/><name>R</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>X</name><index>[<expr><name>M</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>Y</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>rx</name><index>[]</index></name><init>=<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ry</name><index>[]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>op</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>sz</name><init>=<expr><name><name>Y</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>sz</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name><name>Y</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name>x</name></expr>)</condition><then><block type="pseudo"><return>return <expr><name>x</name><operator>-</operator><call><name>max</name><argument_list>(<argument><expr><name>U</name></expr></argument>,<argument><expr><name><name>Y</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if></block></for>
	}</block></then></if>
	<if>if<condition>(<expr><name>op</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>sz</name><init>=<expr><name><name>X</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>sz</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name><name>X</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><name>y</name></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>min</name><argument_list>(<argument><expr><name>R</name></expr></argument>,<argument><expr><name><name>X</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-</operator><name>y</name><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if></block></for>
	}</block></then></if>
	<if>if<condition>(<expr><name>op</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>sz</name><init>=<expr><name><name>Y</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>sz</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name><name>Y</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><name>x</name></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>min</name><argument_list>(<argument><expr><name>D</name></expr></argument>,<argument><expr><name><name>Y</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if></block></for>
	}</block></then></if>
	<if>if<condition>(<expr><name>op</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>sz</name><init>=<expr><name><name>X</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>sz</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name><name>X</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name>y</name></expr>)</condition><then><block type="pseudo"><return>return <expr><name>y</name><operator>-</operator><call><name>max</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name><name>X</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if></block></for>
	}</block></then></if>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"jiedai.in"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//	freopen("jiedai.out","w",stdout);</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>rd</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>rd</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>rd</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>rd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>rd</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>X</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>Y</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>y</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>op</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>x</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>cnt</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>U</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator><expr><name>D</name><operator>=</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>L</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator><expr><name>R</name><operator>=</operator><name>m</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>res</name><init>=<expr><call><name>solve</name><argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>res</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>op</name><operator>=</operator><operator>(</operator><name>op</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr><operator>,</operator><expr><name>res</name><operator>=</operator><call><name>solve</name><argument_list>(<argument><expr><name>op</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<comment type="line">//		printf("op=%d  x=%d  y=%d  --&gt;  %d\n",op,x,y,res);</comment>
		<if>if<condition>(<expr><name>res</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>+</operator><name>res</name><operator>*</operator><name><name>rx</name><index>[<expr><name>op</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name><operator>=</operator><name>y</name><operator>+</operator><name>res</name><operator>*</operator><name><name>ry</name><index>[<expr><name>op</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cnt</name><operator>+=</operator><name>res</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>op</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>L</name><operator>=</operator><name>y</name></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name>op</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>U</name><operator>=</operator><name>x</name></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name>op</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>R</name><operator>=</operator><name>y</name></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name>op</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>D</name><operator>=</operator><name>x</name></expr>;</expr_stmt></block></then></if>
	}</block></while>
	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><ternary><condition><expr><name>cnt</name><operator>+</operator><name>k</name><operator>==</operator><literal type="number">1ll</literal><operator>*</operator><name>n</name><operator>*</operator><name>m</name></expr>?</condition><then><expr><literal type="string">"Yes"</literal></expr></then><else>:<expr><literal type="string">"No"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//	for(int i=1;i&lt;=n;i++){</comment>
<comment type="line">//		for(int j=0;j&lt;X[i].size();j++)printf("%d ",X[i][j]);</comment>
<comment type="line">//		puts("");</comment>
<comment type="line">//	}</comment>
<comment type="line">//	printf("%lld\n",cnt);</comment>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>-</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
}</block></function></unit>
