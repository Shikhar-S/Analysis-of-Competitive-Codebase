<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29087153_62808968.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>mas</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>sto</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>ma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>fun</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ly</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>ly</name><operator>++</operator></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>lx</name> <operator>&gt;</operator> <name>rx</name> <operator>||</operator> <name>ly</name> <operator>&gt;</operator> <name>ry</name></expr>)</condition><then> <block>{
        <return>return;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>ma</name><index>[<expr><block>{<expr><name>lx</name></expr>, <expr><name>ly</name></expr>}</block></expr>]</index></name></expr>)</condition><then> <block>{
        <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>curx</name> <init>= <expr><name>lx</name></expr></init></decl>, <decl><type ref="prev"/><name>cury</name> <init>= <expr><name>ly</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>ans</name> <operator>==</operator> <name>n</name> <operator>*</operator> <name>m</name> <operator>-</operator> <name>k</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>mas</name><index>[<expr><name>curx</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>mas</name><index>[<expr><name>curx</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cury</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>mas</name><index>[<expr><name>curx</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cury</name> <operator>=</operator> <name>ry</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>cury</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ry</name></expr></argument>, <argument><expr><operator>*</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>mas</name><index>[<expr><name>curx</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>mas</name><index>[<expr><name>curx</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cury</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <if>if <condition>(<expr><name>cury</name> <operator>==</operator> <name>ly</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt></block></then></if>

    <if>if <condition>(<expr><name>f</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
        <return>return;</return>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr><name>cury</name> <operator>==</operator> <name>ly</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></else></if>

    <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>cury</name> <operator>-</operator> <name>ly</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ans</name> <operator>==</operator> <name>n</name> <operator>*</operator> <name>m</name> <operator>-</operator> <name>k</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>sto</name><index>[<expr><name>cury</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>sto</name><index>[<expr><name>cury</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>curx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>sto</name><index>[<expr><name>cury</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>curx</name> <operator>=</operator> <name>rx</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>curx</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>rx</name></expr></argument>, <argument><expr><operator>*</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>sto</name><index>[<expr><name>cury</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>sto</name><index>[<expr><name>cury</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>curx</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <if>if <condition>(<expr><name>curx</name> <operator>==</operator> <name>lx</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><name>f</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
        <return>return;</return>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr><name>curx</name> <operator>==</operator> <name>lx</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></else></if>

    <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>curx</name> <operator>-</operator> <name>lx</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ans</name> <operator>==</operator> <name>n</name> <operator>*</operator> <name>m</name> <operator>-</operator> <name>k</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name>int</name></type> <name>ax</name> <init>= <expr><name>curx</name></expr></init></decl>, <decl><type ref="prev"/><name>ay</name> <init>= <expr><name>cury</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>mas</name><index>[<expr><name>curx</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>mas</name><index>[<expr><name>curx</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cury</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>mas</name><index>[<expr><name>curx</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cury</name> <operator>=</operator> <name>ly</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>cury</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>ly</name></expr></argument>, <argument><expr><name><name>mas</name><index>[<expr><name>curx</name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <if>if <condition>(<expr><name>cury</name> <operator>==</operator> <name>ay</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>f</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
        <return>return;</return>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr><name>cury</name> <operator>==</operator> <name>ay</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></else></if>

    <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>ay</name> <operator>-</operator> <name>cury</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ans</name> <operator>==</operator> <name>n</name> <operator>*</operator> <name>m</name> <operator>-</operator> <name>k</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>lower_bound</name><argument_list>(<argument><expr><name><name>sto</name><index>[<expr><name>cury</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>sto</name><index>[<expr><name>cury</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>curx</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>sto</name><index>[<expr><name>cury</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>curx</name> <operator>=</operator> <name>lx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>curx</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>lx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>sto</name><index>[<expr><name>cury</name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <if>if <condition>(<expr><name>curx</name> <operator>==</operator> <name>ax</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>f</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
        <return>return;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>curx</name> <operator>==</operator> <name>ax</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>ax</name> <operator>-</operator> <name>curx</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ans</name> <operator>==</operator> <name>n</name> <operator>*</operator> <name>m</name> <operator>-</operator> <name>k</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>fun</name><argument_list>(<argument><expr><name>curx</name></expr></argument>, <argument><expr><name>ax</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>cury</name></expr></argument>, <argument><expr><name>ay</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>s</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mas</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sto</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ma</name><index>[<expr><block>{<expr><name>a</name></expr>, <expr><name>b</name></expr>}</block></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>mas</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>mas</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>sto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>sto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fun</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ans</name> <operator>==</operator> <name>n</name> <operator>*</operator> <name>m</name> <operator>-</operator> <name>k</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
