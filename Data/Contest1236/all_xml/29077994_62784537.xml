<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29077994_62784537.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLI</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(LLI v = (a); v &lt; (b); ++v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORE</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(LLI v = (a); v &lt;= (b); ++v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FOR(v, 0, n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPE</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FORE(v, 0, n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REV</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(LLI v = (a); v &gt;= (b); --v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(), (x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RALL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).rbegin(), (x).rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITR</name><parameter_list>(<parameter><type><name>it</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto it = (c).begin(); it != (c).end(); ++it)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RITR</name><parameter_list>(<parameter><type><name>it</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto it = (c).rbegin(); it != (c).rend(); ++it)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXIST</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c).find(x) != (c).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fst</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snd</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>popcount</name></cpp:macro> <cpp:value>__builtin_popcount</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNIQ</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v).erase(unique(ALL(v)), (v).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1LL&lt;&lt;(i))</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;misc/C++/Debug.cpp&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dump</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gcd</name></cpp:macro> <cpp:value>__gcd</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>constexpr</specifier> <type><name>T</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>m</name><operator>/</operator><call><name>gcd</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>*</operator><name>n</name></expr>;</return>}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>I</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>join</name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>ost</name></decl></parameter>, <parameter><decl><type><name>I</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>I</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>string</name></type> <name>d</name><init>=<expr><literal type="string">" "</literal></expr></init></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><init>=<expr><name>s</name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>!=</operator><name>t</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<if>if<condition>(<expr><name>i</name><operator>!=</operator><name>s</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ost</name><operator>&lt;&lt;</operator><name>d</name></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>ost</name><operator>&lt;&lt;</operator><operator>*</operator><name>i</name></expr>;</expr_stmt>}</block></for><expr_stmt><expr><name>ost</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>}</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>a</name> <operator>:</operator> <name>v</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>is</name> <operator>&gt;&gt;</operator> <name>a</name></expr>;</expr_stmt></block></for> <return>return <expr><name>is</name></expr>;</return>}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>chmin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>U</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><ternary><condition><expr><name>a</name><operator>&gt;</operator><name>b</name></expr> ?</condition><then> <expr><name>a</name><operator>=</operator><name>b</name></expr></then></ternary><operator>,</operator> <literal type="boolean">true</literal> <operator>:</operator> <literal type="boolean">false</literal><operator>)</operator></expr>;</return>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>chmax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>U</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><ternary><condition><expr><name>a</name><operator>&lt;</operator><name>b</name></expr> ?</condition><then> <expr><name>a</name><operator>=</operator><name>b</name></expr></then></ternary><operator>,</operator> <literal type="boolean">true</literal> <operator>:</operator> <literal type="boolean">false</literal><operator>)</operator></expr>;</return>}</block></function>
<decl_stmt><decl><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>size_t</name></type> <name>N</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>fill_array</name><argument_list>(<argument><expr><call><name>T</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call><index>[<expr><name>N</name></expr>]</index></expr></argument>, <argument><expr><specifier>const</specifier> <name>U</name> <operator>&amp;</operator><name>v</name></expr></argument>)</argument_list><argument_list>{<argument><expr><call><name>fill</name><argument_list>(<argument><expr><operator>(</operator><name>U</name><operator>*</operator><operator>)</operator><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>U</name><operator>*</operator><operator>)</operator><operator>(</operator><name>a</name><operator>+</operator><name>N</name><operator>)</operator></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>;}</argument_list>

struct <name>Init</name><argument_list>{
  <argument><expr><macro><name>Init</name><argument_list>()</argument_list></macro><block>{
    <expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
  }</block></expr></argument>
}</argument_list><name>init</name></decl>;</decl_stmt>





<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{

  <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
  <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <macro><name>FORE</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>a</argument>)</argument_list></macro><block>{
      <macro><name>FORE</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument>b</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>a</name> <operator>and</operator> <literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><name>j</name> <operator>&lt;=</operator> <name>b</name> <operator>and</operator> <literal type="number">2</literal><operator>*</operator><name>j</name> <operator>&lt;=</operator> <name>c</name></expr>)</condition><then><block>{
          <expr_stmt><expr><call><name>chmax</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><name>j</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block>
    }</block>


    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  }</block></while>


  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
