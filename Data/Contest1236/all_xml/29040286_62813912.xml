<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29040286_62813912.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endd</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast</name></cpp:macro> <cpp:value>ios::sync_with_stdio(false);cin.tie(0);cout.tie(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test</name></cpp:macro> <cpp:value>ll t;cin&gt;&gt;t;while(t--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input</name></cpp:macro> <cpp:value>freopen("inp.txt","r",stdin)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>output</name></cpp:macro> <cpp:value>freopen("out1.txt","w",stdout)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name></cpp:macro> <cpp:value>size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setp</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fixed&lt;&lt;setprecision(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>3.14159265358979323846264338</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>spa</name></cpp:macro> <cpp:value>cout&lt;&lt;endd</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>2000</cpp:value></cpp:define>
<function><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter> , <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>modi</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
    <while>while<condition>(<expr><name>b</name></expr>)</condition> <block>{
        <if>if<condition>(<expr><name>b</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name> <operator>*</operator> <name>a</name><operator>)</operator> <operator>%</operator> <name>modi</name></expr> ;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>b</name><operator>/=</operator><literal type="number">2</literal></expr> ;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>a</name><operator>*</operator><name>a</name><operator>)</operator> <operator>%</operator> <name>modi</name></expr> ;</expr_stmt>
    }</block></while>
    <return>return <expr><name>res</name></expr> ;</return>
}</block></function>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dirx</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>diry</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dx</name><index>[]</index></name><init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dy</name><index>[]</index></name><init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
 
<comment type="line">//*******************************TEMPLATE ENDS HERE *******************//</comment>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>1000005</cpp:value></cpp:define>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>cur</name></decl>, <decl><type ref="prev"/><name>sum</name></decl>, <decl><type ref="prev"/><name>res</name></decl>, <decl><type ref="prev"/><name>ans</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>c</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>um1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>um2</name></decl>;</decl_stmt>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{ 
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>flag</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>um1</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>um2</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	
	<for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>x</name><operator>:</operator><name>um1</name></expr></init>)</control><block>{
		<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>ss</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>x</name><operator>:</operator><name>um2</name></expr></init>)</control><block>{
		<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>ss</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	
	<decl_stmt><decl><type><name>ll</name></type> <name>xs</name></decl>,<decl><type ref="prev"/><name>ys</name></decl>,<decl><type ref="prev"/><name>xe</name></decl>,<decl><type ref="prev"/><name>ye</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>xs</name><operator>=</operator><name>ys</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>xe</name><operator>=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ye</name><operator>=</operator><name>m</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name>int</name></type> <name>tmp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>xs</name><operator>&lt;=</operator><name>xe</name> <operator>&amp;&amp;</operator> <name>ys</name><operator>&lt;=</operator><name>ye</name></expr>)</condition>
	<block>{
		<if>if<condition>(<expr><name>tmp</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name><name>um1</name><index>[<expr><name>xs</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
				<decl_stmt><decl><type><name>ll</name></type> <name>idx</name> <init>= <expr><operator>(</operator><call><name>lower_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>um1</name><index>[<expr><name>xs</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ys</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>um1</name><index>[<expr><name>xs</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
				<if>if<condition>(<expr><name>idx</name> <operator>&lt;</operator> <name><name>um1</name><index>[<expr><name>xs</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>um1</name><index>[<expr><name>xs</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name> <operator>&lt;=</operator> <name>ye</name></expr>)</condition><then> <block>{
					<decl_stmt><decl><type><name>ll</name></type> <name>val</name> <init>= <expr><name><name>um1</name><index>[<expr><name>xs</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>ans</name> <operator>+=</operator> <operator>(</operator><name>xe</name><operator>-</operator><name>xs</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>ye</name><operator>-</operator><name>val</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>ye</name> <operator>=</operator> <name>val</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>	
			<expr_stmt><expr><name>xs</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>tmp</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name><name>um2</name><index>[<expr><name>ye</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
				<decl_stmt><decl><type><name>ll</name></type> <name>idx</name> <init>= <expr><operator>(</operator><call><name>lower_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>um2</name><index>[<expr><name>ye</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>xs</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>um2</name><index>[<expr><name>ye</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
				<if>if<condition>(<expr><name>idx</name> <operator>&lt;</operator> <name><name>um2</name><index>[<expr><name>ye</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>um2</name><index>[<expr><name>ye</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name> <operator>&lt;=</operator> <name>xe</name></expr>)</condition><then> <block>{
					<decl_stmt><decl><type><name>ll</name></type> <name>val</name> <init>= <expr><name><name>um2</name><index>[<expr><name>ye</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>ans</name> <operator>+=</operator> <operator>(</operator><name>xe</name><operator>-</operator><name>val</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>ye</name><operator>-</operator><name>ys</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>xe</name> <operator>=</operator> <name>val</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				}</block></then></if>	
			}</block></then></if>	
			<expr_stmt><expr><name>ye</name><operator>--</operator></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>tmp</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name><name>um1</name><index>[<expr><name>xe</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
				<decl_stmt><decl><type><name>ll</name></type> <name>idx</name> <init>= <expr><operator>(</operator><call><name>upper_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>um1</name><index>[<expr><name>xe</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ye</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>um1</name><index>[<expr><name>xe</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>idx</name><operator>--</operator></expr>;</expr_stmt>
				<if>if<condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>um1</name><index>[<expr><name>xe</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name> <operator>&gt;=</operator> <name>ys</name></expr>)</condition><then> <block>{
					<decl_stmt><decl><type><name>ll</name></type> <name>val</name> <init>= <expr><name><name>um1</name><index>[<expr><name>xe</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>ans</name> <operator>+=</operator> <operator>(</operator><name>xe</name><operator>-</operator><name>xs</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>val</name><operator>-</operator><name>ys</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>ys</name> <operator>=</operator> <name>val</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>	
			<expr_stmt><expr><name>xe</name><operator>--</operator></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>tmp</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name><name>um2</name><index>[<expr><name>ys</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
				<decl_stmt><decl><type><name>ll</name></type> <name>idx</name> <init>= <expr><operator>(</operator><call><name>upper_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>um2</name><index>[<expr><name>ys</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>xe</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>um2</name><index>[<expr><name>ys</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>idx</name><operator>--</operator></expr>;</expr_stmt>
				<if>if<condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>um2</name><index>[<expr><name>ys</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name> <operator>&gt;=</operator> <name>xs</name></expr>)</condition><then> <block>{
					<decl_stmt><decl><type><name>ll</name></type> <name>val</name> <init>= <expr><name><name>um2</name><index>[<expr><name>ys</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>ans</name> <operator>+=</operator> <operator>(</operator><name>val</name><operator>-</operator><name>xs</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>ye</name><operator>-</operator><name>ys</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>xs</name> <operator>=</operator> <name>val</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
				}</block></then></if>		
			}</block></then></if>	
			<expr_stmt><expr><name>ys</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>tmp</name><operator>&gt;=</operator><literal type="number">4</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>tmp</name><operator>-=</operator><literal type="number">4</literal></expr>;</expr_stmt></block></then></if>
	}</block></while>
	<if>if<condition>(<expr><name>ans</name><operator>==</operator><name>k</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal></expr>;</expr_stmt>
	}</block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return> 
}</block></function> 
</unit>
