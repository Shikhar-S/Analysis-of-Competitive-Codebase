<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29085629_62813482.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxN</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>obstX</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>obstY</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>X</name></decl>, <decl><type ref="prev"/><name>Y</name></decl>, <decl><type ref="prev"/><name>N</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>visited</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>px</name></decl>, <decl><type ref="prev"/><name>py</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bx</name></decl>, <decl><type ref="prev"/><name>by</name></decl>, <decl><type ref="prev"/><name>tx</name></decl>, <decl><type ref="prev"/><name>ty</name></decl>;</decl_stmt>


<function><type><name>int</name></type> <name>find_lesseq</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <comment type="line">// printf("%d in { ", x);</comment>
    <comment type="line">// for (int val : v)</comment>
    <comment type="line">//     printf("%d ", val);</comment>
    <comment type="line">// puts("}");</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>avg</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>b</name> <operator>-</operator> <name>a</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{
        <expr_stmt><expr><name>avg</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>+</operator> <name>b</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>v</name><index>[<expr><name>avg</name></expr>]</index></name> <operator>&lt;=</operator> <name>x</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>=</operator> <name>avg</name></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>b</name> <operator>=</operator> <name>avg</name></expr>;</expr_stmt></block></else></if>
    }</block></while>

    <comment type="line">// printf("&gt;&gt; %d\n", a);</comment>
    <return>return <expr><name>a</name></expr>;</return>
}</block></function>


<function><type><name>void</name></type> <name>finish</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><ternary><condition><expr><name>visited</name> <operator>==</operator> <name>X</name> <operator>*</operator> <literal type="number">1LL</literal> <operator>*</operator> <name>Y</name> <operator>-</operator> <name>N</name></expr> ?</condition><then> <expr><literal type="string">"Yes"</literal></expr> </then><else>: <expr><literal type="string">"No"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// printf("%lld/%lld\n", visited, X * 1LL * Y - N);</comment>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name>bool</name></type> <name>moveY</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>nxt</name> <init>= <expr><call><name>find_lesseq</name><argument_list>(<argument><expr><name><name>obstX</name><index>[<expr><name>px</name></expr>]</index></name></expr></argument>, <argument><expr><name>py</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nxtY</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>ty</name></expr></argument>, <argument><expr><name><name>obstX</name><index>[<expr><name>px</name></expr>]</index><index>[<expr><name>nxt</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nxtY</name> <operator>==</operator> <name>py</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

    <expr_stmt><expr><name>ty</name> <operator>=</operator> <name>nxtY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>visited</name> <operator>+=</operator> <name>nxtY</name> <operator>-</operator> <name>py</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>py</name> <operator>=</operator> <name>nxtY</name></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>


<function><type><name>bool</name></type> <name>move_Y</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>nxt</name> <init>= <expr><call><name>find_lesseq</name><argument_list>(<argument><expr><name><name>obstX</name><index>[<expr><name>px</name></expr>]</index></name></expr></argument>, <argument><expr><name>py</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nxtY</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name>by</name></expr></argument>, <argument><expr><name><name>obstX</name><index>[<expr><name>px</name></expr>]</index><index>[<expr><name>nxt</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// printf("nxtY = %d\n", nxtY);</comment>
    <if>if <condition>(<expr><name>nxtY</name> <operator>==</operator> <name>py</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

    <expr_stmt><expr><name>by</name> <operator>=</operator> <name>nxtY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>visited</name> <operator>+=</operator> <name>py</name> <operator>-</operator> <name>nxtY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>py</name> <operator>=</operator> <name>nxtY</name></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>moveX</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>nxt</name> <init>= <expr><call><name>find_lesseq</name><argument_list>(<argument><expr><name><name>obstY</name><index>[<expr><name>py</name></expr>]</index></name></expr></argument>, <argument><expr><name>px</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nxtX</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name><name>obstY</name><index>[<expr><name>py</name></expr>]</index><index>[<expr><name>nxt</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nxtX</name> <operator>==</operator> <name>px</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

    <expr_stmt><expr><name>tx</name> <operator>=</operator> <name>nxtX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>visited</name> <operator>+=</operator> <name>nxtX</name> <operator>-</operator> <name>px</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>px</name> <operator>=</operator> <name>nxtX</name></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>


<function><type><name>bool</name></type> <name>move_X</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>nxt</name> <init>= <expr><call><name>find_lesseq</name><argument_list>(<argument><expr><name><name>obstY</name><index>[<expr><name>py</name></expr>]</index></name></expr></argument>, <argument><expr><name>px</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nxtX</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name>bx</name></expr></argument>, <argument><expr><name><name>obstY</name><index>[<expr><name>py</name></expr>]</index><index>[<expr><name>nxt</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// printf("nxtX = %d\n", nxtX);</comment>
    <if>if <condition>(<expr><name>nxtX</name> <operator>==</operator> <name>px</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

    <expr_stmt><expr><name>bx</name> <operator>=</operator> <name>nxtX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>visited</name> <operator>+=</operator> <name>px</name> <operator>-</operator> <name>nxtX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>px</name> <operator>=</operator> <name>nxtX</name></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>X</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>obstX</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>Y</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>obstY</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>obstX</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>obstY</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>X</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>obstX</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>Y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>obstX</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>obstX</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>Y</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>obstY</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>X</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>obstY</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>obstY</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><name>visited</name> <operator>=</operator> <name>px</name> <operator>=</operator> <name>py</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>bx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>by</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>tx</name> <operator>=</operator> <name>X</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ty</name> <operator>=</operator> <name>Y</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>moveY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// printf("%d %d\n", px, py);</comment>

    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name>moveX</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        <comment type="line">// printf("%d %d\n", px, py);</comment>
        <if>if <condition>(<expr><operator>!</operator><call><name>move_Y</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        <comment type="line">// printf("%d %d\n", px, py);</comment>
        <if>if <condition>(<expr><operator>!</operator><call><name>move_X</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        <comment type="line">// printf("%d %d\n", px, py);</comment>
        <if>if <condition>(<expr><operator>!</operator><call><name>moveY</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        <comment type="line">// printf("%d %d\n", px, py);</comment>
    }</block></while>
}</block></function>
</unit>
