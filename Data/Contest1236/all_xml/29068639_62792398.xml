<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29068639_62792398.cpp"><cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>FILE</name></cpp:macro></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>poww</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter> )</parameter_list><block>{
    <comment type="line">//cout &lt;&lt; a &lt;&lt; ' '&lt;&lt; b &lt;&lt; endl;</comment>
    <if>if<condition>( <expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if<condition>( <expr><name>a</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>poww</name><argument_list>( <argument><expr><name>a</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>b</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><name>x</name><operator>*</operator><literal type="number">1ll</literal><operator>*</operator><name>x</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
    }</block></then><else>else<block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>poww</name><argument_list>( <argument><expr><name>a</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>b</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><operator>(</operator><literal type="number">1ll</literal><operator>*</operator><name>x</name><operator>*</operator><name>b</name><operator>)</operator><operator>%</operator><name>mod</name><operator>*</operator><name>x</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
    }</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>FILEs</name></cpp:ifdef>
        <expr_stmt><expr><call><name>freopen</name><argument_list>( <argument><expr><literal type="string">"ANSWER.IN"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freopen</name><argument_list>( <argument><expr><literal type="string">"ANSWER.OUT"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// FILE</comment>

    <cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>FILEs</name></cpp:ifdef>
        <expr_stmt><expr><call><name>freopen</name><argument_list>( <argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freopen</name><argument_list>( <argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// FILE</comment>
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>( <argument><expr><literal type="boolean">false</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>poww</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>(</operator> <call><name>poww</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


</unit>
