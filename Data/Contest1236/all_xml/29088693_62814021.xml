<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29088693_62814021.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">100050</literal></expr></init></decl>;</decl_stmt>
<struct>struct <name>point</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<constructor><name>point</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list><member_init_list>:<call><name>x</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call>,<call><name>y</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></member_init_list><block>{}</block></constructor>
</public>}</block>;</struct>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>p1</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>p2</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>point</name></type> <name><name>p</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>_p</name><index>[<expr><name>maxn</name><operator>*</operator><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>tot</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>cmp1</name><parameter_list>(<parameter><decl><type><name>point</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>point</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><name><name>a</name><operator>.</operator><name>x</name></name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>x</name></name><operator>||</operator><name><name>a</name><operator>.</operator><name>x</name></name><operator>==</operator><name><name>b</name><operator>.</operator><name>x</name></name><operator>&amp;&amp;</operator><name><name>a</name><operator>.</operator><name>y</name></name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>y</name></name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>cmp2</name><parameter_list>(<parameter><decl><type><name>point</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>point</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><name><name>a</name><operator>.</operator><name>y</name></name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>y</name></name><operator>||</operator><name><name>a</name><operator>.</operator><name>y</name></name><operator>==</operator><name><name>b</name><operator>.</operator><name>y</name></name><operator>&amp;&amp;</operator><name><name>a</name><operator>.</operator><name>x</name></name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>x</name></name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name><operator>+</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>cmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>	<block type="pseudo"><expr_stmt><expr><name><name>p1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>	<block type="pseudo"><expr_stmt><expr><name><name>p1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>	<block type="pseudo"><expr_stmt><expr><name><name>p1</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>	<block type="pseudo"><expr_stmt><expr><name><name>p1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>	<block type="pseudo"><expr_stmt><expr><name><name>p1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name><operator>+</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>cmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>	<block type="pseudo"><expr_stmt><expr><name><name>p2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>	<block type="pseudo"><expr_stmt><expr><name><name>p2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>	<block type="pseudo"><expr_stmt><expr><name><name>p2</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>	<block type="pseudo"><expr_stmt><expr><name><name>p2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>	<block type="pseudo"><expr_stmt><expr><name><name>p2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>ll</name></type> <name>sum</name><init>=<expr><operator>(</operator><name>ll</name><operator>)</operator><name>n</name><operator>*</operator><name>m</name><operator>-</operator><name>k</name></expr></init></decl>,<decl><type ref="prev"/><name>last</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>u</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>d</name><init>=<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>flag</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x0</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>y0</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>nx</name><init>=<expr><name>x0</name></expr></init></decl>,<decl><type ref="prev"/><name>ny</name><init>=<expr><name>y0</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>flag</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>ny</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><operator>*</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>p1</name><index>[<expr><name>x0</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>p1</name><index>[<expr><name>x0</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name><operator>+=</operator><name>ny</name><operator>-</operator><name>y0</name></expr>;</expr_stmt><expr_stmt><expr><name>y0</name><operator>=</operator><name>ny</name></expr>;</expr_stmt><expr_stmt><expr><name>u</name><operator>=</operator><name>x0</name></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name>flag</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>nx</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><operator>*</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>p2</name><index>[<expr><name>y0</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>p2</name><index>[<expr><name>y0</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name><operator>+=</operator><name>nx</name><operator>-</operator><name>x0</name></expr>;</expr_stmt><expr_stmt><expr><name>x0</name><operator>=</operator><name>nx</name></expr>;</expr_stmt><expr_stmt><expr><name>r</name><operator>=</operator><name>y0</name></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name>flag</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>ny</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><operator>*</operator><operator>(</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>p1</name><index>[<expr><name>x0</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>p1</name><index>[<expr><name>x0</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>y0</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name><operator>+=</operator><name>y0</name><operator>-</operator><name>ny</name></expr>;</expr_stmt><expr_stmt><expr><name>y0</name><operator>=</operator><name>ny</name></expr>;</expr_stmt><expr_stmt><expr><name>d</name><operator>=</operator><name>x0</name></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name>flag</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>nx</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><operator>*</operator><operator>(</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>p2</name><index>[<expr><name>y0</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>p2</name><index>[<expr><name>y0</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>x0</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name><operator>+=</operator><name>x0</name><operator>-</operator><name>nx</name></expr>;</expr_stmt><expr_stmt><expr><name>x0</name><operator>=</operator><name>nx</name></expr>;</expr_stmt><expr_stmt><expr><name>l</name><operator>=</operator><name>y0</name></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
		<if>if<condition>(<expr><name>res</name><operator>==</operator><name>last</name></expr>)</condition><then>	<block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><name>flag</name><operator>=</operator><name>flag</name><operator>%</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>last</name><operator>=</operator><name>res</name></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>,<argument><expr><ternary><condition><expr><name>sum</name><operator>==</operator><name>res</name></expr>?</condition><then><expr><literal type="string">"YES"</literal></expr></then><else>:<expr><literal type="string">"NO"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
