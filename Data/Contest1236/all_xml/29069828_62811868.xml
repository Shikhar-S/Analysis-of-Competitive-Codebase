<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29069828_62811868.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>, <parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (auto i = j; i &lt;= k; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>, <parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (auto i = j; i &gt;= k; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxC</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mn</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>obs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>inX</name><index>[<expr><name>mn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>inY</name><index>[<expr><name>mn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>setup</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>k</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>obs</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>inX</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>inY</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
}</block></function>

<function><type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>minX</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxX</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>minY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxY</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>newX</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>newY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>remain</name> <init>= <expr><literal type="number">1ll</literal> <operator>*</operator> <name>n</name> <operator>*</operator> <name>m</name> <operator>-</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>turned</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><name>start</name></expr></init></decl>;</init><condition>;</condition> <incr><expr><name>dir</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>dir</name> <operator>==</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>dir</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></incr>)</control>
    <block>{
        <if>if <condition>(<expr><name>turned</name></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>newX</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <name>newY</name></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        }</block></then></if>
        <expr_stmt><expr><name>turned</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>remain</name> <operator>-=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>newX</name> <operator>-</operator> <name>x</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name>newY</name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>!</operator><name>remain</name></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name>newX</name></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <name>newY</name></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>inX</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>inX</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>it</name> <operator>==</operator> <name><name>inX</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>newY</name> <operator>=</operator> <name>maxY</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>minX</name><operator>++</operator></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>toY</name> <init>= <expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>toY</name> <operator>&gt;</operator> <name>maxY</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>newY</name> <operator>=</operator> <name>maxY</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>minX</name><operator>++</operator></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <macro><name>FOR</name><argument_list>(<argument>_x</argument>, <argument>minX</argument>, <argument>maxX</argument>)</argument_list></macro>
            <macro><name>FOR</name><argument_list>(<argument>_y</argument>, <argument>toY</argument>, <argument>maxY</argument>)</argument_list></macro>
            <if>if <condition>(<expr><operator>!</operator><call><name><name>obs</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>_x</name></expr></argument>, <argument><expr><name>_y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
            <expr_stmt><expr><name>newY</name> <operator>=</operator> <name>maxY</name> <operator>=</operator> <name>toY</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>minX</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>inY</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>inY</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>it</name> <operator>==</operator> <name><name>inY</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>newX</name> <operator>=</operator> <name>maxX</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>maxY</name><operator>--</operator></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>toX</name> <init>= <expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>toX</name> <operator>&gt;</operator> <name>maxX</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>newX</name> <operator>=</operator> <name>maxX</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>maxY</name><operator>--</operator></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <macro><name>FOR</name><argument_list>(<argument>_x</argument>, <argument>toX</argument>, <argument>maxX</argument>)</argument_list></macro>
            <macro><name>FOR</name><argument_list>(<argument>_y</argument>, <argument>minY</argument>, <argument>maxY</argument>)</argument_list></macro>
            <if>if <condition>(<expr><operator>!</operator><call><name><name>obs</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>_x</name></expr></argument>, <argument><expr><name>_y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
            <expr_stmt><expr><name>newX</name> <operator>=</operator> <name>maxX</name> <operator>=</operator> <name>toX</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>maxY</name><operator>--</operator></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>inX</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>inX</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>it</name> <operator>==</operator> <name><name>inX</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>newY</name> <operator>=</operator> <name>minY</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>maxX</name><operator>--</operator></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>toY</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>--</operator><name>it</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>toY</name> <operator>&lt;</operator> <name>minY</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>newY</name> <operator>=</operator> <name>minY</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>maxX</name><operator>--</operator></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <macro><name>FOR</name><argument_list>(<argument>_x</argument>, <argument>minX</argument>, <argument>maxX</argument>)</argument_list></macro>
            <macro><name>FOR</name><argument_list>(<argument>_y</argument>, <argument>minY</argument>, <argument>toY</argument>)</argument_list></macro>
            <if>if <condition>(<expr><operator>!</operator><call><name><name>obs</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>_x</name></expr></argument>, <argument><expr><name>_y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
            <expr_stmt><expr><name>newY</name> <operator>=</operator> <name>minY</name> <operator>=</operator> <name>toY</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>maxX</name><operator>--</operator></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>inY</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>inY</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>it</name> <operator>==</operator> <name><name>inY</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>newX</name> <operator>=</operator> <name>minX</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>minY</name><operator>++</operator></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>toX</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>--</operator><name>it</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>toX</name> <operator>&lt;</operator> <name>minX</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>newX</name> <operator>=</operator> <name>minX</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>minY</name><operator>++</operator></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <macro><name>FOR</name><argument_list>(<argument>_x</argument>, <argument>minX</argument>, <argument>toX</argument>)</argument_list></macro>
            <macro><name>FOR</name><argument_list>(<argument>_y</argument>, <argument>minY</argument>, <argument>maxY</argument>)</argument_list></macro>
            <if>if <condition>(<expr><operator>!</operator><call><name><name>obs</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>_x</name></expr></argument>, <argument><expr><name>_y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
            <expr_stmt><expr><name>newX</name> <operator>=</operator> <name>minX</name> <operator>=</operator> <name>toX</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>minY</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>xuly</name><parameter_list>()</parameter_list>
<block>{
    <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>inX</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>inX</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>m</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>inY</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>inY</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>check</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal></expr>;</expr_stmt></block></then>
    <elseif>else <if>if <condition>(<expr><call><name>check</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal></expr>;</expr_stmt></block></then></if></elseif>
    <else>else 
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr>;</expr_stmt></block></else></if>
}</block></function>

<function><name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>iostream</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>xuly</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
