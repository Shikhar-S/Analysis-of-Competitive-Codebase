<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29051597_62812160.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>((int)1e5+20)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD</name></cpp:macro> <cpp:value>((int)1e9+7)</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>


<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>r</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>c</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>get_next</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1e9</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>ny</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>ny</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ny</name> <operator>&lt;</operator> <call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name><name>v</name><index>[<expr><name>ny</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
    }</block></then></if>
    <return>return <expr><literal type="number">1e9</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>get_prev</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>ny</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ny</name><operator>--</operator></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ny</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ny</name> <operator>&lt;</operator> <call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name><name>v</name><index>[<expr><name>ny</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
    }</block></then></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>xt</name></decl>, <decl><type ref="prev"/><name>yt</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>xt</name> <operator>&gt;&gt;</operator> <name>yt</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><index>[<expr><name>xt</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>yt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><index>[<expr><name>yt</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>xt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">100000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mxy</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mxx</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mny</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mnx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>sum</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>p</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">400000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>yy</name> <init>= <expr><call><name>get_next</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>yy</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>mxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>yy</name> <operator>-</operator> <name>y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>yy</name> <operator>-</operator> <name>y</name></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>y</name> <operator>=</operator> <name>yy</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>mnx</name> <operator>=</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>xx</name> <init>= <expr><call><name>get_next</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>xx</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><name>mxx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>xx</name> <operator>-</operator> <name>x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>xx</name> <operator>-</operator> <name>x</name></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <name>xx</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>mxy</name> <operator>=</operator> <name>y</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>yy</name> <init>= <expr><call><name>get_prev</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>yy</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>mny</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>y</name> <operator>-</operator> <name>yy</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>y</name> <operator>-</operator> <name>yy</name></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>y</name> <operator>=</operator> <name>yy</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>mxx</name> <operator>=</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>xx</name> <init>= <expr><call><name>get_prev</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>xx</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><name>mnx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>x</name> <operator>-</operator> <name>xx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>x</name> <operator>-</operator> <name>xx</name></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <name>xx</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>mny</name> <operator>=</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>dir</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>dir</name> <operator>%=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>p</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
        <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <if>if <condition>(<expr><name>sum</name> <operator>+</operator> <name>k</name> <operator>==</operator> <literal type="number">1LL</literal> <operator>*</operator> <name>n</name> <operator>*</operator> <name>m</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
