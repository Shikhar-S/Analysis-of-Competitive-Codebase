<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29056361_62812050.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIM</name></cpp:macro> <cpp:value>300009</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>((long long)1e18+9ll)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pairll</name></cpp:macro> <cpp:value>pair&lt;long long,long long&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>amen</name></cpp:macro> <cpp:value>exit(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODULO</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>rx</name></decl>,<decl><type ref="prev"/><name>lx</name></decl>,<decl><type ref="prev"/><name>ry</name></decl>,<decl><type ref="prev"/><name>ly</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type><name><name>r</name><index>[<expr><name>DIM</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><name>DIM</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>long</name> <name>long</name></type> <name>findleft</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>num</name></decl></parameter>,<parameter><decl><type><name>char</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>t</name><operator>==</operator><literal type="char">'r'</literal></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><name><name>r</name><index>[<expr><name>num</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
		<return>return <expr><operator>*</operator><name>it</name></expr>;</return>
	}</block></then>
	<else>else<block>{
		<decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><name><name>c</name><index>[<expr><name>num</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
		<return>return <expr><operator>*</operator><name>it</name></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>findright</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>num</name></decl></parameter>,<parameter><decl><type><name>char</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>t</name><operator>==</operator><literal type="char">'r'</literal></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><name><name>r</name><index>[<expr><name>num</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><operator>*</operator><name>it</name></expr>;</return>
	}</block></then>
	<else>else<block>{
		<decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><name><name>c</name><index>[<expr><name>num</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><operator>*</operator><name>it</name></expr>;</return>
	}</block></else></if>
}</block></function>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
 
	<expr_stmt><expr><name>fast</name></expr>;</expr_stmt> 

	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>

	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

	<expr_stmt><expr><name>lx</name><operator>=</operator><name>ly</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>rx</name><operator>=</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ry</name><operator>=</operator><name>m</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>cnt</name><operator>=</operator><name>n</name><operator>*</operator><name>m</name><operator>-</operator><name>k</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>xx</name></decl>,<decl><type ref="prev"/><name>yy</name></decl>;</decl_stmt>

	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>xx</name><operator>&gt;&gt;</operator><name>yy</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><index>[<expr><name>xx</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>c</name><index>[<expr><name>yy</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>xx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<expr_stmt><expr><name>k</name><operator>=</operator><call><name>findright</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>k</name><operator>-</operator><literal type="number">1</literal><operator>==</operator><name>cnt</name></expr>)</condition><then><block type="pseudo"><return>return <expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>

	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>x</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>curr</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>cnt</name><operator>--</operator></expr>;</expr_stmt>

	<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{
		<if>if<condition>(<expr><name>curr</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>k</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>ry</name></expr></argument>,<argument><expr><call><name>findright</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cnt</name><operator>-=</operator><name>k</name><operator>-</operator><name>y</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>k</name><operator>==</operator><name>y</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name>lx</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>y</name><operator>=</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>curr</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>k</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>rx</name></expr></argument>,<argument><expr><call><name>findright</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cnt</name><operator>-=</operator><name>k</name><operator>-</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>k</name><operator>==</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name>ry</name><operator>=</operator><name>y</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name><operator>=</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>curr</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>k</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>ly</name></expr></argument>,<argument><expr><call><name>findleft</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cnt</name><operator>-=</operator><name>y</name><operator>-</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>k</name><operator>==</operator><name>y</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name>y</name><operator>=</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>rx</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>curr</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>k</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>lx</name></expr></argument>,<argument><expr><call><name>findleft</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cnt</name><operator>-=</operator><name>x</name><operator>-</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>k</name><operator>==</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name>x</name><operator>=</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>ly</name><operator>=</operator><name>y</name></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line">//cout&lt;&lt;"A"&lt;&lt;' '&lt;&lt;x&lt;&lt;' '&lt;&lt;y&lt;&lt;endl;</comment>
		<expr_stmt><expr><name>curr</name><operator>++</operator></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>curr</name><operator>&gt;</operator><literal type="number">4</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>curr</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
	}</block></while>

	<comment type="line">//cout&lt;&lt;cnt&lt;&lt;endl;</comment>

	<if>if<condition>(<expr><name>cnt</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>

	<expr_stmt><expr><name>amen</name></expr>;</expr_stmt>
}</block></function></unit>
