<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29073605_62785160.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>double</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kek</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector&lt; int &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(), v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt; int, int &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vvi</name></cpp:macro> <cpp:value>vector&lt; vector&lt; int &gt; &gt;</cpp:value></cpp:define>
<comment type="line">//kek</comment>
<function><template>template<parameter_list>&lt; <parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter> &gt;</parameter_list></template>
<type><name>bool</name></type> <name>mini</name><parameter_list>(<parameter><decl><type><name>A</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>B</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <name>x</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></then></if>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>

<function><template>template<parameter_list>&lt; <parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter> &gt;</parameter_list></template>
<type><name>bool</name></type> <name>maxi</name><parameter_list>(<parameter><decl><type><name>A</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>B</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name>x</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></then></if>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">1e12</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ninf</name> <init>= <expr><operator>-</operator><literal type="number">1e12</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vi</name></type> <name>primes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vi</name></type> <name>ld</name></decl>;</decl_stmt>
<comment type="line">//vi ans;</comment>
<comment type="line">//</comment>
<comment type="line">//void resh(int n) {</comment>
<comment type="line">//    primes.resize(0);</comment>
<comment type="line">//    ld.assign(n + 1, -1);</comment>
<comment type="line">//    ans.assign(n + 1, 0);</comment>
<comment type="line">//    for (int i = 2; i &lt;= n; ++i) {</comment>
<comment type="line">//        if (ld[i] == -1) {</comment>
<comment type="line">//            ld[i] = i;</comment>
<comment type="line">//            primes.kek(i);</comment>
<comment type="line">//        }</comment>
<comment type="line">//        ans[i] = primes.size();</comment>
<comment type="line">//        for (auto p : primes) {</comment>
<comment type="line">//            if (p &gt; ld[i] || p * i &gt; n) {</comment>
<comment type="line">//                break;</comment>
<comment type="line">//            }</comment>
<comment type="line">//            ld[p * i] = p;</comment>
<comment type="line">//        }</comment>
<comment type="line">//    }</comment>
<comment type="line">//    return;</comment>
<comment type="line">//}</comment>

<function><type><name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><ternary><condition><expr><name>b</name></expr> ?</condition><then> <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>a</name></expr></else></ternary></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><name>b</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>xl</name></decl>, <decl><type ref="prev"/><name>yl</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name> <operator>%</operator> <name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>xl</name></expr></argument>, <argument><expr><name>yl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <name>yl</name> <operator>-</operator> <operator>(</operator><name>b</name> <operator>/</operator> <name>a</name><operator>)</operator> <operator>*</operator> <name>xl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <name>xl</name></expr>;</expr_stmt>
    <return>return <expr><name>d</name></expr>;</return>
}</block></function>

<comment type="line">//vector&lt; int &gt; tree;</comment>

<comment type="line">//void update(int v, int ind, int nv, int ql, int qr) {</comment>
<comment type="line">//    if (ql + 1 == qr) {</comment>
<comment type="line">//        tree[v] = nv;</comment>
<comment type="line">//        return;</comment>
<comment type="line">//    }</comment>
<comment type="line">//    int qm = (ql + qr) / 2;</comment>
<comment type="line">//    if (ind &lt; qm) {</comment>
<comment type="line">//        update(2 * v + 1, ind, nv, ql, qm);</comment>
<comment type="line">//    } else {</comment>
<comment type="line">//        update(2 * v + 2, ind, nv, qm, qr);</comment>
<comment type="line">//    }</comment>
<comment type="line">//    tree[v] = tree[2 * v + 1] + tree[2 * v + 2];</comment>
<comment type="line">//    return;</comment>
<comment type="line">//}</comment>
<comment type="line">//</comment>
<comment type="line">//int query(int v, int l, int r, int ql, int qr) {</comment>
<comment type="line">//    if ((qr &lt;= l) || (ql &gt;= r)) {</comment>
<comment type="line">//        return 0;</comment>
<comment type="line">//    }</comment>
<comment type="line">//    if ((ql == l) &amp;&amp; (qr == r)) {</comment>
<comment type="line">//        return tree[v];</comment>
<comment type="line">//    }</comment>
<comment type="line">//    int m = (l + r) / 2;</comment>
<comment type="line">//    return query(v * 2 + 1, l, m, ql, min(qr, m)) + query(2 * v + 2, m, r, max(ql, m), qr);</comment>
<comment type="line">//}</comment>

<decl_stmt><decl><type><name>vi</name></type> <name>dist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vi</name></type> <name>p</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dijkstra</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>pii</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type><name>gr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt; <argument><expr><name>pii</name></expr></argument> &gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>char</name></expr></argument> &gt;</argument_list></name></type> <name>used</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>used</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dist</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>used</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block>{
            <continue>continue;</continue>
        }</block></then></if>
        <expr_stmt><expr><name><name>used</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name><name>gr</name><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>to</name> <init>= <expr><name><name>x</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>x</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>mini</name><argument_list>(<argument><expr><name><name>dist</name><index>[<expr><name>to</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dist</name><index>[<expr><name>v</name></expr>]</index></name> <operator>+</operator> <name>d</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>p</name><index>[<expr><name>to</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><block>{<expr><operator>-</operator><name><name>dist</name><index>[<expr><name>to</name></expr>]</index></name></expr>, <expr><name>to</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></while>
    <return>return;</return>
}</block></function>

<function><type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>c</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <name>b</name> <operator>-</operator> <call><name>min</name><argument_list>(<argument><expr><name>c</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name>b</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>res</name> <operator>*</operator> <literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    <return>return;</return>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
<comment type="line">//    #ifdef ONLINE_JUDGE</comment>
<comment type="line">//        freopen("dinner.in", "r", stdin);</comment>
<comment type="line">//        freopen("dinner.out", "w", stdout);</comment>
<comment type="line">//    #endif</comment>
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>que</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>que</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>que</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
