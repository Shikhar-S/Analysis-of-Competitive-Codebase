<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29063816_62791238.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Zeroes</name></cpp:macro> <cpp:value>ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Auto</name></cpp:macro> <cpp:value>int main()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Accepted</name></cpp:macro> <cpp:value>{return 0;}</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>Max</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>ll</name></type> <name>powMod</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{
    <if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1</literal><operator>%</operator><name>m</name></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>a</name><operator>%</operator><name>m</name></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>t</name> <init>= <expr><call><name>powMod</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>m</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>*</operator> <name>t</name><operator>)</operator> <operator>%</operator> <name>m</name></expr>;</expr_stmt>

    <if>if<condition>(<expr><name>n</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>*</operator> <name>a</name><operator>)</operator> <operator>%</operator> <name>m</name></expr>;</expr_stmt></block></then></if>

    <return>return <expr><name>t</name><operator>%</operator><name>m</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<macro><name>Auto</name></macro> <block>{
    <decl_stmt><decl><type><name>Zeroes</name></type>
    <name>cin</name> &gt;&gt; <name>n</name> &gt;&gt; <name>m</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><call><name>powMod</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>MOD</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><call><name>powMod</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>MOD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>Accepted</name></expr></expr_stmt>
}</block>
</unit>
