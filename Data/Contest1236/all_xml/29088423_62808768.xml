<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29088423_62808768.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.14159265</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast</name></cpp:macro> <cpp:value>ios::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)</cpp:value></cpp:define>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pli</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ld</name></expr></argument>,<argument><expr><name>ld</name></expr></argument>&gt;</argument_list></name></type> <name>pld</name>;</typedef>

<decl_stmt><decl><type><name>ll</name></type> <name>MOD</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>base</name><init>=<expr><literal type="number">29</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>MX</name><init>=<expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ld</name></type> <name>pi</name><init>=<expr><literal type="number">3.1415926535</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>INF</name><init>=<expr><literal type="number">400000000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>posrow</name><index>[<expr><literal type="number">100100</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>negrow</name><index>[<expr><literal type="number">100100</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>poscol</name><index>[<expr><literal type="number">100100</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>negcol</name><index>[<expr><literal type="number">100100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>fir</name><index>[<expr><literal type="number">100100</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>fast</name></expr>;</expr_stmt>
    <comment type="line">//freopen("input.txt","r",stdin);</comment>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>y</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>fir</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>posrow</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>poscol</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>negrow</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><operator>-</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>negcol</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><operator>-</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>pos</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>temp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>px1</name></decl>,<decl><type ref="prev"/><name>pxn</name></decl>,<decl><type ref="prev"/><name>py1</name></decl>,<decl><type ref="prev"/><name>pym</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>px1</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>pxn</name><operator>=</operator><name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>py1</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>pym</name><operator>=</operator><name>m</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{
        <comment type="line">//cout&lt;&lt;i&lt;&lt;" "&lt;&lt;j&lt;&lt;" "&lt;&lt;pos&lt;&lt;endl;</comment>
        <if>if<condition>(<expr><name>pos</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name><name>posrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>==</operator><name><name>posrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>temp</name><operator>=</operator><name>pym</name></expr>;</expr_stmt>
            }</block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>temp</name><operator>=</operator><operator>(</operator><operator>*</operator><name><name>posrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
            <expr_stmt><expr><name>temp</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>temp</name></expr></argument>,<argument><expr><name>pym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>pym</name><operator>=</operator><name>temp</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>res</name><operator>+=</operator><call><name>abs</name><argument_list>(<argument><expr><name>temp</name><operator>-</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>temp</name><operator>==</operator><name>j</name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>j</name><operator>=</operator><name>temp</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name>pos</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name><name>poscol</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>==</operator><name><name>poscol</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>temp</name><operator>=</operator><name>pxn</name></expr>;</expr_stmt>
            }</block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>temp</name><operator>=</operator><operator>(</operator><operator>*</operator><name><name>poscol</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
            <expr_stmt><expr><name>temp</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>temp</name></expr></argument>,<argument><expr><name>pxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>pxn</name><operator>=</operator><name>temp</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>res</name><operator>+=</operator><call><name>abs</name><argument_list>(<argument><expr><name>temp</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>temp</name><operator>==</operator><name>i</name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>i</name><operator>=</operator><name>temp</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name>pos</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name><name>negrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><operator>-</operator><name>j</name></expr></argument>)</argument_list></call><operator>==</operator><name><name>negrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then>
             <block>{
                 <expr_stmt><expr><name>temp</name><operator>=</operator><name>py1</name></expr>;</expr_stmt>
             }</block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>temp</name><operator>=</operator><operator>-</operator><operator>(</operator><operator>*</operator><name><name>negrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><operator>-</operator><name>j</name></expr></argument>)</argument_list></call><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
            <expr_stmt><expr><name>temp</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>py1</name></expr></argument>,<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>py1</name><operator>=</operator><name>temp</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>res</name><operator>+=</operator><call><name>abs</name><argument_list>(<argument><expr><name>temp</name><operator>-</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>temp</name><operator>==</operator><name>j</name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>j</name><operator>=</operator><name>temp</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name>pos</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name><name>negcol</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><operator>-</operator><name>i</name></expr></argument>)</argument_list></call><operator>==</operator><name><name>negcol</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>temp</name><operator>=</operator><name>px1</name></expr>;</expr_stmt>
            }</block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>temp</name><operator>=</operator><operator>-</operator><operator>(</operator><operator>*</operator><name><name>negcol</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><operator>-</operator><name>i</name></expr></argument>)</argument_list></call><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
            <expr_stmt><expr><name>temp</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>px1</name></expr></argument>,<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>px1</name><operator>=</operator><name>temp</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>res</name><operator>+=</operator><call><name>abs</name><argument_list>(<argument><expr><name>temp</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>temp</name><operator>==</operator><name>i</name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>i</name><operator>=</operator><name>temp</name></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="line">//cout&lt;&lt;res&lt;&lt;endl;</comment>
        <expr_stmt><expr><name>pos</name><operator>%=</operator><literal type="number">4</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
    }</block></while>
    <if>if<condition>(<expr><name>res</name><operator>!=</operator><name>n</name><operator>*</operator><name>m</name><operator>-</operator><name>k</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>fir</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>ans</name><operator>=</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <if>if<condition>(<expr><name>ans</name><operator>==</operator><name>n</name><operator>*</operator><name>m</name><operator>-</operator><name>k</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><name>n</name><operator>*</operator><name>m</name><operator>-</operator><name>k</name></expr>;</expr_stmt></block></then></if>
    }</block></then></if>
    <comment type="line">//cout&lt;&lt;res&lt;&lt;endl;</comment>
    <if>if<condition>(<expr><name>res</name><operator>==</operator><name>n</name><operator>*</operator><name>m</name><operator>-</operator><name>k</name><operator>||</operator><name>k</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal></expr>;</expr_stmt></block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal></expr>;</expr_stmt></block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
