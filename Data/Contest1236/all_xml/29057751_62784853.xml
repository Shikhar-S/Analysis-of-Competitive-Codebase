<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29057751_62784853.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>LD</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>PII</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>LL</name></expr></argument>, <argument><expr><name>LL</name></expr></argument> &gt;</argument_list></name></type> <name>PLL</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>LD</name></expr></argument>, <argument><expr><name>LD</name></expr></argument> &gt;</argument_list></name></type> <name>PDD</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>MOD</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAX</name><init>=<expr><literal type="number">100000009</literal></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//ios_base::sync_with_stdio(false);</comment>
    <comment type="line">//cin.tie(nullptr);</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>ta</name></decl>,<decl><type ref="prev"/><name>tb</name></decl>,<decl><type ref="prev"/><name>tc</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ta</name><operator>=</operator><name>a</name></expr><operator>,</operator><expr><name>tb</name><operator>=</operator><name>b</name></expr><operator>,</operator><expr><name>tc</name><operator>=</operator><name>c</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ans1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>ans2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>ta</name><operator>&gt;</operator><literal type="number">0</literal><operator>&amp;&amp;</operator> <name>tb</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition>
        <block>{
            <expr_stmt><expr><name>ans1</name><operator>+=</operator><literal type="number">3</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>ta</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>tb</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
        }</block></while>
        <while>while<condition>(<expr><name>tb</name><operator>&gt;</operator><literal type="number">0</literal><operator>&amp;&amp;</operator> <name>tc</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition>
        <block>{
            <expr_stmt><expr><name>ans1</name><operator>+=</operator><literal type="number">3</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>tb</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>tc</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>ta</name><operator>=</operator><name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>tb</name><operator>=</operator><name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>tc</name><operator>=</operator><name>c</name></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>tb</name><operator>&gt;</operator><literal type="number">0</literal><operator>&amp;&amp;</operator> <name>tc</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition>
        <block>{
            <expr_stmt><expr><name>ans2</name><operator>+=</operator><literal type="number">3</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>tb</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>tc</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
        }</block></while>
        <while>while<condition>(<expr><name>ta</name><operator>&gt;</operator><literal type="number">0</literal><operator>&amp;&amp;</operator> <name>tb</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition>
        <block>{
            <expr_stmt><expr><name>ans2</name><operator>+=</operator><literal type="number">3</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>ta</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>tb</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>max</name><argument_list>(<argument><expr><name>ans1</name></expr></argument>,<argument><expr><name>ans2</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
    }</block></while>
}</block></function>
</unit>
