<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29051189_62815093.cpp"><comment type="line">//                             In The Name Of Allah</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>use_fast</name></cpp:macro> <cpp:value>ios::sync_with_stdio(false), cin.tie(0), cout.tie(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ret</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>r1eturn cout &lt;&lt; n, 0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; setprecision(n) &lt;&lt; fixed</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using> 
 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">2e5</literal> <operator>+</operator> <literal type="number">1000</literal></expr></init></decl>, <decl><type ref="prev"/><name>OO</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>, <decl><type ref="prev"/><name>M</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>, <decl><type ref="prev"/><name>P</name> <init>= <expr><literal type="number">6151</literal></expr></init></decl>, <decl><type ref="prev"/><name>sq</name> <init>= <expr><literal type="number">1e3</literal></expr></init></decl>, <decl><type ref="prev"/><name>lg</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>

<decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>x</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>y</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>vx</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>vy</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name>use_fast</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mp</name><index>[<expr><block>{<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vx</name><index>[<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vy</name><index>[<expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>vx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>vx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>vy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>vy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>n1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>n2</name> <init>= <expr><name>n</name></expr></init></decl>, <decl><type ref="prev"/><name>m1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>m2</name> <init>= <expr><name>m</name></expr></init></decl>, <decl><type ref="prev"/><name>t</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>n1</name> <operator>&lt;=</operator> <name>n2</name> <operator>&amp;&amp;</operator> <name>m1</name> <operator>&lt;=</operator> <name>m2</name></expr>)</condition> <block>{
		<if>if<condition>(<expr><name>t</name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>m3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>m2</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>m1</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
				<if>if<condition>(<expr><name><name>mp</name><index>[<expr><block>{<expr><name>n1</name></expr>, <expr><name>i</name></expr>}</block></expr>]</index></name></expr>)</condition><then>
					<block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><name>m3</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<break>break;</break>
			}</block></for>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>m3</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>n1</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n2</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> 
					<block type="pseudo"><if>if<condition>(<expr><name><name>mp</name><index>[<expr><block>{<expr><name>j</name></expr>, <expr><name>i</name></expr>}</block></expr>]</index></name> <operator>!=</operator> <literal type="boolean">true</literal></expr>)</condition><then>
						<block type="pseudo"><return>return <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for></block></for>
			<expr_stmt><expr><name>m2</name> <operator>=</operator> <name>m3</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>n3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n2</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>n1</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
				<if>if<condition>(<expr><name><name>mp</name><index>[<expr><block>{<expr><name>i</name></expr>, <expr><name>m2</name></expr>}</block></expr>]</index></name></expr>)</condition><then>
					<block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><name>n3</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<break>break;</break>
			}</block></for>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n3</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
				<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>m1</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>m2</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> 
					<block type="pseudo"><if>if<condition>(<expr><name><name>mp</name><index>[<expr><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>}</block></expr>]</index></name> <operator>!=</operator> <literal type="boolean">true</literal></expr>)</condition><then>
						<block type="pseudo"><return>return <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for></block></for>
			<expr_stmt><expr><name>n2</name> <operator>=</operator> <name>n3</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><operator>(</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>vy</name><index>[<expr><name>m2</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>vy</name><index>[<expr><name>m2</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>n2</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>vy</name><index>[<expr><name>m2</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>)</operator> <operator>-</operator> <operator>(</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>vy</name><index>[<expr><name>m2</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>vy</name><index>[<expr><name>m2</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>n1</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>vy</name><index>[<expr><name>m2</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>z</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<return>return <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return>
			}</block></then></if>
			<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>vx</name><index>[<expr><name>n1</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>vx</name><index>[<expr><name>n1</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>m2</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>vx</name><index>[<expr><name>n1</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>)</operator> <operator>-</operator> <operator>(</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>vx</name><index>[<expr><name>n1</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>vx</name><index>[<expr><name>n1</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>m1</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>vx</name><index>[<expr><name>n1</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>z</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block></then></if>
			<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n1</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>m2</name><operator>--</operator></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>mp</name><index>[<expr><block>{<expr><name>n2</name></expr>, <expr><name>m2</name></expr>}</block></expr>]</index></name></expr>)</condition><then> <block>{
				<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n1</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
					<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>m1</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>m2</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>	
						<block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>mp</name><index>[<expr><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>}</block></expr>]</index></name></expr>)</condition><then>
							<block type="pseudo"><return>return <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for></block></for>
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			}</block></then></if>

			<continue>continue;</continue>
		}</block></then>
		<else>else <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>m3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>m1</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<if>if<condition>(<expr><name><name>mp</name><index>[<expr><block>{<expr><name>n2</name></expr>, <expr><name>i</name></expr>}</block></expr>]</index></name></expr>)</condition><then>
					<block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><name>m3</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<break>break;</break>
			}</block></for>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>m1</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m3</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>n1</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n2</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> 
					<block type="pseudo"><if>if<condition>(<expr><name><name>mp</name><index>[<expr><block>{<expr><name>j</name></expr>, <expr><name>i</name></expr>}</block></expr>]</index></name> <operator>!=</operator> <literal type="boolean">true</literal></expr>)</condition><then>
						<block type="pseudo"><return>return <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for></block></for>
			<expr_stmt><expr><name>m1</name> <operator>=</operator> <name>m3</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>n3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n1</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<if>if<condition>(<expr><name><name>mp</name><index>[<expr><block>{<expr><name>i</name></expr>, <expr><name>m3</name></expr>}</block></expr>]</index></name></expr>)</condition><then>
					<block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><name>n3</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<break>break;</break>
			}</block></for>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n1</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n3</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
				<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>m1</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>m2</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> 
					<block type="pseudo"><if>if<condition>(<expr><name><name>mp</name><index>[<expr><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>}</block></expr>]</index></name> <operator>!=</operator> <literal type="boolean">true</literal></expr>)</condition><then>
						<block type="pseudo"><return>return <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for></block></for>
			<expr_stmt><expr><name>n1</name> <operator>=</operator> <name>n3</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><operator>(</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>vy</name><index>[<expr><name>m1</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>vy</name><index>[<expr><name>m1</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>n2</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>vy</name><index>[<expr><name>m1</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>)</operator> <operator>-</operator> <operator>(</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>vy</name><index>[<expr><name>m1</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>vy</name><index>[<expr><name>m1</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>n1</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>vy</name><index>[<expr><name>m1</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>z</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> 
				<block type="pseudo"><return>return <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block></then></if>
			<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>vx</name><index>[<expr><name>n2</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>vx</name><index>[<expr><name>n2</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>m2</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>vx</name><index>[<expr><name>n2</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>)</operator> <operator>-</operator> <operator>(</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>vx</name><index>[<expr><name>n2</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>vx</name><index>[<expr><name>n2</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>m1</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>vx</name><index>[<expr><name>n2</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>z</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block></then></if>
			<expr_stmt><expr><name>n2</name><operator>--</operator></expr><operator>,</operator> <expr><name>m1</name><operator>++</operator></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>mp</name><index>[<expr><block>{<expr><name>n1</name></expr>, <expr><name>m1</name></expr>}</block></expr>]</index></name></expr>)</condition><then> <block>{
				<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n1</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
					<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>m1</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>m2</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>	
						<block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>mp</name><index>[<expr><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>}</block></expr>]</index></name></expr>)</condition><then>
							<block type="pseudo"><return>return <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for></block></for>
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>				
			}</block></then></if>
			<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function> 
<comment type="block">/*
be carefull :
1- if not solve after 20 min, read again twice
2- after submit read the code again
3- fun with contest
4- ... 
*/</comment>
</unit>
