<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29051452_62787960.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include> 
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>     
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<comment type="block">/*
#define pii pair&lt; int, int&gt;
#define ff  first
#define ss  second
#define sort(a)	sort(a.begin(),a.end())
#define rev(a)	reverse(a.begin(),a.end())
#define fo(i,a,b)	for( ll i=a; i&lt;b; i++)
#define Fo(i,a,b)	for( ll i=a; i&lt;=b; i++)
#define rfo(i,a,b)	for( ll i=a; i&gt;b; i--)
#define rFo(i,a,b)	for( ll i=a; i&gt;=b; i--)
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fio</name></cpp:macro>	<cpp:value>ios_base::sync_with_stdio(), cin.tie(0), cout.tie(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ordered_set</name></cpp:macro> <cpp:value>tree&lt;int, null_type,less&lt;int&gt;, rb_tree_tag,tree_order_statistics_node_update&gt;</cpp:value></cpp:define> 

 
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{		
 
	<expr_stmt><expr><name>fio</name></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
		
		<decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>ll</name></type> <name>t</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>b</name> <operator>=</operator> <name>b</name> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>t</name></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><name>t</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t</name></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>t</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t</name></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
	}</block></while>

 
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
