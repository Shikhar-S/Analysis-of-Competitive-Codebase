<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29039720_62809188.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>row</name><index>[<expr><name>n</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>col</name><index>[<expr><name>m</name></expr>]</index></name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>row</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>col</name><index>[<expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>minr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>minc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxr</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxc</name> <init>= <expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cells</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
		<if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><name><name>row</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>maxc</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>it</name> <operator>!=</operator> <name><name>row</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>*</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>cells</name> <operator>+=</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>c</name></expr>;</expr_stmt></block></else></if>
			<expr_stmt><expr><name>minr</name> <operator>=</operator> <name>r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then> <elseif>else <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><name><name>col</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>maxr</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>it</name> <operator>!=</operator> <name><name>col</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>*</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>r</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>cells</name> <operator>+=</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>r</name></expr>;</expr_stmt></block></else></if>
			<expr_stmt><expr><name>maxc</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><name><name>row</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>minc</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>it</name> <operator>!=</operator> <name><name>row</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>--</operator><name>it</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>c</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>cells</name> <operator>+=</operator> <name>c</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>x</name></expr>;</expr_stmt></block></else></if>
			<expr_stmt><expr><name>maxr</name> <operator>=</operator> <name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if></elseif> <else>else <block>{
			<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><name><name>col</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>minr</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>it</name> <operator>!=</operator> <name><name>col</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>--</operator><name>it</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>cells</name> <operator>+=</operator> <name>r</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>x</name></expr>;</expr_stmt></block></else></if>
			<expr_stmt><expr><name>minc</name> <operator>=</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>(</operator><name>dir</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	}</block></while>
	<if>if <condition>(<expr><name>cells</name> <operator>==</operator> <name>n</name> <operator>*</operator> <name>m</name> <operator>-</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	<else>else <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>minr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>minc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxr</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxc</name> <init>= <expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dir</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cells</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
			<if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><name><name>row</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>maxc</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>it</name> <operator>!=</operator> <name><name>row</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>*</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
				<if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>cells</name> <operator>+=</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>c</name></expr>;</expr_stmt></block></else></if>
				<expr_stmt><expr><name>minr</name> <operator>=</operator> <name>r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>c</name> <operator>=</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then> <elseif>else <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><name><name>col</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>maxr</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>it</name> <operator>!=</operator> <name><name>col</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>*</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
				<if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>r</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>cells</name> <operator>+=</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>r</name></expr>;</expr_stmt></block></else></if>
				<expr_stmt><expr><name>maxc</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>r</name> <operator>=</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><name><name>row</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>minc</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>it</name> <operator>!=</operator> <name><name>row</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>--</operator><name>it</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
				<if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>c</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>cells</name> <operator>+=</operator> <name>c</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>x</name></expr>;</expr_stmt></block></else></if>
				<expr_stmt><expr><name>maxr</name> <operator>=</operator> <name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>c</name> <operator>=</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if></elseif> <else>else <block>{
				<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><name><name>col</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>minr</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>it</name> <operator>!=</operator> <name><name>col</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>--</operator><name>it</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
				<if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>cells</name> <operator>+=</operator> <name>r</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>x</name></expr>;</expr_stmt></block></else></if>
				<expr_stmt><expr><name>minc</name> <operator>=</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>r</name> <operator>=</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>(</operator><name>dir</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		}</block></while>
		<if>if <condition>(<expr><name>cells</name> <operator>==</operator> <name>n</name> <operator>*</operator> <name>m</name> <operator>-</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
