<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29065430_62812167.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mk</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>100007</cpp:value></cpp:define> <comment type="line">//10e6 +7</comment>


<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>vm</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>vn</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type><name>has</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>sol</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list><block>{
	<comment type="line">//cout &lt;&lt; a &lt;&lt; " " &lt;&lt; b &lt;&lt; " " &lt;&lt; c &lt;&lt; " " &lt;&lt; d &lt;&lt; endl;</comment>
	<if>if<condition>(<expr><name>a</name><operator>&gt;</operator><name>c</name> <operator>or</operator> <name>d</name><operator>&gt;</operator><name>b</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>pii</name></type> <name>p</name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>vn</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>vn</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name>d</name> <operator>and</operator> <name><name>vn</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>b</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>p</name> <operator>=</operator> <block>{<expr><name>a</name></expr>, <expr><name><name>vn</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block></for>

	<comment type="line">//cout &lt;&lt; "a is " &lt;&lt; a &lt;&lt; endl;</comment>
	<if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>fi</name></name> <operator>==</operator> <name>a</name></expr>)</condition><then><block>{
		<comment type="line">//cout &lt;&lt; "straight" &lt;&lt; endl;</comment>
		<comment type="line">//cout &lt;&lt; "pair is " &lt;&lt; p.fi &lt;&lt; " " &lt;&lt; p.se &lt;&lt; endl;</comment>

		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>a</name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>c</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name><name>p</name><operator>.</operator><name>se</name></name></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name>b</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
				<comment type="line">//cout &lt;&lt; "check " &lt;&lt; i &lt;&lt; " " &lt;&lt; j &lt;&lt; endl;</comment>
				<if>if<condition>(<expr><name><name>has</name><index>[<expr><call><name>mk</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>==</operator><literal type="boolean">false</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
			}</block></for>
		}</block></for>
		<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>se</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></then></if>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>vm</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>vm</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><name>a</name> <operator>and</operator> <name><name>vm</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>c</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>p</name> <operator>=</operator> <block>{<expr><name>b</name></expr>, <expr><name><name>vm</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block></for>

	<comment type="line">//cout &lt;&lt; "b is " &lt;&lt; b &lt;&lt; endl;</comment>
	<if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>fi</name></name> <operator>==</operator> <name>b</name></expr>)</condition><then><block>{
		<comment type="line">//cout &lt;&lt; "down" &lt;&lt; endl;</comment>
		<comment type="line">//cout &lt;&lt; "pair is " &lt;&lt; p.fi &lt;&lt; " " &lt;&lt; p.se &lt;&lt; endl;</comment>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>p</name><operator>.</operator><name>se</name></name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>c</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>d</name></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name>b</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
				<comment type="line">//cout &lt;&lt; "check " &lt;&lt; i &lt;&lt; " " &lt;&lt; j &lt;&lt; endl;</comment>
				<if>if<condition>(<expr><name><name>has</name><index>[<expr><call><name>mk</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>==</operator><literal type="boolean">false</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
			}</block></for>
		}</block></for>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>se</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></then></if>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>vn</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
		<comment type="line">//cout &lt;&lt; "found " &lt;&lt; c &lt;&lt; " " &lt;&lt; vn[c][i] &lt;&lt; endl;</comment>
		<if>if<condition>(<expr><name><name>vn</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name>d</name> <operator>and</operator> <name><name>vn</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name>b</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>p</name> <operator>=</operator> <block>{<expr><name>c</name></expr>, <expr><name><name>vn</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block></for>

	<comment type="line">//cout &lt;&lt; "c is " &lt;&lt; c &lt;&lt; endl;</comment>
	<if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>fi</name></name> <operator>==</operator> <name>c</name></expr>)</condition><then><block>{
		<comment type="line">//cout &lt;&lt; "left" &lt;&lt; endl;</comment>
		<comment type="line">//cout &lt;&lt; "pair is " &lt;&lt; p.fi &lt;&lt; " " &lt;&lt; p.se &lt;&lt; endl;</comment>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>c</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>d</name></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name><name>p</name><operator>.</operator><name>se</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
				<comment type="line">//cout &lt;&lt; "check " &lt;&lt; i &lt;&lt; " " &lt;&lt; j &lt;&lt; endl;</comment>
				<if>if<condition>(<expr><name><name>has</name><index>[<expr><call><name>mk</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>==</operator><literal type="boolean">false</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
			}</block></for>
		}</block></for>
		<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>se</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></then></if>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>vm</name><index>[<expr><name>d</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>vm</name><index>[<expr><name>d</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><name>a</name> <operator>and</operator> <name><name>vm</name><index>[<expr><name>d</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name>c</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>p</name> <operator>=</operator> <block>{<expr><name>d</name></expr>, <expr><name><name>vm</name><index>[<expr><name>d</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block></for>

	<comment type="line">//cout &lt;&lt; "d is " &lt;&lt; d &lt;&lt; endl;</comment>
	<if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>fi</name></name> <operator>==</operator> <name>d</name></expr>)</condition><then><block>{
		<comment type="line">//cout &lt;&lt; "up" &lt;&lt; endl;</comment>
		<comment type="line">//cout &lt;&lt; "pair is " &lt;&lt; p.fi &lt;&lt; " " &lt;&lt; p.se &lt;&lt; endl;</comment>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name><name>p</name><operator>.</operator><name>se</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>d</name></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>b</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
				<comment type="line">//cout &lt;&lt; "check " &lt;&lt; i &lt;&lt; " " &lt;&lt; j &lt;&lt; endl;</comment>
				<if>if<condition>(<expr><name><name>has</name><index>[<expr><call><name>mk</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>==</operator><literal type="boolean">false</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
			}</block></for>
		}</block></for>
		<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>se</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></then><else>else <block type="pseudo"><expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt></block></else></if>

	<return>return <expr><call><name>sol</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>c</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>d</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>has</name><index>[<expr><call><name>mk</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vm</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vn</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<if>if<condition>(<expr><name>k</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>vm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>vm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>vn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>vn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	
	<if>if<condition>(<expr><call><name>sol</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
}</block></function></unit>
