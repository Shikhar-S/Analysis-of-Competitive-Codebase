<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29044298_62785409.cpp"><comment type="line" format="doxygen">/// Code By t_bone_289 (Tushar Singh)</comment>
<comment type="line" format="doxygen">/// An Immature Programmer.... I'm still developing !!</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/trie_policy.hpp&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>error</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>3.14159265358979323846</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>ContainerError</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"{"</literal></expr>;</expr_stmt><for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>x</name><operator>:</operator><name>v</name></expr></init>)</control><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="char">','</literal></expr>;</expr_stmt>}</block></for><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"}"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt><return>return;</return>}</block></function>
<typedef>typedef <type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>null_type</name></expr></argument>,<argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name>rb_tree_tag</name></expr></argument>,<argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type> <name>ordered_set</name>;</typedef>
<function><type><name>ll</name></type> <name>powmod</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>base</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>exp</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>MOD</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>exp</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{<if>if<condition>(<expr><name>exp</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><operator>(</operator><name>res</name><operator>*</operator><name>base</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>base</name><operator>=</operator><operator>(</operator><name>base</name><operator>*</operator><name>base</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt><expr_stmt><expr><name>exp</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>}</block></while><return>return <expr><operator>(</operator><name>res</name><operator>%</operator><name>MOD</name><operator>)</operator></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>mpow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>base</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>exp</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>exp</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{<if>if<condition>(<expr><name>exp</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><operator>(</operator><name>res</name><operator>*</operator><name>base</name><operator>)</operator></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>base</name><operator>=</operator><operator>(</operator><name>base</name><operator>*</operator><name>base</name><operator>)</operator></expr>;</expr_stmt><expr_stmt><expr><name>exp</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>}</block></while><return>return <expr><operator>(</operator><name>res</name><operator>)</operator></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>b</name></expr>?</condition><then><expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr></then><else>:<expr><name>a</name></expr></else></ternary></expr>;</return>}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>ans1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>ans2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>A</name><init>=<expr><name>a</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>B</name><init>=<expr><name>b</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>C</name><init>=<expr><name>c</name></expr></init></decl>;</decl_stmt>
            <while>while<condition>(<expr><name>c</name><operator>&gt;=</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>b</name><operator>&gt;=</operator><literal type="number">1</literal></expr>)</condition>
            <block>{
                <expr_stmt><expr><name>c</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>ans1</name><operator>+=</operator><literal type="number">3</literal></expr>;</expr_stmt>
            }</block></while>
            <while>while<condition>(<expr><name>b</name><operator>&gt;=</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>a</name><operator>&gt;=</operator><literal type="number">1</literal></expr>)</condition>
            <block>{
                <expr_stmt><expr><name>b</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>ans1</name><operator>+=</operator><literal type="number">3</literal></expr>;</expr_stmt>
            }</block></while>
            <while>while<condition>(<expr><name>B</name><operator>&gt;=</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>A</name><operator>&gt;=</operator><literal type="number">1</literal></expr>)</condition>
            <block>{
                <expr_stmt><expr><name>B</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>A</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>ans2</name><operator>+=</operator><literal type="number">3</literal></expr>;</expr_stmt>
            }</block></while>
            <while>while<condition>(<expr><name>C</name><operator>&gt;=</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>B</name><operator>&gt;=</operator><literal type="number">1</literal></expr>)</condition>
            <block>{
                <expr_stmt><expr><name>B</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>C</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>ans2</name><operator>+=</operator><literal type="number">3</literal></expr>;</expr_stmt>
            }</block></while>
            <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name>ans1</name></expr></argument>,<argument><expr><name>ans2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
