<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29083274_62796095.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>       <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>conv</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>bitset&lt;30&gt;(a).to_string() ;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mxpq</name></cpp:macro>     <cpp:value>priority_queue &lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mnpq</name></cpp:macro>     <cpp:value>priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>sort(v.begin(),v.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RS</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>sort(v.rbegin(),v.rend())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print</name></cpp:macro>    <cpp:value>printf("%.16f\n", ans)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxi</name></cpp:macro>     <cpp:value>LLONG_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mini</name></cpp:macro>     <cpp:value>LLONG_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name></cpp:macro>        <cpp:value>int tc;cin&gt;&gt;tc;while(tc--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro>      <cpp:value>long long</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro>     <cpp:value>10000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro>        <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fio</name></cpp:macro>      <cpp:value>cin.sync_with_stdio(false) ; cin.tie(0);cout.tie(0) ;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro>     <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ordered_set</name></cpp:macro> <cpp:value>tree&lt;int, null_type,less&lt;int&gt;, rb_tree_tag,tree_order_statistics_node_update&gt;</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    
     <expr_stmt><expr><name>fio</name></expr> ;</expr_stmt>
     <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> ;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr> ;</expr_stmt>
     <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>v</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl> ;</decl_stmt>
     <decl_stmt><decl><type><name>int</name></type> <name>r</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
     <decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
     <decl_stmt><decl><type><name>bool</name></type> <name>b</name><init>=<expr><literal type="boolean">true</literal></expr></init></decl> ;</decl_stmt>
     <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name><operator>*</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
         <expr_stmt><expr><name><name>v</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name><operator>=</operator><name>i</name></expr> ;</expr_stmt>
         <if>if<condition>(<expr><name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>r</name><operator>++</operator></expr> ;</expr_stmt></block></then>
         <else>else <block type="pseudo"><expr_stmt><expr><name>r</name><operator>--</operator></expr> ;</expr_stmt></block></else></if>
         <if>if<condition>(<expr><name>r</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
             <expr_stmt><expr><name>c</name><operator>++</operator></expr> ;</expr_stmt>
             <expr_stmt><expr><name>b</name><operator>=</operator><operator>!</operator><name>b</name></expr> ;</expr_stmt>
             <expr_stmt><expr><name>r</name><operator>=</operator><literal type="number">0</literal></expr> ;</expr_stmt>
         }</block></then></if>
         <if>if<condition>(<expr><name>r</name><operator>==</operator><name>n</name></expr>)</condition><then><block>{
             <expr_stmt><expr><name>r</name><operator>=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
             <expr_stmt><expr><name>b</name><operator>=</operator><operator>!</operator><name>b</name></expr> ;</expr_stmt>
             <expr_stmt><expr><name>c</name><operator>++</operator></expr> ;</expr_stmt>
         }</block></then></if>
     }</block></for>
     <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
         <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
             <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr> ;</expr_stmt>  
         }</block></for>
         <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr> ;</expr_stmt>
     }</block></for>
}</block></function></unit>
