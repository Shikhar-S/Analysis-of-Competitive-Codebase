<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29091421_62791863.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name> ;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>( <parameter><type><name>i</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>t</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>for( register int i = s; i &lt;= t; ++ i )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>re</name></cpp:macro> <cpp:value>register</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>gi</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>char</name></type> <name>cc</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>cn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>flus</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
	<while>while<condition>( <expr><name><name>cc</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>cc</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr> )</condition> <block>{  <if>if<condition>( <expr><name>cc</name> <operator>==</operator> <literal type="char">'-'</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>flus</name> <operator>=</operator> <operator>-</operator> <name>flus</name></expr> ;</expr_stmt></block></then></if> <expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr> ;</expr_stmt> }</block></while>
	<while>while<condition>( <expr><name>cc</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>cc</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr> )</condition>  <block type="pseudo"><expr_stmt><expr><name>cn</name> <operator>=</operator> <name>cn</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>cc</name> <operator>-</operator> <literal type="char">'0'</literal></expr><operator>,</operator> <expr><name>cc</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr> ;</expr_stmt></block></while>
	<return>return <expr><name>cn</name> <operator>*</operator> <name>flus</name></expr> ;</return>
}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>P</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl> ;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl> ;</decl_stmt> 
<function><type><name>int</name></type> <name>fpow</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter> )</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>base</name> <init>= <expr><name>x</name></expr></init></decl> ;</decl_stmt> 
    <while>while<condition>( <expr><name>k</name></expr> )</condition> <block>{
        <if>if<condition>( <expr><name>k</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1ll</literal> <operator>*</operator> <operator>(</operator> <name>ans</name> <operator>*</operator> <name>base</name> <operator>)</operator> <operator>%</operator> <name>P</name></expr> ;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">1ll</literal> <operator>*</operator> <operator>(</operator> <name>base</name> <operator>*</operator> <name>base</name> <operator>)</operator> <operator>%</operator> <name>P</name></expr><operator>,</operator> <expr><name>k</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
    }</block></while>
    <return>return <expr><name>ans</name> <operator>%</operator> <name>P</name></expr> ;</return> 
}</block></function>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>gi</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>m</name> <operator>=</operator> <call><name>gi</name><argument_list>()</argument_list></call></expr> ;</expr_stmt> 
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>, <argument><expr><call><name>fpow</name><argument_list>( <argument><expr><call><name>fpow</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr> ;</return>
}</block></function>
</unit>
