<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29039316_62790145.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>intt</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pil</name></cpp:macro> <cpp:value>pair&lt;int,intt&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pli</name></cpp:macro> <cpp:value>pair&lt;intt,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;intt,intt&gt;</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>powmod</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter> )</parameter_list>
<block>{
	<if>if <condition>( <expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then>
	<block>{
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>powmod</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>k</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>( <expr><name>k</name><operator>&amp;</operator><literal type="number">1</literal></expr> )</condition><then>
	<block>{
		<return>return <expr><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><literal type="number">1LL</literal><operator>*</operator><name>res</name><operator>*</operator><name>res</name><operator>%</operator><name>mod</name><operator>)</operator><operator>*</operator><name>m</name><operator>%</operator><name>mod</name></expr>;</return>
	}</block></then></if> 
	<return>return <expr><operator>(</operator><literal type="number">1LL</literal><operator>*</operator><name>res</name><operator>*</operator><name>res</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>powmod</name><argument_list>(<argument><expr><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><call><name>powmod</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function></unit>
