<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29085419_62785858.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>(1000000007)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
 
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>n</name><operator>--</operator></expr>)</condition><block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>res</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>nc</name><init>=<expr><name>c</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>nc</name><operator>&gt;</operator><name>b</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>res</name><operator>+=</operator><name>b</name><operator>+</operator><name>b</name><operator>*</operator><literal type="number">2</literal></expr><operator>,</operator><expr><name>b</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then>
		<else>else  <block type="pseudo"><expr_stmt><expr><name>res</name><operator>+=</operator><name>nc</name><operator>*</operator><literal type="number">3</literal></expr><operator>,</operator><expr><name>b</name><operator>-=</operator><name>nc</name></expr>;</expr_stmt></block></else></if>
		<decl_stmt><decl><type><name>int</name></type> <name>nb</name><init>=<expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>nb</name><operator>&gt;</operator><name>a</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>res</name><operator>+=</operator><name>a</name><operator>+</operator><name>a</name><operator>*</operator><literal type="number">2</literal></expr><operator>,</operator><expr><name>a</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then>
		<else>else  <block type="pseudo"><expr_stmt><expr><name>res</name><operator>+=</operator><name>nb</name><operator>*</operator><literal type="number">3</literal></expr><operator>,</operator><expr><name>a</name><operator>-=</operator><name>nb</name></expr>;</expr_stmt></block></else></if>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while> 



	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
