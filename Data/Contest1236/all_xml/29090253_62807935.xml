<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29090253_62807935.cpp"><comment type="line">// warm heart, wagging tail,and a smile just for you!</comment>
<comment type="line">//                                                                     âââââââââââ</comment>
<comment type="line">//                                                                   ââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬âââ</comment>
<comment type="line">//                                                                ââââ¬â¬â¬â¬â¬âââââ¬â¬â¬â¬â¬â¬âââ</comment>
<comment type="line">//                                            âââââââââââ       âââ¬â¬â¬â¬â¬âââââ¬â¬âââââ¬â¬â¬â¬â¬ââ</comment>
<comment type="line">//                                      ââââââââââ¬â¬â¬â¬â¬âââââââââââââ¬â¬â¬â¬â¬âââ¬â¬â¬â¬â¬â¬ââââ¬â¬â¬â¬â¬ââ</comment>
<comment type="line">//                               âââââââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââââââââ¬â¬â¬â¬â¬â¬âââ¬â¬â¬â¬â¬â¬â¬ââ</comment>
<comment type="line">//                             âââââ¬âââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââââââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââ</comment>
<comment type="line">//                           ââââ¬â¬â¬ââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬âââ¬â¬ââââ¬â¬â¬â¬â¬â¬â¬âââââ</comment>
<comment type="line">//                         ââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬âââ¬â¬â¬âââââââââ¬â¬â¬â¬â¬ââ</comment>
<comment type="line">//                       ââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââ¬â¬â¬â¬â¬â¬â¬â¬â¬âââ</comment>
<comment type="line">//                     ââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââââ¬â¬â¬â¬â¬â¬â¬ââ</comment>
<comment type="line">//                 âââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬âââââ¬â¬â¬â¬â¬ââââ</comment>
<comment type="line">//     ââââââââââââââ¬â¬â¬â¬â¬â¬â¬â¬âââ¬â¬â¬â¬â¬âââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââ¬â¬â¬â¬ââââââ</comment>
<comment type="line">//   âââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬âââ¬â¬âââââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬âââââââ¬â¬â¬â¬â¬â¬â¬ââââââââââââ¬â¬â¬â¬â¬â¬â¬â¬âââ¬â¬â¬âââ¬â¬â¬ââ</comment>
<comment type="line">// ââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬âââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬âââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬âââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââ¬â¬â¬â¬â¬â¬â¬âââ¬â¬â¬â¬â¬â¬â¬â¬ââ</comment>
<comment type="line">// âââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬âââ¬â¬â¬â¬âââââââ¬â¬â¬âââââ¬â¬âââââ¬â¬â¬â¬â¬â¬â¬âââââââââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬âââ¬â¬â¬â¬â¬â¬â¬âââ</comment>
<comment type="line">// âââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââââââââââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââââââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬âââ¬â¬â¬â¬âââââ</comment>
<comment type="line">// ââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââ¬â¬â¬â¬â¬âââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââââââ</comment>
<comment type="line">//   ââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââââ¬â¬â¬â¬â¬â¬â¬â¬âââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââ¬â¬âââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââ</comment>
<comment type="line">//       ââââââââââââââ  âââââ¬â¬â¬â¬â¬â¬ââââââââââââââââââââââââââââ¬â¬â¬â¬â¬âââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââ</comment>
<comment type="line">//                         âââââââ                           âââââ  âââââââââââââââââââ  </comment>
<comment type="line">//</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bits/stdc++.h"</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<comment type="line">//#define MOD 998244353</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>(1LL&lt;&lt;60)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fs</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(a);i&lt;(b);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (b-1);i&gt;=(a);--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>FOR(i,0,(n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RREP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RFOR(i,0,(n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITR</name><parameter_list>(<parameter><type><name>itr</name></type></parameter>,<parameter><type><name>mp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto itr = (mp).begin(); itr != (mp).end(); ++itr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RITR</name><parameter_list>(<parameter><type><name>itr</name></type></parameter>,<parameter><type><name>mp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto itr = (mp).rbegin(); itr != (mp).rend(); ++itr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>range</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)&lt;=(i) &amp;&amp; (i)&lt;(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>cout &lt;&lt; #x &lt;&lt; " = " &lt;&lt; (x) &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SP</name></cpp:macro> <cpp:value>&lt;&lt; " " &lt;&lt;</cpp:value></cpp:define> 
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>P</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vec</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>mat</name>;</typedef>

<struct><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
struct <name>SegmentTree</name><block>{<public type="default">
  <using>using <name>F</name> <init>= <type><name>function</name><name/>&lt;<name>T</name></type><expr><operator>(</operator><name>T</name>,<name>T</name><operator>)</operator><operator>&gt;</operator></expr></init>;</using>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>F</name></type> <name>f</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>T</name></type> <name>ti</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>dat</name></decl>;</decl_stmt>
  <constructor><name>SegmentTree</name><parameter_list>()</parameter_list><block>{}</block></constructor><empty_stmt>;</empty_stmt>
  <constructor><name>SegmentTree</name><parameter_list>(<parameter><decl><type><name>F</name></type> <name>f</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>ti</name></decl></parameter>)</parameter_list><member_init_list>:<call><name>f</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call>,<call><name>ti</name><argument_list>(<argument><expr><name>ti</name></expr></argument>)</argument_list></call></member_init_list><block>{}</block></constructor>
  <function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n_</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>n</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>n</name><operator>&lt;</operator><name>n_</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>n</name><operator>&lt;&lt;=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></while>
    <expr_stmt><expr><call><name><name>dat</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>ti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
  <function><type><name>void</name></type> <name>build</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n_</name><init>=<expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>n_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n_</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>dat</name><index>[<expr><name>n</name><operator>+</operator><name>i</name></expr>]</index></name><operator>=</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
      <block type="pseudo"><expr_stmt><expr><name><name>dat</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>f</name><argument_list>(<argument><expr><name><name>dat</name><index>[<expr><operator>(</operator><name>i</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>|</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>dat</name><index>[<expr><operator>(</operator><name>i</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>|</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
  }</block></function>
  <function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name><name>dat</name><index>[<expr><name>k</name><operator>+=</operator><name>n</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>k</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>)</condition>
      <block type="pseudo"><expr_stmt><expr><name><name>dat</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><call><name>f</name><argument_list>(<argument><expr><name><name>dat</name><index>[<expr><operator>(</operator><name>k</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>|</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>dat</name><index>[<expr><operator>(</operator><name>k</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>|</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
  }</block></function>
  <function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name><name>dat</name><index>[<expr><name>k</name><operator>+=</operator><name>n</name></expr>]</index></name><operator>+=</operator><name>x</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>k</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>)</condition>
      <block type="pseudo"><expr_stmt><expr><name><name>dat</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><call><name>f</name><argument_list>(<argument><expr><name><name>dat</name><index>[<expr><operator>(</operator><name>k</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>|</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>dat</name><index>[<expr><operator>(</operator><name>k</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>|</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
  }</block></function>
  <function><type><name>T</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>T</name></type> <name>vl</name><init>=<expr><name>ti</name></expr></init></decl>,<decl><type ref="prev"/><name>vr</name><init>=<expr><name>ti</name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name><init>=<expr><name>a</name><operator>+</operator><name>n</name></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name>b</name><operator>+</operator><name>n</name></expr></init></decl>;</init><condition><expr><name>l</name><operator>&lt;</operator><name>r</name></expr>;</condition><incr><expr><name>l</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>r</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr></incr>)</control> <block>{
      <if>if<condition>(<expr><name>l</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>vl</name><operator>=</operator><call><name>f</name><argument_list>(<argument><expr><name>vl</name></expr></argument>,<argument><expr><name><name>dat</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if<condition>(<expr><name>r</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>vr</name><operator>=</operator><call><name>f</name><argument_list>(<argument><expr><name><name>dat</name><index>[<expr><operator>--</operator><name>r</name></expr>]</index></name></expr></argument>,<argument><expr><name>vr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <return>return <expr><call><name>f</name><argument_list>(<argument><expr><name>vl</name></expr></argument>,<argument><expr><name>vr</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
  <comment type="line">//lower_find(l,r,fanc): fancãæºããåºé[0,id)ãªãidã®æå°å¤ãè¿ã. ng &lt; okã®ã¨ã</comment>
  <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>C</name></parameter>&gt;</parameter_list></template>
  <type><name>int</name></type> <name>lower_find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>C</name> <modifier>&amp;</modifier></type><name>check</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>r</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>r</name><operator>=</operator><name>n</name></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><operator>!</operator><call><name>check</name><argument_list>(<argument><expr><call><name>f</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name><name>dat</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>||</operator><name>r</name><operator>&lt;=</operator><name>a</name><operator>||</operator><name>b</name><operator>&lt;=</operator><name>l</name></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>r</name><operator>-</operator><name>l</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>l</name></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>xl</name> <init>= <expr><call><name>lower_find</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>check</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><operator>(</operator><name>k</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>xl</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>xl</name></expr>;</return></block></then></if>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>f</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name><name>dat</name><index>[<expr><operator>(</operator><name>k</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>lower_find</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>check</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><operator>(</operator><name>k</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>|</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
  <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>C</name></parameter>&gt;</parameter_list></template>
  <type><name>int</name></type> <name>lower_find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>C</name> <modifier>&amp;</modifier></type><name>check</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>T</name></type> <name>x</name><init>=<expr><name>ti</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>lower_find</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>check</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="line">//upper_find(l,r,fanc): fancãæºããåºé[0,id)ãªãidã®æå°å¤ãè¿ã. ok &lt; ngã®ã¨ã</comment>
  <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>C</name></parameter>&gt;</parameter_list></template>
  <type><name>int</name></type> <name>upper_find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>C</name> <modifier>&amp;</modifier></type><name>check</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">2</literal></expr></init></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>r</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>r</name><operator>=</operator><name>n</name></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name>r</name><operator>&lt;=</operator><name>a</name><operator>||</operator><name>b</name><operator>&lt;=</operator><name>l</name></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>r</name><operator>-</operator><name>l</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>l</name></expr>;</return></block></then></if>
    <if>if<condition>(<expr><call><name>check</name><argument_list>(<argument><expr><call><name>f</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name><name>dat</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
      <decl_stmt><decl><type><name>int</name></type> <name>xr</name> <init>= <expr><call><name>upper_find</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>check</name></expr></argument>,<argument><expr><call><name>f</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name><name>dat</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>(</operator><operator>(</operator><name>k</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if<condition>(<expr><name>xr</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>xr</name></expr>;</return></block></then></if>
    }</block></then></if>
    <return>return <expr><call><name>upper_find</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>check</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><operator>(</operator><name>k</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
  <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>C</name></parameter>&gt;</parameter_list></template>
  <type><name>int</name></type> <name>upper_find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>C</name> <modifier>&amp;</modifier></type><name>check</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>T</name></type> <name>x</name><init>=<expr><name>ti</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>upper_find</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>check</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
</public>}</block>;</struct>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
  <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>

  <if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>a</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>m</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>vec</name></type> <name>v</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><name>m</name><operator>+</operator><literal type="number">10</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>v</name><index>[<expr><name>n</name><operator>+</operator><name>m</name><operator>+</operator><literal type="number">9</literal><operator>-</operator><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>auto</name></type> <name>f</name> <init>= <expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>a</name><operator>+</operator><name>b</name></expr>;</return>}</block></lambda></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>SegmentTree</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>seg</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>seg</name><operator>.</operator><name>build</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><name>m</name><operator>+</operator><literal type="number">10</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name>n</name><operator>+</operator><name>m</name><operator>+</operator><literal type="number">10</literal><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <comment type="line">//å³ã«</comment>
  <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>m</argument>)</argument_list></macro><block>{
    <expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name><name>seg</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>l</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><call><name><name>seg</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>id</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ans</name> <operator>-=</operator> <name>tmp</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>seg</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>id</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>seg</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>id</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>l</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
   <comment type="line">// debug(ans);</comment>
  }</block>
  <expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name><name>seg</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//debug(ans);</comment>

  <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><name>m</name><operator>+</operator><literal type="number">10</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>seg</name><operator>.</operator><name>build</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>r</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  <comment type="line">//å·¦ã«</comment>
  <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>m</argument>)</argument_list></macro><block>{
    <expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name><name>seg</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>l</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><call><name><name>seg</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>id</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>id</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ans</name> <operator>-=</operator> <name>tmp</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>seg</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>id</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>seg</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>id</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt>
    <comment type="line">//debug(ans);</comment>
  }</block> 
  <expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name><name>seg</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
