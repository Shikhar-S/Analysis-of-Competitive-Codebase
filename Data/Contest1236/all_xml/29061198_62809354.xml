<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29061198_62809354.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using> <typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef> <typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>r</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>stepr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ly</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>stepu</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ly</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{
  <comment type="line">//cout &lt;&lt; 'U' &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; endl;</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nx</name> <init>= <expr><name>ux</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>c</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>it</name> <operator>!=</operator> <name><name>c</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nx</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><operator>--</operator><name>it</name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
  <if>if <condition>(<expr><name>ux</name> <operator>&gt;</operator> <name>nx</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nx</name> <operator>=</operator> <name>ux</name></expr>;</expr_stmt></block></then></if>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>ri</name><init>=<expr><name>ux</name></expr></init></decl>;</init> <condition><expr><name>ri</name><operator>&lt;=</operator><name>nx</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>ri</name></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>r</name><index>[<expr><name>ri</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>+</operator><name>l</name> <operator>!=</operator> <name>m</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if></block></for>
  <if>if <condition>(<expr><name>nx</name> <operator>==</operator> <name>x</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
  <expr_stmt><expr><call><name>stepr</name><argument_list>(<argument><expr><name>nx</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>nx</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>dx</name></expr></argument>,<argument><expr><name>ly</name></expr></argument>,<argument><expr><name>ry</name></expr></argument>,<argument><expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>stepl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ly</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{
  <comment type="line">//cout &lt;&lt; 'L' &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; endl;</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>ny</name> <init>= <expr><name>ly</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>r</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>it</name> <operator>!=</operator> <name><name>r</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ny</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><operator>--</operator><name>it</name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
  <if>if <condition>(<expr><name>ly</name> <operator>&gt;</operator> <name>ny</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ny</name> <operator>=</operator> <name>ly</name></expr>;</expr_stmt></block></then></if>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>ci</name><init>=<expr><name>ly</name></expr></init></decl>;</init> <condition><expr><name>ci</name><operator>&lt;=</operator><name>ny</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>ci</name></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>c</name><index>[<expr><name>ci</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>+</operator><name>l</name> <operator>!=</operator> <name>n</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if></block></for>
  <if>if <condition>(<expr><name>ny</name> <operator>==</operator> <name>y</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
  <expr_stmt><expr><call><name>stepu</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>ny</name></expr></argument>,<argument><expr><name>ux</name></expr></argument>,<argument><expr><name>dx</name></expr></argument>,<argument><expr><name>ny</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>ry</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>stepd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ly</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{
  <comment type="line">//cout &lt;&lt; 'D' &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; endl;</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nx</name> <init>= <expr><name>dx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>c</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>it</name> <operator>!=</operator> <name><name>c</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nx</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>it</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
  <if>if <condition>(<expr><name>dx</name> <operator>&lt;</operator> <name>nx</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nx</name> <operator>=</operator> <name>dx</name></expr>;</expr_stmt></block></then></if>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>ri</name><init>=<expr><name>nx</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>ri</name><operator>&lt;=</operator><name>dx</name></expr>;</condition> <incr><expr><operator>++</operator><name>ri</name></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>r</name><index>[<expr><name>ri</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>+</operator><name>l</name> <operator>!=</operator> <name>m</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if></block></for>
  <if>if <condition>(<expr><name>nx</name> <operator>==</operator> <name>x</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
  <expr_stmt><expr><call><name>stepl</name><argument_list>(<argument><expr><name>nx</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>ux</name></expr></argument>,<argument><expr><name>nx</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>ly</name></expr></argument>,<argument><expr><name>ry</name></expr></argument>,<argument><expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>stepr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ly</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{
  <comment type="line">//cout &lt;&lt; 'R' &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; endl;</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>ny</name> <init>= <expr><name>ry</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>r</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>it</name> <operator>!=</operator> <name><name>r</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ny</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>it</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
  <if>if <condition>(<expr><name>ry</name> <operator>&lt;</operator> <name>ny</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ny</name> <operator>=</operator> <name>ry</name></expr>;</expr_stmt></block></then></if>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>ci</name><init>=<expr><name>ny</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>ci</name><operator>&lt;=</operator><name>ry</name></expr>;</condition> <incr><expr><operator>++</operator><name>ci</name></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>c</name><index>[<expr><name>ci</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>+</operator><name>l</name> <operator>!=</operator> <name>n</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if></block></for>
  <if>if <condition>(<expr><name>ny</name> <operator>==</operator> <name>y</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
  <expr_stmt><expr><call><name>stepd</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>ny</name></expr></argument>,<argument><expr><name>ux</name></expr></argument>,<argument><expr><name>dx</name></expr></argument>,<argument><expr><name>ly</name></expr></argument>,<argument><expr><name>ny</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{ <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><index>[<expr><operator>--</operator><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><operator>--</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>c</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name>m</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
	  <decl_stmt><decl><type><name>int</name></type> <name>co</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
	  <if>if <condition>(<expr><operator>!</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>co</name> <operator>=</operator> <name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></then></if>
	  <if>if <condition>(<expr><name>co</name> <operator>+</operator> <name>k</name> <operator>==</operator> <name>n</name><operator>*</operator><name>m</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal></expr>;</expr_stmt></block></then>
	  <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt></block></else></if>
	  <return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
  <expr_stmt><expr><call><name>stepr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
