<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29088496_62812116.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LCM</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>                <cpp:value>(a / __gcd(a,b) ) *b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCD</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>                <cpp:value>__gcd(a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dist</name><parameter_list>(<parameter><type><name>x1</name></type></parameter>,<parameter><type><name>y1</name></type></parameter>,<parameter><type><name>x2</name></type></parameter>,<parameter><type><name>y2</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>sqrt((x2-x1)*(x2-x1) + (y2-y1)*(y2-y1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>distl</name><parameter_list>(<parameter><type><name>x1</name></type></parameter>,<parameter><type><name>y1</name></type></parameter>,<parameter><type><name>x2</name></type></parameter>,<parameter><type><name>y2</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>sqrtl((x2-x1)*(x2-x1) + (y2-y1)*(y2-y1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fRead</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                <cpp:value>freopen(x,"r",stdin)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fWrite</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>               <cpp:value>freopen (x,"w",stdout)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro>                      <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULL</name></cpp:macro>                     <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>                      <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tcase</name></cpp:macro>                   <cpp:value>cout&lt;&lt;"Case "&lt;&lt;C++&lt;&lt;": ";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>                  <cpp:value>a.begin(),a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Unique</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>               <cpp:value>sort(all(a)),a.erase(unique(all(a)),a.end</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                  <cpp:value>((x)&lt;0?-(x):(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>             <cpp:value>min(a,min(b,c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>min(a,min(b,min(c,d)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>             <cpp:value>max(a,max(b,c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>max(a,max(b,max(c,d)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro>                      <cpp:value>acos(-1.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro>                      <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro>                      <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>                 <cpp:value>fixed&lt;&lt;setprecision((y))&lt;&lt;(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FastRead</name></cpp:macro>                <cpp:value>ios_base::sync_with_stdio(0);cin.tie(NULL);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro>            <cpp:value>for (int x = l; x&lt;=r; ++x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro>                <cpp:value>for (int x = 0; x &lt;r; ++x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NN</name></cpp:macro>                      <cpp:value>cout&lt;&lt;"\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NNN</name></cpp:macro>                     <cpp:value>cout&lt;&lt;"\n------------------------------\n";</cpp:value></cpp:define>

<comment type="line">//***********************************************************************//</comment>
<comment type="line">//                      SHAHED AHMED, CSE'15, IUT                        //</comment>
<comment type="line">//***********************************************************************//</comment>

<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name><name>rob</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name><name>cob</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LL</name></type> <name>yfirst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>ylast</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LL</name></type> <name>xfirst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>xlast</name></decl>;</decl_stmt>



<function><type><name>LL</name></type> <name>shoot</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>lo</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>hi</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>lo</name><operator>&gt;</operator><name>hi</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>lo</name></expr></argument>,<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <if>if<condition>(<expr><name>d</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <if>if<condition>(<expr><name><name>rob</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>lo</name></expr></argument>)</argument_list></call><operator>==</operator><name><name>rob</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>hi</name></expr>;</return></block></then></if>

        <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>rob</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>lo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>*</operator><name>it</name></expr>;</return>
    }</block></then></if>
    <if>if<condition>(<expr><name>d</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
    <block>{
        <if>if<condition>(<expr><name><name>cob</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>lo</name></expr></argument>)</argument_list></call><operator>==</operator><name><name>cob</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>hi</name></expr>;</return></block></then></if>

        <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>cob</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>lo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>*</operator><name>it</name></expr>;</return>
    }</block></then></if>

    <if>if<condition>(<expr><name>d</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
    <block>{
        <if>if<condition>(<expr><name><name>rob</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>lo</name></expr></argument>)</argument_list></call><operator>==</operator><name><name>rob</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>lo</name></expr>;</return></block></then></if>

        <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>rob</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>it</name></expr>;</return>
    }</block></then></if>


    <if>if<condition>(<expr><name>d</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then>
    <block>{
        <if>if<condition>(<expr><name><name>cob</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>lo</name></expr></argument>)</argument_list></call><operator>==</operator><name><name>cob</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>lo</name></expr>;</return></block></then></if>

        <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>cob</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>it</name></expr>;</return>
    }</block></then></if>

}</block></function>




<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>LL</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rob</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cob</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>LL</name></type> <name>dd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>xfirst</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>yfirst</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>xlast</name> <operator>=</operator> <name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ylast</name> <operator>=</operator> <name>m</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>LL</name></type> <name>currx</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>curry</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{


        <decl_stmt><decl><type><name>LL</name></type> <name>prevx</name> <init>= <expr><name>currx</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>prevy</name> <init>= <expr><name>curry</name></expr></init></decl>;</decl_stmt>

        <if>if<condition>(<expr><name>dd</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>  <comment type="line">// shoot row L -&gt;R</comment>
        <block>{
            <decl_stmt><decl><type><name>LL</name></type> <name>nxty</name> <init>= <expr><call><name>shoot</name><argument_list>(<argument><expr><name>currx</name></expr></argument>,<argument><expr><name>curry</name></expr></argument>,<argument><expr><name>ylast</name></expr></argument>,<argument><expr><name>dd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>curry</name> <operator>=</operator><name>nxty</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>xfirst</name><operator>=</operator><name>currx</name></expr>;</expr_stmt>
        }</block></then></if>

        <if>if<condition>(<expr><name>dd</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <comment type="line">// shoot col up -&gt;down</comment>
        <block>{
            <decl_stmt><decl><type><name>LL</name></type> <name>nxtx</name> <init>= <expr><call><name>shoot</name><argument_list>(<argument><expr><name>curry</name></expr></argument>,<argument><expr><name>currx</name></expr></argument>,<argument><expr><name>xlast</name></expr></argument>,<argument><expr><name>dd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>currx</name> <operator>=</operator> <name>nxtx</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>ylast</name> <operator>=</operator> <name>curry</name></expr>;</expr_stmt>
        }</block></then></if>

        <if>if<condition>(<expr><name>dd</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <comment type="line">// shoot col R -&gt;L</comment>
        <block>{
            <decl_stmt><decl><type><name>LL</name></type> <name>nxty</name> <init>= <expr><call><name>shoot</name><argument_list>(<argument><expr><name>currx</name></expr></argument>,<argument><expr><name>yfirst</name></expr></argument>,<argument><expr><name>curry</name></expr></argument>,<argument><expr><name>dd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>curry</name> <operator>=</operator><name>nxty</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>xlast</name> <operator>=</operator> <name>currx</name></expr>;</expr_stmt>
        }</block></then></if>

        <if>if<condition>(<expr><name>dd</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then> <comment type="line">// shoot down -&gt; up</comment>
        <block>{
            <decl_stmt><decl><type><name>LL</name></type> <name>nxtx</name> <init>= <expr><call><name>shoot</name><argument_list>(<argument><expr><name>curry</name></expr></argument>,<argument><expr><name>xfirst</name></expr></argument>,<argument><expr><name>currx</name></expr></argument>,<argument><expr><name>dd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>currx</name> <operator>=</operator> <name>nxtx</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>yfirst</name> <operator>=</operator> <name>curry</name></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">//cout&lt;&lt;currx&lt;&lt;" "&lt;&lt;curry&lt;&lt;"\n";</comment>
        <if>if<condition>(<expr><name>prevx</name><operator>==</operator><name>currx</name> <operator>&amp;&amp;</operator> <name>prevy</name><operator>==</operator><name>curry</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>


        <expr_stmt><expr><name>ans</name><operator>+=</operator> <call><name>ABS</name><argument_list>(<argument><expr><name>currx</name><operator>-</operator><name>prevx</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ABS</name><argument_list>(<argument><expr><name>curry</name><operator>-</operator><name>prevy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>dd</name> <operator>=</operator><name>dd</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>dd</name><operator>%=</operator><literal type="number">4</literal></expr>;</expr_stmt>

    }</block></while>

    <expr_stmt><expr><name>ans</name><operator>+=</operator><name>k</name></expr>;</expr_stmt>

    <if>if<condition>(<expr><name>ans</name><operator>==</operator><name>n</name><operator>*</operator><name>m</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt></block></else></if>




}</block></function>
</unit>
