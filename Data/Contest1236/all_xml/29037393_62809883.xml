<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29037393_62809883.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"O3"</cpp:literal><name>)</name></cpp:pragma>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_debug</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dout</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #i &lt;&lt; ' ' &lt;&lt; i &lt;&lt; ' '</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dout</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0 and 0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rout</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(cout &lt;&lt; i &lt;&lt; '\n', 0)</cpp:value></cpp:define>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ull</name> <init>= <type><name>unsigned</name> <name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ul</name> <init>= <type><name>unsigned</name></type></init>;</using>
<using>using <name>db</name> <init>= <type><name>double</name></type></init>;</using>
<decl_stmt><decl><type><name>string</name></type> <name><name>res</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"No"</literal></expr>, <expr><literal type="string">"Yes"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>ho</name></decl>, <decl><type ref="prev"/><name>ve</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">100000</literal></expr></init></decl>;</decl_stmt>
<comment type="line">// vector&lt;pair&lt;pair&lt;int,int&gt;, pair&lt;int,int&gt;&gt; unab;</comment>
<decl_stmt><decl><type><name>ll</name></type> <name>step</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name>m</name></expr></init></decl>, <decl><type ref="prev"/><name>u</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>	
<function><type><name>void</name></type> <name>tr</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>r</name> <operator>=</operator> <name>m</name></expr><operator>,</operator> <expr><name>u</name> <operator>=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>w</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>tu</name></decl>;</decl_stmt>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>go</name></decl>;</decl_stmt>
		<comment type="line">// dout(x);dout(y)&lt;&lt;'\n';</comment>
		<comment type="line">// dout(step)&lt;&lt;'\n';</comment>
		<if>if<condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>go</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>ho</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ho</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>go</name> <operator>&lt;=</operator> <name>y</name></expr>)</condition><then><block>{
				<if>if<condition>(<expr><call><name><name>tu</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>,<expr><name>y</name></expr>}</block></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><return>return;</return></block></then></if>
				<expr_stmt><expr><operator>++</operator><name>w</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>tu</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>,<expr><name>y</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else>else<block>{
				<expr_stmt><expr><name>step</name> <operator>+=</operator> <name>go</name> <operator>-</operator> <name>y</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>y</name> <operator>=</operator> <name>go</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>r</name> <operator>=</operator> <name>y</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<comment type="line">// ++w;</comment>
				<comment type="line">// tu.insert({x,y});</comment>
			}</block></else></if>
		}</block></then></if>
		<if>if<condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>go</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>ve</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ve</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>go</name> <operator>&lt;=</operator> <name>x</name></expr>)</condition><then><block>{
				<if>if<condition>(<expr><call><name><name>tu</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>,<expr><name>y</name></expr>}</block></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><return>return;</return></block></then></if>
				<expr_stmt><expr><operator>++</operator><name>w</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>tu</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>,<expr><name>y</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else>else<block>{
				<expr_stmt><expr><name>step</name> <operator>+=</operator> <name>go</name> <operator>-</operator> <name>x</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>x</name> <operator>=</operator> <name>go</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>d</name> <operator>=</operator> <name>x</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<comment type="line">// ++w;</comment>
				<comment type="line">// tu.insert({x,y});</comment>
			}</block></else></if>
		}</block></then></if>
		<if>if<condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>go</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><call><name>prev</name><argument_list>(<argument><expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>ho</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ho</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>go</name> <operator>&gt;=</operator> <name>y</name></expr>)</condition><then><block>{
				<if>if<condition>(<expr><call><name><name>tu</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>,<expr><name>y</name></expr>}</block></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><return>return;</return></block></then></if>
				<expr_stmt><expr><operator>++</operator><name>w</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>tu</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>,<expr><name>y</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
			}</block></then>
			<else>else<block>{
				<expr_stmt><expr><name>step</name> <operator>+=</operator> <name>y</name> <operator>-</operator> <name>go</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>y</name> <operator>=</operator> <name>go</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>l</name> <operator>=</operator> <name>y</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<comment type="line">// ++w;</comment>
				<comment type="line">// tu.insert({x,y});	</comment>
			}</block></else></if>
		}</block></then></if>
		<if>if<condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>go</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><call><name>prev</name><argument_list>(<argument><expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>ve</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ve</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>go</name> <operator>&gt;=</operator> <name>x</name></expr>)</condition><then><block>{
				<if>if<condition>(<expr><call><name><name>tu</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>,<expr><name>y</name></expr>}</block></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><return>return;</return></block></then></if>
				<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>tu</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>,<expr><name>y</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else>else<block>{
				<expr_stmt><expr><name>step</name> <operator>+=</operator> <name>x</name> <operator>-</operator> <name>go</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>x</name> <operator>=</operator> <name>go</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>u</name> <operator>=</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<comment type="line">// w = 1;</comment>
				<comment type="line">// tu.insert({x,y});</comment>
			}</block></else></if>
		}</block></then></if>
	}</block></for>
		
}</block></function>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>ho</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>emplace_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>ve</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>emplace_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ho</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>emplace_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ve</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>emplace_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>i</name> <operator>:</operator> <name>ho</name></expr></init>)</control><block type="pseudo"><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>second</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>i</name><operator>.</operator><name>second</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>i</name> <operator>:</operator> <name>ve</name></expr></init>)</control><block type="pseudo"><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>second</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>i</name><operator>.</operator><name>second</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>ho</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>emplace_back</name><argument_list>(<argument><expr><name>maxn</name><operator>+</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>ve</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>emplace_back</name><argument_list>(<argument><expr><name>maxn</name><operator>+</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>tr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<comment type="line">// dout(x);dout(y)&lt;&lt;'\n';</comment>
<comment type="line">// dout(step)&lt;&lt;'\n';</comment>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>res</name><index>[<expr><name>step</name> <operator>+</operator> <name>k</name> <operator>==</operator> <operator>(</operator><name>ll</name><operator>)</operator><name>n</name> <operator>*</operator> <operator>(</operator><name>ll</name><operator>)</operator><name>m</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
}</block></function></unit>
