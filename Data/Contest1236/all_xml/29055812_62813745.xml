<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29055812_62813745.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ll)v.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a).begin(),(a).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                <cpp:value>cerr &lt;&lt; #x &lt;&lt; ": " &lt;&lt; x &lt;&lt; "\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>             <cpp:value>cerr &lt;&lt; #x &lt;&lt; ": " &lt;&lt; x &lt;&lt; " | " &lt;&lt; #y &lt;&lt; ": " &lt;&lt; y &lt;&lt; "\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>          <cpp:value>cerr &lt;&lt; #x &lt;&lt; ": " &lt;&lt; x &lt;&lt; " | " &lt;&lt; #y &lt;&lt; ": " &lt;&lt; y &lt;&lt; " | " &lt;&lt; #z &lt;&lt; ": " &lt;&lt; z&lt;&lt;" " ;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>cerr &lt;&lt; #a &lt;&lt; ": " &lt;&lt; a &lt;&lt; " | " &lt;&lt; #b &lt;&lt; ": " &lt;&lt; b &lt;&lt; " | " &lt;&lt; #c &lt;&lt; ": " &lt;&lt; c &lt;&lt; " | " &lt;&lt; #d &lt;&lt; ": " &lt;&lt; d&lt;&lt;" " ;</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod1</name><init>= <expr><literal type="number">1000000009</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>base</name><init>= <expr><literal type="number">10529</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>base1</name><init>=<expr><literal type="number">11699</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>N</name><init>=<expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro> <cpp:value>2000004</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mx</name><init>=<expr><literal type="number">10000000000000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>row</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>col</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>row1</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>col1</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>cnt</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>j</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>dir</name></decl></parameter>)</parameter_list><block>{
   <if>if<condition>(<expr><name>a</name><operator>&gt;</operator><name>n</name> <operator>or</operator> <name>b</name><operator>&gt;</operator><name>m</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
   <comment type="line">// trace3(i,j,dir);</comment>
   <comment type="line">// cout&lt;&lt;" | "; </comment>
   <comment type="line">// trace4(a,b,n,m);</comment>
   <comment type="line">// cerr&lt;&lt;'\n';</comment>
   <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
      <decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ll</name></type> <name>nw</name></decl>;</decl_stmt>
      <if>if<condition>(<expr><name>it</name><operator>==</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call> <operator>or</operator> <operator>*</operator><name>it</name><operator>&gt;</operator><name>m</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>nw</name><operator>=</operator><name>m</name></expr>;</expr_stmt></block></then>
      <else>else <block type="pseudo"><expr_stmt><expr><name>nw</name><operator>=</operator><operator>*</operator><name>it</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
      <expr_stmt><expr><name>cnt</name><operator>+=</operator><name>nw</name><operator>-</operator><name>j</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>m</name><operator>=</operator><name>nw</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>nw</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></then>
   <elseif>else <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
      <decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><name><name>col</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ll</name></type> <name>nw</name></decl>;</decl_stmt>
      <if>if<condition>(<expr><name>it</name><operator>==</operator><name><name>col</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call> <operator>or</operator> <operator>*</operator><name>it</name><operator>&gt;</operator><name>n</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>nw</name><operator>=</operator><name>n</name></expr>;</expr_stmt></block></then>
      <else>else <block type="pseudo"><expr_stmt><expr><name>nw</name><operator>=</operator><operator>*</operator><name>it</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
      <expr_stmt><expr><name>cnt</name><operator>+=</operator><name>nw</name><operator>-</operator><name>i</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>n</name><operator>=</operator><name>nw</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>m</name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>nw</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></then></if></elseif>
   <elseif>else <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
      <decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><name><name>row1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><operator>-</operator><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ll</name></type> <name>nw</name></decl>;</decl_stmt>
      <if>if<condition>(<expr><name>it</name><operator>==</operator><name><name>row1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call> <operator>or</operator> <operator>*</operator><name>it</name> <operator>&gt;</operator> <operator>-</operator><name>b</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>nw</name><operator>=</operator><name>b</name></expr>;</expr_stmt></block></then>
      <else>else <block type="pseudo"><expr_stmt><expr><name>nw</name><operator>=</operator><operator>-</operator><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>

      <expr_stmt><expr><name>b</name><operator>=</operator><name>nw</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>cnt</name><operator>+=</operator><name>j</name><operator>-</operator><name>nw</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>nw</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></then></if></elseif> 
   <else>else <block>{
      <decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><name><name>col1</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ll</name></type> <name>nw</name></decl>;</decl_stmt>
      <if>if<condition>(<expr><name>it</name><operator>==</operator><name><name>col1</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call> <operator>or</operator> <operator>*</operator><name>it</name> <operator>&gt;</operator> <operator>-</operator><name>a</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>nw</name><operator>=</operator><name>a</name></expr>;</expr_stmt></block></then>
      <else>else <block type="pseudo"><expr_stmt><expr><name>nw</name><operator>=</operator><operator>-</operator><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
      <expr_stmt><expr><name>a</name><operator>=</operator><name>nw</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>cnt</name><operator>+=</operator><name>i</name><operator>-</operator><name>nw</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>nw</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></else></if>
}</block></function>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>n1</name></decl>,<decl><type ref="prev"/><name>m1</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>n1</name><operator>=</operator><name>n</name></expr><operator>,</operator><expr><name>m1</name><operator>=</operator><name>m</name></expr>;</expr_stmt>
  <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>row1</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><operator>-</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>col1</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><operator>-</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><name>a</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>b</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>(<expr><name>cnt</name><operator>==</operator><name>n1</name><operator>*</operator><name>m1</name><operator>-</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal></expr>;</expr_stmt></block></then>
  <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal></expr>;</expr_stmt></block></else></if>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function> 
</unit>
