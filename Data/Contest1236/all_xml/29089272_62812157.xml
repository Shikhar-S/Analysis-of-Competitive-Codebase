<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29089272_62812157.cpp"><comment type="line">// By Stefan Radu</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cctype&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(x).size()</cpp:value></cpp:define>

<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>ui</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>

<struct>struct <name>PozL</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

  <function type="operator"><type><name>bool</name></type> <name>operator <name>&lt;</name></name> <parameter_list>(<parameter><decl><type><name>PozL</name></type> <name>other</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
    <return>return <expr><name><name>this</name> <operator>-&gt;</operator> <name>j</name></name> <operator>&lt;</operator> <name><name>other</name><operator>.</operator><name>j</name></name></expr>;</return>
  }</block></function>
</public>}</block>;</struct>

<struct>struct <name>PozC</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

  <function type="operator"><type><name>bool</name></type> <name>operator <name>&lt;</name></name> <parameter_list>(<parameter><decl><type><name>PozC</name></type> <name>other</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
    <return>return <expr><name><name>this</name> <operator>-&gt;</operator> <name>i</name></name> <operator>&lt;</operator> <name><name>other</name><operator>.</operator><name>i</name></name></expr>;</return>
  }</block></function>
</public>}</block>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name><name>dirI</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dirJ</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>Poz</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>dir</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>STEF</name></cpp:ifdef>
  <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name><name>set</name> <argument_list type="generic">&lt; <argument><expr><name>PozL</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>lines</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name><name>set</name> <argument_list type="generic">&lt; <argument><expr><name>PozC</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>cols</name><argument_list>(<argument><expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>k</name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control> <block>{

    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>lines</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><block>{<expr><name>a</name></expr>, <expr><name>b</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cols</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><block>{<expr><name>a</name></expr>, <expr><name>b</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>n1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>m1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>nI</name> <init>= <expr><name>n</name></expr></init></decl>, <decl><type ref="prev"/><name>mI</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Poz</name></type> <name>d</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>ll</name></type> <name>moved</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>cntErased</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{

    <if>if <condition>(<expr><name><name>d</name><operator>.</operator><name>dir</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{

      <if>if <condition>(<expr><name><name>lines</name><index>[<expr><name><name>d</name><operator>.</operator><name>i</name></name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>lines</name><index>[<expr><name><name>d</name><operator>.</operator><name>i</name></name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>auto</name></type> <name>st</name> <init>= <expr><operator>*</operator><name><name>lines</name><index>[<expr><name><name>d</name><operator>.</operator><name>i</name></name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>st</name><operator>.</operator><name>j</name></name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator> <name>j</name></expr></incr>)</control> <block>{
          <if>if <condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name><name>cols</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>n</name> <operator>-</operator> <name>n1</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
          }</block></then></if>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n1</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator> <name>cntErased</name></expr>;</expr_stmt>
          }</block></for>
        }</block></for>

        <expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>j</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><name><name>d</name><operator>.</operator><name>dir</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>moved</name> <operator>+=</operator> <name>m</name> <operator>-</operator> <name><name>d</name><operator>.</operator><name>j</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>d</name><operator>.</operator><name>j</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator> <name>n1</name></expr>;</expr_stmt>
    }</block></then>
    <elseif>else <if>if <condition>(<expr><name><name>d</name><operator>.</operator><name>dir</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{

      <if>if <condition>(<expr><name><name>cols</name><index>[<expr><name><name>d</name><operator>.</operator><name>j</name></name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>cols</name><index>[<expr><name><name>d</name><operator>.</operator><name>j</name></name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>auto</name></type> <name>st</name> <init>= <expr><operator>*</operator><name><name>cols</name><index>[<expr><name><name>d</name><operator>.</operator><name>j</name></name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>st</name><operator>.</operator><name>i</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control> <block>{
          <if>if <condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>m</name> <operator>-</operator> <name>m1</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
          }</block></then></if>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>m1</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator> <name>j</name></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>cols</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator> <name>cntErased</name></expr>;</expr_stmt>
          }</block></for>
        }</block></for>

        <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>i</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><name><name>d</name><operator>.</operator><name>dir</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>moved</name> <operator>+=</operator> <name>n</name> <operator>-</operator> <name><name>d</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>d</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>--</operator> <name>m</name></expr>;</expr_stmt>
    }</block></then></if></elseif>
    <elseif>else <if>if <condition>(<expr><name><name>d</name><operator>.</operator><name>dir</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name><name>lines</name><index>[<expr><name><name>d</name><operator>.</operator><name>i</name></name></expr>]</index></name><operator>.</operator><call><name>rbegin</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>lines</name><index>[<expr><name><name>d</name><operator>.</operator><name>i</name></name></expr>]</index></name><operator>.</operator><call><name>rend</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>auto</name></type> <name>st</name> <init>= <expr><operator>*</operator><name><name>lines</name><index>[<expr><name><name>d</name><operator>.</operator><name>i</name></name></expr>]</index></name><operator>.</operator><call><name>rbegin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>st</name><operator>.</operator><name>j</name></name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <name>m1</name></expr>;</condition> <incr><expr><operator>--</operator> <name>j</name></expr></incr>)</control> <block>{
          <if>if <condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name><name>cols</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>n</name> <operator>-</operator> <name>n1</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
          }</block></then></if>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n1</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator> <name>cntErased</name></expr>;</expr_stmt>
          }</block></for>
        }</block></for>

        <expr_stmt><expr><name>m1</name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>j</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><name><name>d</name><operator>.</operator><name>dir</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>moved</name> <operator>+=</operator> <name><name>d</name><operator>.</operator><name>j</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>d</name><operator>.</operator><name>j</name></name> <operator>=</operator> <name>m1</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>--</operator> <name>n</name></expr>;</expr_stmt>
    }</block></then></if></elseif>
    <elseif>else <if>if <condition>(<expr><name><name>d</name><operator>.</operator><name>dir</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name><name>cols</name><index>[<expr><name><name>d</name><operator>.</operator><name>j</name></name></expr>]</index></name><operator>.</operator><call><name>rbegin</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>cols</name><index>[<expr><name><name>d</name><operator>.</operator><name>j</name></name></expr>]</index></name><operator>.</operator><call><name>rend</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>auto</name></type> <name>st</name> <init>= <expr><operator>*</operator><name><name>cols</name><index>[<expr><name><name>d</name><operator>.</operator><name>j</name></name></expr>]</index></name><operator>.</operator><call><name>rbegin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>st</name><operator>.</operator><name>i</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>n1</name></expr>;</condition> <incr><expr><operator>--</operator> <name>i</name></expr></incr>)</control> <block>{
          <if>if <condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>m</name> <operator>-</operator> <name>m1</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
          }</block></then></if>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>m1</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator> <name>j</name></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>cols</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator> <name>cntErased</name></expr>;</expr_stmt>
          }</block></for>
        }</block></for>

        <expr_stmt><expr><name>n1</name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>i</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><name><name>d</name><operator>.</operator><name>dir</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>moved</name> <operator>+=</operator> <name><name>d</name><operator>.</operator><name>i</name></name> <operator>-</operator> <name>n1</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>d</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name>n1</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator> <name>m1</name></expr>;</expr_stmt>
    }</block></then></if></elseif></if>

    <if>if <condition>(<expr><name>moved</name> <operator>+</operator> <name>cntErased</name> <operator>==</operator> <name>nI</name> <operator>*</operator> <name>mI</name></expr>)</condition><then> <block>{
      <break>break;</break>
    }</block></then></if>
  }</block></while>

  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
}</block></function>
</unit>
