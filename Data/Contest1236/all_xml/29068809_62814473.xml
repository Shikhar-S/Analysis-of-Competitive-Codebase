<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29068809_62814473.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt; <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>obs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt; <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>flagx</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>flagy</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>tot</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>del</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>)</parameter_list>
<block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>x1</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>x2</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>y1</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>y2</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>it</name> <operator>=</operator> <call><name><name>obs</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>it</name><operator>==</operator><call><name><name>obs</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        <expr_stmt><expr><operator>--</operator><name><name>flagx</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>--</operator><name><name>flagy</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>obs</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for></block></for>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name><name>flagx</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><operator>++</operator><name><name>flagy</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>obs</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>uu</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>dd</name><init>=<expr><name>n</name></expr></init></decl>,<decl><type ref="prev"/><name>ll</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>rr</name><init>=<expr><name>m</name></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>int</name></type> <name>tmp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>uu</name><operator>&lt;=</operator><name>dd</name> <operator>&amp;&amp;</operator> <name>ll</name><operator>&lt;=</operator><name>rr</name></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>tmp</name><operator>=</operator><name>tmp</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt><if>if <condition>(<expr><name>tmp</name><operator>==</operator><literal type="number">5</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>tmp</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>tmp</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <if>if <condition>(<expr><name><name>flagx</name><index>[<expr><name>uu</name></expr>]</index></name></expr>)</condition><then><block>{
                <decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><name>uu</name></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><name>ll</name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init>;</init><condition><expr><name>y</name><operator>&lt;=</operator><name>rr</name></expr>;</condition><incr><expr><operator>++</operator><name>y</name></expr></incr>)</control><block>{
                    <expr_stmt><expr><name>it</name><operator>=</operator><call><name><name>obs</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>it</name><operator>!=</operator><call><name><name>obs</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><break>break;</break></block></then></if>
                }</block></for>
                <decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>= <expr><call><name>del</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>dd</name></expr></argument>,<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition><then><block>{<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
                <expr_stmt><expr><name>rr</name><operator>=</operator><name>y</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>tot</name><operator>+=</operator><operator>(</operator><name>rr</name><operator>-</operator><name>ll</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>uu</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>tmp</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <if>if <condition>(<expr><name><name>flagy</name><index>[<expr><name>rr</name></expr>]</index></name></expr>)</condition><then><block>{
                <decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><name>uu</name></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><name>rr</name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init>;</init><condition><expr><name>x</name><operator>&lt;=</operator><name>dd</name></expr>;</condition><incr><expr><operator>++</operator><name>x</name></expr></incr>)</control><block>{
                    <expr_stmt><expr><name>it</name><operator>=</operator><call><name><name>obs</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>it</name><operator>!=</operator><call><name><name>obs</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><break>break;</break></block></then></if>
                }</block></for>
                <decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>= <expr><call><name>del</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>dd</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition><then><block>{<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
                <expr_stmt><expr><name>dd</name><operator>=</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>tot</name><operator>+=</operator><operator>(</operator><name>dd</name><operator>-</operator><name>uu</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><operator>--</operator><name>rr</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>tmp</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
            <if>if <condition>(<expr><name><name>flagx</name><index>[<expr><name>dd</name></expr>]</index></name></expr>)</condition><then><block>{
                <decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><name>dd</name></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><name>rr</name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init>;</init><condition><expr><name>y</name><operator>&gt;=</operator><name>ll</name></expr>;</condition><incr><expr><operator>--</operator><name>y</name></expr></incr>)</control><block>{
                    <expr_stmt><expr><name>it</name><operator>=</operator><call><name><name>obs</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>it</name><operator>!=</operator><call><name><name>obs</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><break>break;</break></block></then></if>
                }</block></for>
                <decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>= <expr><call><name>del</name><argument_list>(<argument><expr><name>uu</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition><then><block>{<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
                <expr_stmt><expr><name>ll</name><operator>=</operator><name>y</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>tot</name><operator>+=</operator><operator>(</operator><name>rr</name><operator>-</operator><name>ll</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><operator>--</operator><name>dd</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>tmp</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><then><block>{
            <if>if <condition>(<expr><name><name>flagy</name><index>[<expr><name>ll</name></expr>]</index></name></expr>)</condition><then><block>{
                <decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><name>dd</name></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><name>ll</name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init>;</init><condition><expr><name>x</name><operator>&gt;=</operator><name>uu</name></expr>;</condition><incr><expr><operator>--</operator><name>x</name></expr></incr>)</control><block>{
                    <expr_stmt><expr><name>it</name><operator>=</operator><call><name><name>obs</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>it</name><operator>!=</operator><call><name><name>obs</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><break>break;</break></block></then></if>
                }</block></for>
                <decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>= <expr><call><name>del</name><argument_list>(<argument><expr><name>uu</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition><then><block>{<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
                <expr_stmt><expr><name>uu</name><operator>=</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>tot</name><operator>+=</operator><operator>(</operator><name>dd</name><operator>-</operator><name>uu</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>ll</name></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="line">//printf("%d %d %d %d\n",uu,dd,ll,rr);</comment>
    }</block></while>
    <if>if <condition>(<expr><name>tot</name><operator>+</operator><name>k</name><operator>==</operator><literal type="number">1LL</literal><operator>*</operator><name>n</name><operator>*</operator><name>m</name> <operator>&amp;&amp;</operator> <call><name><name>obs</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>




</unit>
