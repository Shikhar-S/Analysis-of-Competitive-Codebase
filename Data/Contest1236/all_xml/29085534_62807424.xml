<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29085534_62807424.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>obs_x</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>obs_y</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
 
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>precision</name></name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>--</operator><name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>--</operator><name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>obs_y</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>obs_x</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>stop_x_max</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>stop_y_max</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>stop_x_min</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>stop_y_min</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dest</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cnt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
        <if>if <condition>(<expr><name>dest</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>obs_y</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>it</name> <operator>!=</operator> <name><name>obs_y</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>it</name> <operator>&lt;</operator> <name>stop_x_max</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>stop_x_max</name> <operator>=</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt></block></then></if>
            <if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>stop_x_max</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <call>(<name>long</name> <name>long</name>)<argument_list>(<argument><expr><name>stop_x_max</name> <operator>-</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <name>stop_x_max</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>stop_x_max</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <if>if <condition>(<expr><name>dest</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>obs_x</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>it</name> <operator>!=</operator> <name><name>obs_x</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>it</name> <operator>&lt;</operator> <name>stop_y_max</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>stop_y_max</name> <operator>=</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt></block></then></if>
            <if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>stop_y_max</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <call>(<name>long</name> <name>long</name>)<argument_list>(<argument><expr><name>stop_y_max</name> <operator>-</operator> <name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name> <operator>=</operator> <name>stop_y_max</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>stop_y_max</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <if>if <condition>(<expr><name>dest</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>obs_y</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>it</name> <operator>!=</operator> <name><name>obs_y</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><operator>--</operator><name>it</name></expr>;</expr_stmt>
                <if>if <condition>(<expr><operator>*</operator><name>it</name> <operator>&gt;</operator> <name>stop_x_min</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>stop_x_min</name> <operator>=</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt></block></then></if>
            }</block></then></if>
            <if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>stop_x_min</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <call>(<name>long</name> <name>long</name>)<argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>stop_x_min</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <name>stop_x_min</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>stop_x_min</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dest</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <if>if <condition>(<expr><name>dest</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>obs_x</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>it</name> <operator>!=</operator> <name><name>obs_x</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><operator>--</operator><name>it</name></expr>;</expr_stmt>
                <if>if <condition>(<expr><operator>*</operator><name>it</name> <operator>&gt;</operator> <name>stop_y_min</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>stop_y_min</name> <operator>=</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt></block></then></if>
            }</block></then></if>
            <if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>stop_y_min</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <call>(<name>long</name> <name>long</name>)<argument_list>(<argument><expr><name>y</name> <operator>-</operator> <name>stop_y_min</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name> <operator>=</operator> <name>stop_y_min</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>stop_y_min</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dest</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
    }</block></while>
    <if>if <condition>(<expr><name>n</name> <operator>*</operator> <name>m</name> <operator>-</operator> <name>k</name> <operator>&lt;=</operator> <name>cnt</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
    <else>else <block>{
        <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>y</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>obs_x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>obs_x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>y</name></expr>;</expr_stmt>
        }</block></while>
        <if>if <condition>(<expr><name>n</name> <operator>*</operator> <name>m</name> <operator>-</operator> <name>k</name> <operator>&lt;=</operator> <name>cnt</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
