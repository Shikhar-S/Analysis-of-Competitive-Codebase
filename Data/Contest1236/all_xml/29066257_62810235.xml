<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29066257_62810235.cpp"><comment type="block">/*
  user: sky48
  language: c++
  for dream for young
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;=b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>200005</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>mp</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>lef</name></decl>,<decl><type ref="prev"/><name>rig</name></decl>,<decl><type ref="prev"/><name>u</name></decl>,<decl><type ref="prev"/><name>nn</name></decl>,<decl><type ref="prev"/><name>mm</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>upp</name></decl>,<decl><type ref="prev"/><name>dwn</name></decl>,<decl><type ref="prev"/><name><name>p</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>tim</name></decl>;</decl_stmt> 
<struct>struct <name>node</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt> 
</public>}</block><decl><name><name>f</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</struct>
<function><type><name>int</name></type> <name>gets</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt><decl_stmt><decl><type><name>bool</name></type> <name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block type="pseudo"><if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></block></while> <expr_stmt><expr><name>v</name><operator>=</operator><name>ch</name><operator>-</operator><literal type="number">48</literal></expr>;</expr_stmt>
	<while>while<condition>( <expr><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>v</name><operator>=</operator><operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><name>ch</name><operator>-</operator><literal type="number">48</literal></expr>;</expr_stmt></block></while>
	<return>return <expr><ternary><condition><expr><name>f</name></expr>?</condition><then><expr><operator>-</operator><name>v</name></expr></then><else>:<expr><name>v</name></expr></else></ternary></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>cmp_upp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>node</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>node</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><ternary><condition><expr><name><name>x</name><operator>.</operator><name>a</name></name><operator>==</operator><name><name>y</name><operator>.</operator><name>a</name></name></expr>?</condition><then><expr><name><name>x</name><operator>.</operator><name>b</name></name><operator>&lt;</operator><name><name>y</name><operator>.</operator><name>b</name></name></expr></then><else>:<expr><name><name>x</name><operator>.</operator><name>a</name></name><operator>&lt;</operator><name><name>y</name><operator>.</operator><name>a</name></name></expr></else></ternary></expr>;</return> }</block></function>
<function><type><name>bool</name></type> <name>cmp_rig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>node</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>node</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><ternary><condition><expr><name><name>x</name><operator>.</operator><name>b</name></name><operator>==</operator><name><name>y</name><operator>.</operator><name>b</name></name></expr>?</condition><then><expr><name><name>x</name><operator>.</operator><name>a</name></name><operator>&lt;</operator><name><name>y</name><operator>.</operator><name>a</name></name></expr></then><else>:<expr><name><name>x</name><operator>.</operator><name>b</name></name><operator>&gt;</operator><name><name>y</name><operator>.</operator><name>b</name></name></expr></else></ternary></expr>;</return> }</block></function>
<function><type><name>bool</name></type> <name>cmp_dwn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>node</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>node</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><ternary><condition><expr><name><name>x</name><operator>.</operator><name>a</name></name><operator>==</operator><name><name>y</name><operator>.</operator><name>a</name></name></expr>?</condition><then><expr><name><name>x</name><operator>.</operator><name>b</name></name><operator>&gt;</operator><name><name>y</name><operator>.</operator><name>b</name></name></expr></then><else>:<expr><name><name>x</name><operator>.</operator><name>a</name></name><operator>&gt;</operator><name><name>y</name><operator>.</operator><name>a</name></name></expr></else></ternary></expr>;</return> }</block></function>
<function><type><name>bool</name></type> <name>cmp_lef</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>node</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>node</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><ternary><condition><expr><name><name>x</name><operator>.</operator><name>b</name></name><operator>==</operator><name><name>y</name><operator>.</operator><name>b</name></name></expr>?</condition><then><expr><name><name>x</name><operator>.</operator><name>a</name></name><operator>&gt;</operator><name><name>y</name><operator>.</operator><name>a</name></name></expr></then><else>:<expr><name><name>x</name><operator>.</operator><name>b</name></name><operator>&lt;</operator><name><name>y</name><operator>.</operator><name>b</name></name></expr></else></ternary></expr>;</return> }</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list>
<block>{
<comment type="line">//  freopen("tt.txt","r",stdin);</comment>
	<expr_stmt><expr><name>nn</name><operator>=</operator><call><name>gets</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>mm</name><operator>=</operator><call><name>gets</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>=</operator><call><name>gets</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
	<if>if<condition>(<expr><operator>!</operator><name>n</name></expr>)</condition><then><block>{ <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name><operator>=</operator><call><name>gets</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name><operator>=</operator><call><name>gets</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name></expr>]</index><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> 
	}</block>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">4</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>f</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> 
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>+</operator><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">1</literal><operator>+</operator><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name>n</name></expr></argument>,<argument><expr><name>cmp_upp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>+</operator><name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">1</literal><operator>+</operator><name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><name>n</name></expr></argument>,<argument><expr><name>cmp_rig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>+</operator><name><name>f</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">1</literal><operator>+</operator><name><name>f</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>+</operator><name>n</name></expr></argument>,<argument><expr><name>cmp_dwn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>+</operator><name><name>f</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">1</literal><operator>+</operator><name><name>f</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>+</operator><name>n</name></expr></argument>,<argument><expr><name>cmp_lef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>lef</name><operator>=</operator><name>upp</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>dwn</name><operator>=</operator><name>nn</name></expr><operator>,</operator> <expr><name>rig</name><operator>=</operator><name>mm</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>u</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> 
	<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{
		<while>while<condition>(<expr><operator>(</operator><name><name>f</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>b</name><operator>&lt;</operator><name>lef</name> <operator>||</operator> <name><name>f</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>b</name><operator>&gt;</operator><name>rig</name> <operator>||</operator> <name><name>f</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>a</name><operator>&lt;</operator><name>upp</name> <operator>||</operator><name><name>f</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>a</name><operator>&gt;</operator><name>dwn</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>u</name></expr>]</index></name><operator>&lt;=</operator><name>n</name></expr> )</condition> <block type="pseudo"><expr_stmt><expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></while> 
<comment type="line">//		cout&lt;&lt;" wahile "&lt;&lt;u&lt;&lt;" ## "&lt;&lt;upp&lt;&lt;" "&lt;&lt;rig&lt;&lt;" "&lt;&lt;dwn&lt;&lt;" "&lt;&lt;lef&lt;&lt;" "&lt;&lt;p[u]&lt;&lt;endl; </comment>
		<if>if<condition>(<expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block>{ <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
		<if>if<condition>(<expr><name>u</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name><name>f</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>a</name><operator>==</operator><name>upp</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>tim</name><operator>=</operator><name><name>f</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>b</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
				<comment type="line">//rep(i,lef,rig) if(!mp[upp][i]){ puts("No"); return 0;}</comment>
				<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>upp</argument>,<argument>dwn</argument>)</argument_list></macro><macro><name>rep</name><argument_list>(<argument>j</argument>,<argument>tim+<literal type="number">1</literal></argument>,<argument>rig</argument>)</argument_list></macro>  <if>if<condition>(<expr><operator>!</operator><name><name>mp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{ <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
				<expr_stmt><expr><name>rig</name><operator>=</operator><name>tim</name></expr>;</expr_stmt> 
			}</block></then></if>
			<expr_stmt><expr><name>upp</name><operator>++</operator></expr>;</expr_stmt> 
		}</block></then></if>
		<if>if<condition>(<expr><name>u</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name><name>f</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>b</name><operator>==</operator><name>rig</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>tim</name><operator>=</operator><name><name>f</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>a</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
				<comment type="line">//rep(i,upp,dwn) </comment>
				<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>tim+<literal type="number">1</literal></argument>,<argument>dwn</argument>)</argument_list></macro> <macro><name>rep</name><argument_list>(<argument>j</argument>,<argument>lef</argument>,<argument>rig</argument>)</argument_list></macro> <if>if<condition>(<expr><operator>!</operator><name><name>mp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{ <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
				<expr_stmt><expr><name>dwn</name><operator>=</operator><name>tim</name></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>rig</name><operator>--</operator></expr>;</expr_stmt> 
		}</block></then></if>
		<if>if<condition>(<expr><name>u</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
<comment type="line">//			cout&lt;&lt;f[u][p[u]].a&lt;&lt;"   "&lt;&lt;dwn&lt;&lt;endl;</comment>
			<if>if<condition>(<expr><name><name>f</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>a</name><operator>==</operator><name>dwn</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>tim</name><operator>=</operator><name><name>f</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>b</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<comment type="line">//				cout&lt;&lt;tim&lt;&lt;endl; </comment>
				<comment type="line">//rep(i,lef,rig) </comment>
				<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>upp</argument>,<argument>dwn</argument>)</argument_list></macro> <macro><name>rep</name><argument_list>(<argument>j</argument>,<argument>lef</argument>,<argument>tim-<literal type="number">1</literal></argument>)</argument_list></macro> <if>if<condition>(<expr><operator>!</operator><name><name>mp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{ <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
				<expr_stmt><expr><name>lef</name><operator>=</operator><name>tim</name></expr>;</expr_stmt> 
			}</block></then></if>
			<expr_stmt><expr><name>dwn</name><operator>--</operator></expr>;</expr_stmt> 
		}</block></then></if>
		<if>if<condition>(<expr><name>u</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name><name>f</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>b</name><operator>==</operator><name>lef</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>tim</name><operator>=</operator><name><name>f</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>a</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt> 
				<comment type="line">//rep(i,upp,dwn) </comment>
				<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>upp</argument>,<argument>tim-<literal type="number">1</literal></argument>)</argument_list></macro><macro><name>rep</name><argument_list>(<argument>j</argument>,<argument>lef</argument>,<argument>rig</argument>)</argument_list></macro> <if>if<condition>(<expr><operator>!</operator><name><name>mp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{ <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
				<expr_stmt><expr><name>upp</name><operator>=</operator><name>tim</name></expr>;</expr_stmt> 
			}</block></then></if>
			<expr_stmt><expr><name>lef</name><operator>++</operator></expr>;</expr_stmt> 
		}</block></then></if>
		
		<expr_stmt><expr><name>u</name><operator>=</operator><name>u</name><operator>%</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt> 
		
	}</block></while>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


<comment type="block">/*

*/</comment></unit>
