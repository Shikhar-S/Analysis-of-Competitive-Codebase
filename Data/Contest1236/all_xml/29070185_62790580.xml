<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29070185_62790580.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro> <cpp:value>std::ios::sync_with_stdio(false); std::cin.tie(0);std::cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>I</name></type></parameter>,<parameter><type><name>N</name></type></parameter>,<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=I;i&lt;N;i+=X)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gcd</name></cpp:macro> <cpp:value>__gcd</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define> 
<typedef>typedef <type><name>int</name></type> <name>itn</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type>  <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type>  <name>ull</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>qpow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>k</name><init>=<expr><name>a</name></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>b</name></expr>)</condition><block>{
        <if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><name>ans</name><operator>*</operator><name>k</name><operator>%</operator><name>m</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>k</name><operator>=</operator><name>k</name><operator>*</operator><name>k</name><operator>%</operator><name>m</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>IOS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>qpow</name><argument_list>(<argument><expr><call><name>qpow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
