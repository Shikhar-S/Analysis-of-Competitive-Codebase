<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29091044_62785167.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<struct>struct <name>_in</name> <block>{<public type="default">
	<function type="operator"><type><specifier>const</specifier> <name>_in</name></type> <name>operator <name>,</name></name> <parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
		<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name>k</name> <init>= <expr><call><name>getchar</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="char">'9'</literal> <operator>||</operator> <name>k</name> <operator>&lt;</operator> <literal type="char">'0'</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>getchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
		<while>while <condition>(<expr><name>k</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{
			<expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>k</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>getchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></while>
		<return>return <expr><operator>*</operator> <name>this</name></expr>;</return>
	}</block></function>
</public>}</block><decl><name>in</name></decl>;</struct>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list> <block>{
	
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>in</name></expr><operator>,</operator> <expr><name>t</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>in</name></expr><operator>,</operator> <expr><name>a</name></expr><operator>,</operator> <expr><name>b</name></expr><operator>,</operator> <expr><name>c</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>b</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else<block>{
			<expr_stmt><expr><name>b</name> <operator>-=</operator> <name>k</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><name>k</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>k</name> <operator>=</operator> <name>b</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>a</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="number">3</literal> <operator>*</operator> <name>a</name></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="number">3</literal> <operator>*</operator> <name>k</name></expr>;</expr_stmt></block></else></if>
			<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
