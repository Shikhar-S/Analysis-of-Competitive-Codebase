<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29088469_62812836.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pil</name></cpp:macro> <cpp:value>pair&lt;int, long long&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pli</name></cpp:macro> <cpp:value>pair&lt;long long, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;long long, long long&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair((x), (y))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>ll</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>v1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>v2</name></decl>;</decl_stmt>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>v1</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>v2</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>xi</name></decl>, <decl><type ref="prev"/><name>xj</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>xi</name> <operator>&gt;&gt;</operator> <name>xj</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>xi</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>xj</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v1</name><index>[<expr><name>xi</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>xj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v2</name><index>[<expr><name>xj</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>xi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>v2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>v2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>v2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>pii</name></type> <name>pos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>np</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mni</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mxi</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mxj</name> <init>= <expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mnj</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>cnt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>st</name></decl>;</decl_stmt>

    <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
        <comment type="line">//cout &lt;&lt; pos.fi &lt;&lt; ' ' &lt;&lt; pos.se &lt;&lt; ' ' &lt;&lt; cnt &lt;&lt; ' ' &lt;&lt; np &lt;&lt; endl;</comment>
        <if>if <condition>(<expr><name>np</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>mxj</name></expr></argument>, <argument><expr><operator>*</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>v1</name><index>[<expr><name><name>pos</name><operator>.</operator><name>fi</name></name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>v1</name><index>[<expr><name><name>pos</name><operator>.</operator><name>fi</name></name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>se</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">//cout &lt;&lt; mxj &lt;&lt; ' ' &lt;&lt; s &lt;&lt; endl;</comment>
            <if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>&lt;</operator> <name><name>pos</name><operator>.</operator><name>se</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>s</name> <operator>==</operator> <name><name>pos</name><operator>.</operator><name>se</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>st</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name>s</name> <operator>-</operator> <name><name>pos</name><operator>.</operator><name>se</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pos</name><operator>.</operator><name>se</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>mxj</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>mxj</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>se</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>np</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>np</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>mxi</name></expr></argument>, <argument><expr><operator>*</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>v2</name><index>[<expr><name><name>pos</name><operator>.</operator><name>se</name></name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>v2</name><index>[<expr><name><name>pos</name><operator>.</operator><name>se</name></name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>fi</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">//cout &lt;&lt; mxi &lt;&lt; endl;</comment>
            <if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>&lt;</operator> <name><name>pos</name><operator>.</operator><name>fi</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>s</name> <operator>==</operator> <name><name>pos</name><operator>.</operator><name>fi</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>st</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name>s</name> <operator>-</operator> <name><name>pos</name><operator>.</operator><name>fi</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pos</name><operator>.</operator><name>fi</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>mxi</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>mxi</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>fi</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>np</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>np</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name>mnj</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>--</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>v1</name><index>[<expr><name><name>pos</name><operator>.</operator><name>fi</name></name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>v1</name><index>[<expr><name><name>pos</name><operator>.</operator><name>fi</name></name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>se</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>&gt;</operator> <name><name>pos</name><operator>.</operator><name>se</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>s</name> <operator>==</operator> <name><name>pos</name><operator>.</operator><name>se</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>st</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name><name>pos</name><operator>.</operator><name>se</name></name> <operator>-</operator> <name>s</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pos</name><operator>.</operator><name>se</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>mnj</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>mnj</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>se</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>np</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name>mni</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>--</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>v2</name><index>[<expr><name><name>pos</name><operator>.</operator><name>se</name></name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>v2</name><index>[<expr><name><name>pos</name><operator>.</operator><name>se</name></name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>fi</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>&gt;</operator> <name><name>pos</name><operator>.</operator><name>fi</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>s</name> <operator>==</operator> <name><name>pos</name><operator>.</operator><name>fi</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>st</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name><name>pos</name><operator>.</operator><name>fi</name></name> <operator>-</operator> <name>s</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pos</name><operator>.</operator><name>fi</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>mni</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>mni</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>fi</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>np</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>


    <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>ll</name><operator>)</operator><name>n</name> <operator>*</operator> <name>m</name> <operator>-</operator> <name>k</name><operator>)</operator> <operator>==</operator> <name>cnt</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></else></if>
    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
