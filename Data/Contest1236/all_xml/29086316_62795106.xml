<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29086316_62795106.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastio</name></cpp:macro> <cpp:value>ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>display</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (auto x : v) cout &lt;&lt; x &lt;&lt; ", "</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; (#x) &lt;&lt; " = [ ";display(x); cout &lt;&lt; "]\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>ull</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<comment type="line">// DEBUG TEMPLATE by livw</comment>
<function><type><name>void</name></type> <name>__print</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>__print</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>__print</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>__print</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>__print</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'\''</literal> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>__print</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>string</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'\"'</literal> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="char">'\"'</literal></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>__print</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>x</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>}</block></function>
 
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>V</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>__print</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>V</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'{'</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>__print</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">','</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>__print</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'}'</literal></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>__print</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'{'</literal></expr>;</expr_stmt> <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>i</name><operator>:</operator> <name>x</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>f</name><operator>++</operator></expr> ?</condition><then> <expr><literal type="string">","</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr><operator>,</operator> <expr><call><name>__print</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>_print</name><parameter_list>()</parameter_list> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"]\n"</literal></expr>;</expr_stmt>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>V</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>_print</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>V</name><modifier>...</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><call><name>__print</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if>if <condition>(<expr><sizeof type="pack">sizeof...<argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><call><name>_print</name><argument_list>(<argument><expr><name>v</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>INCLUDEWHENOFFLINE</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; "[" &lt;&lt; #x &lt;&lt; "] = ["; _print(x)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>fastio</name></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>stop</name> <init>= <expr><name>n</name> <operator>*</operator> <name>n</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>ans</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        
        <if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <expr_stmt><expr><name><name>ans</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>pos</name><operator>++</operator></expr>;</expr_stmt>
            }</block></for>
        }</block></then>
        <else>else<block>{
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>
            <block>{
                <expr_stmt><expr><name><name>ans</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>pos</name><operator>++</operator></expr>;</expr_stmt>
            }</block></for>
        }</block></else></if>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>ans</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


</unit>
