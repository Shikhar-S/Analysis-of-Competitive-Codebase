<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29068562_62814049.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive>  <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive>   <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive>   <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive>    <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive>    <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive>    <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive>    <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive>     <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive>     <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive>     <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive>     <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive>      <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive>       <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive>       <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>line</name></cpp:macro> <cpp:value>printf("---------------------------\n")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a, b, sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>acos(-1)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>x</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>y</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>getAns</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>nowx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>nowy</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>le</name> <init>= <expr><name>t</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>can</name></decl>, <decl><type ref="prev"/><name>choose</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>minnx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxxx</name> <init>= <expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>minny</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxxy</name> <init>= <expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{
		<if>if<condition>(<expr><name>le</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>can</name> <operator>=</operator> <call><name>lower_bound</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>x</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nowy</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>x</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>x</name><index>[<expr><name>nowx</name></expr>]</index><index>[<expr><name>can</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>nowx</name></expr>]</index><index>[<expr><name>can</name></expr>]</index></name></expr></argument>, <argument><expr><name>maxxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>x</name><index>[<expr><name>nowx</name></expr>]</index><index>[<expr><name>can</name></expr>]</index></name> <operator>==</operator> <name>nowy</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
				<break>break;</break>
			}</block></then></if>
			<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>x</name><index>[<expr><name>nowx</name></expr>]</index><index>[<expr><name>can</name></expr>]</index></name> <operator>-</operator> <name>nowy</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>nowy</name> <operator>=</operator> <name><name>x</name><index>[<expr><name>nowx</name></expr>]</index><index>[<expr><name>can</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<comment type="line">//			x[nowx][can] = nowy;</comment>
			<expr_stmt><expr><name>minnx</name> <operator>=</operator> <name>nowx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>le</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>le</name> <operator>%=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		}</block></then> <elseif>else <if>if<condition>(<expr><name>le</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>can</name> <operator>=</operator> <call><name>lower_bound</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nowx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>y</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>y</name><index>[<expr><name>nowy</name></expr>]</index><index>[<expr><name>can</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>nowy</name></expr>]</index><index>[<expr><name>can</name></expr>]</index></name></expr></argument>, <argument><expr><name>maxxx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>y</name><index>[<expr><name>nowy</name></expr>]</index><index>[<expr><name>can</name></expr>]</index></name> <operator>==</operator> <name>nowx</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
				<break>break;</break>
			}</block></then></if>
			<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>y</name><index>[<expr><name>nowy</name></expr>]</index><index>[<expr><name>can</name></expr>]</index></name> <operator>-</operator> <name>nowx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>nowx</name> <operator>=</operator> <name><name>y</name><index>[<expr><name>nowy</name></expr>]</index><index>[<expr><name>can</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<comment type="line">//			y[nowy][can] = nowx;</comment>
			<expr_stmt><expr><name>maxxy</name> <operator>=</operator> <name>nowy</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>le</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>le</name> <operator>%=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		}</block></then></if></elseif> <elseif>else <if>if<condition>(<expr><name>le</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>can</name> <operator>=</operator> <call><name>lower_bound</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>x</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nowy</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>x</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>can</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>x</name><index>[<expr><name>nowx</name></expr>]</index><index>[<expr><name>can</name></expr>]</index></name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>minny</name></expr></argument>, <argument><expr><name><name>x</name><index>[<expr><name>nowx</name></expr>]</index><index>[<expr><name>can</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>x</name><index>[<expr><name>nowx</name></expr>]</index><index>[<expr><name>can</name></expr>]</index></name> <operator>==</operator> <name>nowy</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
				<break>break;</break>
			}</block></then></if>
			<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>nowy</name> <operator>-</operator> <name><name>x</name><index>[<expr><name>nowx</name></expr>]</index><index>[<expr><name>can</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>nowy</name> <operator>=</operator> <name><name>x</name><index>[<expr><name>nowx</name></expr>]</index><index>[<expr><name>can</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<comment type="line">//			x[nowx][can] = nowy;</comment>
			<expr_stmt><expr><name>maxxx</name> <operator>=</operator> <name>nowx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>le</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>le</name> <operator>%=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		}</block></then></if></elseif> <else>else <block>{
			<expr_stmt><expr><name>can</name> <operator>=</operator> <call><name>lower_bound</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nowx</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>y</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>can</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>y</name><index>[<expr><name>nowy</name></expr>]</index><index>[<expr><name>can</name></expr>]</index></name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>nowy</name></expr>]</index><index>[<expr><name>can</name></expr>]</index></name></expr></argument>, <argument><expr><name>minnx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>y</name><index>[<expr><name>nowy</name></expr>]</index><index>[<expr><name>can</name></expr>]</index></name> <operator>==</operator> <name>nowx</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
				<break>break;</break>
			}</block></then></if>
			<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>nowx</name> <operator>-</operator> <name><name>y</name><index>[<expr><name>nowy</name></expr>]</index><index>[<expr><name>can</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>nowx</name> <operator>=</operator> <name><name>y</name><index>[<expr><name>nowy</name></expr>]</index><index>[<expr><name>can</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<comment type="line">//			y[nowy][can] = nowx;</comment>
			<expr_stmt><expr><name>minny</name> <operator>=</operator> <name>nowy</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>le</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>le</name> <operator>%=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name>max</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if<condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if> 
		<if>if<condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if> 
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>x</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>y</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name>max</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if<condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if> 
		<if>if<condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if> 
	}</block></for>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>ans</name> <operator>=</operator> <name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>ans</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<comment type="line">//	x[1][0] = 1;</comment>
<comment type="line">//	y[1][0] = 1;</comment>
	<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><call><name>getAns</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>ans</name> <operator>+</operator> <name>k</name> <operator>==</operator> <name>n</name> <operator>*</operator> <name>m</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	}</block></else></if>
}</block></function></unit>
