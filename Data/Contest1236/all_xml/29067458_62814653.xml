<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29067458_62814653.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<comment type="line">//#include &lt;bits/stdc++.h&gt;</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POP</name></cpp:macro> <cpp:value>pop_back()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POP</name></cpp:macro> <cpp:value>pop_back()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls</name></cpp:macro> <cpp:value>x&lt;&lt;1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rs</name></cpp:macro> <cpp:value>x&lt;&lt;1|1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>m</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a[x].l+a[x].r&gt;&gt;1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PII</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FI</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SE</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VI</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QI</name></cpp:macro> <cpp:value>queue&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI</name></cpp:macro> <cpp:value>stack&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name></cpp:macro> <cpp:value>cout&lt;&lt;"debug"&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLL</name></cpp:macro> <cpp:value>pair&lt;LL,LL&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PDD</name></cpp:macro> <cpp:value>pair&lt;double,double&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULL</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fo</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i=a;i&lt;=b;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fd</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i=a;i&gt;=b;--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(x,a,sizeof(x));</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">2e5</literal><operator>+</operator><literal type="number">9</literal></expr></init></decl>,<decl><type ref="prev"/><name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>,<decl><type ref="prev"/><name>INF</name><init>=<expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmx</name></decl>,<decl><type ref="prev"/><name>cmn</name></decl>,<decl><type ref="prev"/><name>dmx</name></decl>,<decl><type ref="prev"/><name>dmn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmx</name><operator>=</operator><name>m</name></expr><operator>,</operator><expr><name>cmn</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>dmx</name><operator>=</operator><name>n</name></expr><operator>,</operator><expr><name>dmn</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>b</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
    <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
     <expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
    <expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <if>if<condition>(<expr><name>k</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
        <comment type="line">//cout&lt;&lt;"Yes"&lt;&lt;endl;</comment>
        <comment type="line">//return 0;</comment>
    }</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>to</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>y</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>tot</name><init>=<expr><literal type="number">1ll</literal><operator>*</operator><name>n</name><operator>*</operator><name>m</name></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>ans</name><operator>+</operator><name>k</name><operator>&lt;</operator><name>tot</name></expr>)</condition><block>{
        <comment type="line">//cout&lt;&lt;x&lt;&lt;' '&lt;&lt;y&lt;&lt;endl;</comment>
        <if>if<condition>(<expr><name>to</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
            <comment type="line">//cout&lt;&lt;amn[x]&lt;&lt;' '&lt;&lt;to&lt;&lt;' '&lt;&lt;cmx&lt;&lt;endl;</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><operator>*</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>cmx</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>cmx</name></expr></argument>,<argument><expr><name>t</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>cmx</name><operator>-</operator><name>y</name><operator>&lt;=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><operator>(</operator><name>x</name><operator>!=</operator><literal type="number">1</literal><operator>||</operator><name>y</name><operator>!=</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then><block>{
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>ans</name><operator>+=</operator><name>cmx</name><operator>-</operator><name>y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name><operator>=</operator><name>cmx</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cmx</name><operator>--</operator></expr>;</expr_stmt>
        }</block></then>
        <elseif>else <if>if<condition>(<expr><name>to</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <comment type="line">//cout&lt;&lt;bmn[y]&lt;&lt;' '&lt;&lt;to&lt;&lt;' '&lt;&lt;dmx&lt;&lt;endl;</comment>

            <decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><operator>*</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>b</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>dmx</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>dmx</name></expr></argument>,<argument><expr><name>t</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>dmx</name><operator>-</operator><name>x</name><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>ans</name><operator>+=</operator><name>dmx</name><operator>-</operator><name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name><operator>=</operator><name>dmx</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dmx</name><operator>--</operator></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name>to</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><operator>*</operator><operator>(</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>cmn</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>cmn</name></expr></argument>,<argument><expr><name>t</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>y</name><operator>-</operator><name>cmn</name><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>ans</name><operator>+=</operator><name>y</name><operator>-</operator><name>cmn</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name><operator>=</operator><name>cmn</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name>to</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
            <comment type="line">//cout&lt;&lt;bmx[y]&lt;&lt;' '&lt;&lt;to&lt;&lt;' '&lt;&lt;dmn&lt;&lt;endl;</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><operator>*</operator><operator>(</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>b</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>dmn</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>dmn</name></expr></argument>,<argument><expr><name>t</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>x</name><operator>-</operator><name>dmn</name><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>ans</name><operator>+=</operator><name>x</name><operator>-</operator><name>dmn</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name><operator>=</operator><name>dmn</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
        <comment type="line">//cout&lt;&lt;"debug "&lt;&lt;to&lt;&lt;' '&lt;&lt;ans&lt;&lt;endl;</comment>
        <expr_stmt><expr><name>to</name><operator>=</operator><operator>(</operator><name>to</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>;</expr_stmt>
    }</block></while>
    <comment type="line">//cout&lt;&lt;ans&lt;&lt;' '&lt;&lt;ans+k&lt;&lt;endl;</comment>
    <if>if<condition>(<expr><name>ans</name><operator>+</operator><name>k</name><operator>==</operator><name>tot</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal></expr>;</expr_stmt>
    }</block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal></expr>;</expr_stmt></block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
