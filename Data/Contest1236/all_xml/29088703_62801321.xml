<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29088703_62801321.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i=0;i&lt;(a);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i=(a)-1;i&gt;=0;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORT</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i=(a);i&lt;=(b);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORTD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i=(b);i&gt;=(a);--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trav</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (auto i : v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(),v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ad</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mpr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair(a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pir</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>make_unique</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.erase(unique(all(v)),v.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastio</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>srng</name></cpp:macro> <cpp:value>mt19937 rng(chrono::steady_clock::now().time_since_epoch().count())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y1</name></cpp:macro> <cpp:value>EsiHancagorcRepa</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">4e5</literal><operator>+</operator><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD2</name><init>=<expr><literal type="number">998244353</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>bin_pow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>v</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{
    <if>if <condition>(<expr><name>p</name><operator>==</operator><literal type="number">10</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>pat</name><init>=<expr><call><name>bin_pow</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>p</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pat</name><operator>=</operator><operator>(</operator><name>pat</name><operator>*</operator><name>pat</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>pat</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>(</operator><name>pat</name><operator>*</operator><name>v</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</return></block></then></if>
    <return>return <expr><name>pat</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>t</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name><name>mp</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>fastio</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>srng</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument>k</argument>)</argument_list></macro><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>t</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>ad</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>ad</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mp</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
    }</block>
    <macro><name>FORT</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>max(n,m)</argument>)</argument_list></macro><block>{
        <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>ad</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>ad</name><argument_list>(<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>ad</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>ad</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>uxx</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>sv</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>sn</name><init>=<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>sa</name><init>=<expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>sd</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition><block>{
        <comment type="line">//cout&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;" "&lt;&lt;sv&lt;&lt;" "&lt;&lt;sn&lt;&lt;" "&lt;&lt;sd&lt;&lt;" "&lt;&lt;sa&lt;&lt;endl;</comment>
        <if>if <condition>(<expr><name>x</name><operator>&lt;=</operator><name>sv</name> <operator>||</operator> <name>x</name><operator>&gt;=</operator><name>sn</name> <operator>||</operator> <name>y</name><operator>&lt;=</operator><name>sd</name> <operator>||</operator> <name>y</name><operator>&gt;=</operator><name>sa</name> <operator>||</operator> <name><name>mp</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>

        <if>if <condition>(<expr><name>uxx</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>val</name><init>=<expr><operator>*</operator><call><name>lower_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>val</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>val</name></expr></argument>,<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>val</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>val</name></expr></argument>,<argument><expr><name>sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name><operator>+=</operator><name>val</name><operator>-</operator><name>y</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>sv</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name><operator>=</operator><name>val</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>uxx</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>val</name><init>=<expr><operator>*</operator><call><name>lower_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>val</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>val</name></expr></argument>,<argument><expr><name>sv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>val</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>val</name></expr></argument>,<argument><expr><name>sn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name><operator>+=</operator><name>val</name><operator>-</operator><name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name><operator>=</operator><name>val</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

            <expr_stmt><expr><name>sa</name><operator>=</operator><name>y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name><operator>=</operator><name>y</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>uxx</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>val</name><init>=<expr><name><name>t</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><call><name>lower_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>t</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>val</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>val</name></expr></argument>,<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>val</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>val</name></expr></argument>,<argument><expr><name>sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name><operator>+=</operator><name>y</name><operator>-</operator><name>val</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>sn</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name><operator>=</operator><name>val</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>uxx</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>val</name><init>=<expr><name><name>s</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><call><name>lower_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>s</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>val</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>val</name></expr></argument>,<argument><expr><name>sv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>val</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>val</name></expr></argument>,<argument><expr><name>sn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name><operator>+=</operator><name>x</name><operator>-</operator><name>val</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name><operator>=</operator><name>val</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>sd</name><operator>=</operator><name>y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name><operator>=</operator><name>y</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>uxx</name><operator>++</operator></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>uxx</name><operator>==</operator><literal type="number">5</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>uxx</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    }</block></while>
    <if>if <condition>(<expr><name>n</name><operator>*</operator><name>m</name><operator>-</operator><name>k</name><operator>==</operator><name>ans</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
