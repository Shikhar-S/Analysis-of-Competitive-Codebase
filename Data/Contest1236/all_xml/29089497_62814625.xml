<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29089497_62814625.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>pdd</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>ull</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;(int)n;++i)</cpp:value></cpp:define>

<comment type="line">//debug</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dump</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; (x) &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; (x) &lt;&lt; " (L" &lt;&lt; __LINE__ &lt;&lt; ")" &lt;&lt; " " &lt;&lt; __FILE__ &lt;&lt; endl;</cpp:value></cpp:define>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>S</name></parameter>, <parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl></parameter>)</parameter_list><block>{
  <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal> <operator>&lt;&lt;</operator> <name><name>v</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>v</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal></expr>;</expr_stmt> <return>return <expr><name>os</name></expr>;</return>
}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl></parameter>)</parameter_list><block>{
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<if>if<condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>}</block></then></if> <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>}</block></for> <return>return <expr><name>os</name></expr>;</return>
}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl></parameter>)</parameter_list><block>{
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<if>if<condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>}</block></then></if> <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>}</block></for> <return>return <expr><name>os</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>N_MAX</name> <init>= <expr><literal type="number">101010</literal></expr></init></decl>;</decl_stmt>
<struct>struct <name>RAQSB</name><block>{<public type="default">
	<decl_stmt><decl><type><name>ll</name></type> <name>N</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>sN</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name><name>data</name><index>[<expr><name>N_MAX</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name><name>bucket</name><index>[<expr><name>N_MAX</name></expr>]</index></name></decl>;</decl_stmt>

	<constructor><name>RAQSB</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><name>sN</name> <operator>=</operator> <operator>(</operator><name>ll</name><operator>)</operator><call><name>sqrt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>N</name> <operator>=</operator> <name>sN</name> <operator>*</operator> <name>sN</name></expr>;</expr_stmt>
		<macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>N_MAX</argument>)</argument_list></macro><block>{
			<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>bucket</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		}</block>
	}</block></constructor>

	<function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
		<comment type="line">// add x to range [s, t)</comment>
		<decl_stmt><decl><type><name>ll</name></type> <name>ss</name> <init>= <expr><name>s</name><operator>/</operator><name>sN</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>tt</name> <init>= <expr><name>t</name><operator>/</operator><name>sN</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>ss</name><operator>==</operator><name>tt</name></expr>)</condition><then><block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>s</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>t</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
				<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>
			}</block></for>
		}</block></then><else>else<block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>s</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>ss</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>sN</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
				<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>
			}</block></for>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>tt</name><operator>*</operator><name>sN</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>t</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
				<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>
			}</block></for>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>ss</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>tt</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
				<expr_stmt><expr><name><name>bucket</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>
			}</block></for>
		}</block></else></if>
	}</block></function>

	<function><type><name>ll</name></type> <name>get_val</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>bucket</name><index>[<expr><name>i</name><operator>/</operator><name>sN</name></expr>]</index></name></expr>;</return>
	}</block></function>
</public>}</block>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>a</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>b</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>m</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>m</argument>)</argument_list></macro> <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>m</argument>)</argument_list></macro> <expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>n</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

    <if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
    	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    	<return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>

    <comment type="line">//cout &lt;&lt; a &lt;&lt; endl;</comment>
    <comment type="line">//cout &lt;&lt; b &lt;&lt; endl;</comment>

    <decl_stmt><decl><type><name>RAQSB</name></type> <name>r1</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name><name>r1</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>m</argument>)</argument_list></macro><block>{
    	<decl_stmt><decl><type><name>ll</name></type> <name>l</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    	<decl_stmt><decl><type><name>ll</name></type> <name>u</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
    	<while>while<condition>(<expr><name>u</name><operator>-</operator><name>l</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><block>{
    		<decl_stmt><decl><type><name>ll</name></type> <name>md</name> <init>= <expr><operator>(</operator><name>l</name><operator>+</operator><name>u</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    		<if>if<condition>(<expr><call><name><name>r1</name><operator>.</operator><name>get_val</name></name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call><operator>&gt;=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>u</name> <operator>=</operator> <name>md</name></expr>;</expr_stmt></block></then>
    		<else>else <block type="pseudo"><expr_stmt><expr><name>l</name> <operator>=</operator> <name>md</name></expr>;</expr_stmt></block></else></if>
    	}</block></while>
    	<decl_stmt><decl><type><name>ll</name></type> <name>hidari</name> <init>= <expr><name>u</name></expr></init></decl>;</decl_stmt>

    	<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    	<expr_stmt><expr><name>u</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    	<while>while<condition>(<expr><name>u</name><operator>-</operator><name>l</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><block>{
    		<decl_stmt><decl><type><name>ll</name></type> <name>md</name> <init>= <expr><operator>(</operator><name>l</name><operator>+</operator><name>u</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    		<if>if<condition>(<expr><call><name><name>r1</name><operator>.</operator><name>get_val</name></name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call><operator>&gt;=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>u</name> <operator>=</operator> <name>md</name></expr>;</expr_stmt></block></then>
    		<else>else <block type="pseudo"><expr_stmt><expr><name>l</name> <operator>=</operator> <name>md</name></expr>;</expr_stmt></block></else></if>
    	}</block></while>
    	<decl_stmt><decl><type><name>ll</name></type> <name>migi</name> <init>= <expr><name>u</name></expr></init></decl>;</decl_stmt>

    	<expr_stmt><expr><call><name><name>r1</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hidari</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name><name>r1</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>migi</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<comment type="line">//dump(hidari)</comment>
    	<comment type="line">//dump(migi)</comment>

    	<comment type="line">//REP(i, n) cout &lt;&lt; r1.get_val(i) &lt;&lt; " ";</comment>
    	<comment type="line">//cout &lt;&lt; endl;  </comment>
    }</block>  
    <expr_stmt><expr><call><name><name>r1</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <decl_stmt><decl><type><name>RAQSB</name></type> <name>r2</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name><name>r2</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>m</argument>)</argument_list></macro><block>{
    	<decl_stmt><decl><type><name>ll</name></type> <name>l</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    	<decl_stmt><decl><type><name>ll</name></type> <name>u</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
    	<while>while<condition>(<expr><name>u</name><operator>-</operator><name>l</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><block>{
    		<decl_stmt><decl><type><name>ll</name></type> <name>md</name> <init>= <expr><operator>(</operator><name>l</name><operator>+</operator><name>u</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    		<if>if<condition>(<expr><call><name><name>r2</name><operator>.</operator><name>get_val</name></name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call><operator>&gt;=</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>u</name> <operator>=</operator> <name>md</name></expr>;</expr_stmt></block></then>
    		<else>else <block type="pseudo"><expr_stmt><expr><name>l</name> <operator>=</operator> <name>md</name></expr>;</expr_stmt></block></else></if>
    	}</block></while>
    	<decl_stmt><decl><type><name>ll</name></type> <name>hidari</name> <init>= <expr><name>u</name></expr></init></decl>;</decl_stmt>

    	<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    	<expr_stmt><expr><name>u</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    	<while>while<condition>(<expr><name>u</name><operator>-</operator><name>l</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><block>{
    		<decl_stmt><decl><type><name>ll</name></type> <name>md</name> <init>= <expr><operator>(</operator><name>l</name><operator>+</operator><name>u</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    		<if>if<condition>(<expr><call><name><name>r2</name><operator>.</operator><name>get_val</name></name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call><operator>&gt;=</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>u</name> <operator>=</operator> <name>md</name></expr>;</expr_stmt></block></then>
    		<else>else <block type="pseudo"><expr_stmt><expr><name>l</name> <operator>=</operator> <name>md</name></expr>;</expr_stmt></block></else></if>
    	}</block></while>
    	<decl_stmt><decl><type><name>ll</name></type> <name>migi</name> <init>= <expr><name>u</name></expr></init></decl>;</decl_stmt>

    	<expr_stmt><expr><call><name><name>r2</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hidari</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name><name>r2</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>migi</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<comment type="line">//dump(hidari)</comment>
    	<comment type="line">//dump(migi)</comment>

    	<comment type="line">//REP(i, n) cout &lt;&lt; r2.get_val(i) &lt;&lt; " ";</comment>
    	<comment type="line">//cout &lt;&lt; endl;  </comment>
    }</block>  
    <expr_stmt><expr><call><name><name>r2</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
    REP(i, n) cout &lt;&lt; r1.get_val(i) &lt;&lt; " ";
    cout &lt;&lt; endl;  
    
    REP(i, n) cout &lt;&lt; r2.get_val(i) &lt;&lt; " ";
    cout &lt;&lt; endl; 
    */</comment>
    

    
    <decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><name>n</name> <operator>*</operator> <name>n</name></expr></init></decl>;</decl_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro><block>{
    	<decl_stmt><decl><type><name>ll</name></type> <name>p</name> <init>= <expr><call><name><name>r1</name><operator>.</operator><name>get_val</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    	<if>if<condition>(<expr><name>p</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>-=</operator> <operator>(</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>p</name><operator>)</operator></expr>;</expr_stmt></block></then></if>
    }</block> 
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro><block>{
    	<decl_stmt><decl><type><name>ll</name></type> <name>p</name> <init>= <expr><call><name><name>r2</name><operator>.</operator><name>get_val</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    	<if>if<condition>(<expr><name>p</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>-=</operator> <operator>(</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>p</name><operator>)</operator></expr>;</expr_stmt></block></then></if>
    }</block>
    

    <comment type="block">/*
    ll res = 0;
    res += n;
    REP(i, n){
    	ll p = r1.get_val(i);
    	p = min(n-1, p);
    	res += (p - i);
    }
    REP(i, n){
    	ll p = r2.get_val(i);
    	p = min(n-1, p);
    	res += (p - i);
    }
    */</comment>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>res</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
