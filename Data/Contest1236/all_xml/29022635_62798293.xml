<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29022635_62798293.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"O3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="line">// Kyu? Chonk gaye!? ð®</comment>

<function><type><name>void</name></type> <name>desperate_optimization</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>submitting</name><init>=<expr><literal type="boolean">true</literal></expr></init></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>precision</name><init>=<expr><literal type="number">10</literal></expr></init></decl></parameter>)</parameter_list>
<block>{
  <if>if<condition>(<expr><operator>!</operator><name>submitting</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>setf</name></name><argument_list>(<argument><expr><name><name>ios</name><operator>::</operator><name>fixed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>setf</name></name><argument_list>(<argument><expr><name><name>ios</name><operator>::</operator><name>showpoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>precision</name></name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>fastexp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>exp</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>answer</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>exp</name></expr>)</condition>
	<block>{
		<if>if<condition>(<expr><name>exp</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name>answer</name><operator>*=</operator><name>base</name></expr>;</expr_stmt> <expr_stmt><expr><name>answer</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>}</block></then></if>
		<expr_stmt><expr><name>base</name><operator>*=</operator><name>base</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>exp</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>base</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>answer</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>func</name><parameter_list>(<parameter><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>s1</name></decl></parameter>,<parameter><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>s2</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>answer</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>_</name><range>:<expr><name>s1</name></expr></range></decl></init>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>auto</name></type> <name>__</name><range>:<expr><name>s2</name></expr></range></decl></init>)</control>
			<block type="pseudo"><expr_stmt><expr><name>answer</name><operator>+=</operator><operator>(</operator><name>__</name><operator>&gt;</operator><name>_</name><operator>)</operator></expr>;</expr_stmt></block></for></block></for>
	<return>return <expr><name>answer</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>desperate_optimization</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  	<comment type="line">// freopen("input.txt","r",stdin);</comment>
  	<comment type="line">// return 0;</comment>
  	<comment type="line">// set&lt;int&gt; st[n];</comment>
  	<comment type="line">// st[0].insert(1);</comment>
  	<comment type="line">// st[1].insert(2);</comment>
  	<comment type="line">// st[2].insert(3);</comment>
  	<comment type="line">// st[0].insert(4);</comment>
  	<comment type="line">// st[1].insert(5);</comment>
  	<comment type="line">// st[2].insert(6);</comment>
  	<comment type="line">// st[0].insert(7);</comment>
  	<comment type="line">// st[1].insert(8);</comment>
  	<comment type="line">// st[2].insert(9);</comment>
  	<comment type="line">// for(int i=0;i&lt;3;i++)</comment>
  	<comment type="line">// {</comment>
  	<comment type="line">// 	for(int j=0;j&lt;3;j++)</comment>
  	<comment type="line">// 	{</comment>
  	<comment type="line">// 		cout&lt;&lt;i&lt;&lt;' '&lt;&lt;j&lt;&lt;' '&lt;&lt;func(st[i],st[j])&lt;&lt;'\n';</comment>
  	<comment type="line">// 	}</comment>
  	<comment type="line">// }</comment>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>resultmat</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>value</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>_x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>_y</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>itr</name><init>=<expr><name>n</name><operator>*</operator><name>n</name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>itr</name><operator>--</operator></expr>)</condition>
	<block>{
		<expr_stmt><expr><name><name>resultmat</name><index>[<expr><name>_x</name></expr>]</index><index>[<expr><name>_y</name></expr>]</index></name><operator>=</operator><name>value</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>value</name><operator>++</operator></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>_x</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name>_y</name><operator>++</operator></expr>;</expr_stmt> <if>if<condition>(<expr><name>_y</name><operator>==</operator><name>n</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>_y</name><operator>=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>_x</name><operator>++</operator></expr>;</expr_stmt>}</block></then></if>}</block></then>
		<else>else <block>{<expr_stmt><expr><name>_y</name><operator>--</operator></expr>;</expr_stmt> <if>if<condition>(<expr><name>_y</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name>_y</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>_x</name><operator>++</operator></expr>;</expr_stmt>}</block></then></if>}</block></else></if>	
	}</block></while>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>resultmat</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt></block></for>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
	}</block></for>

  	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
