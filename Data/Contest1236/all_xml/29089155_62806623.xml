<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29089155_62806623.cpp"><comment type="block">/*
æ°æ®ä¸æ¸ç©ºï¼çé¶ä¸¤è¡æ³ªã
å¤æµä¸è¯»å®ï¼çé¶ä¸¤è¡æ³ªã
è¾¹çä¸ç¹å¤ï¼çé¶ä¸¤è¡æ³ªã
è´ªå¿ä¸è¯æï¼çé¶ä¸¤è¡æ³ªã
D P é¡ºåºéï¼çé¶ä¸¤è¡æ³ªã
å¤§å°å°ç­å·ï¼çé¶ä¸¤è¡æ³ªã
åéä¸ç»ä¸ï¼çé¶ä¸¤è¡æ³ªã
è¶çä¸å¤æ­ï¼çé¶ä¸¤è¡æ³ªã
è°è¯ä¸æ³¨éï¼çé¶ä¸¤è¡æ³ªã
æº¢åºä¸ l lï¼çé¶ä¸¤è¡æ³ªã
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">100000</literal></expr></init></decl>,<decl><type ref="prev"/><name>M</name><init>=<expr><literal type="number">100000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>v1</name><index>[<expr><name>N</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>v2</name><index>[<expr><name>M</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>v3</name><index>[<expr><name>N</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>v4</name><index>[<expr><name>M</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>x</name><operator>&gt;</operator><name>y</name></expr>;</return>}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>s</name><operator>--</operator></expr>)</condition><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>v1</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>v2</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>v3</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator><expr><call><name>reverse</name><argument_list>(<argument><expr><name><name>v3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>v3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>v2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>v2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>v4</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>v2</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator><expr><call><name>reverse</name><argument_list>(<argument><expr><name><name>v4</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>v4</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>xa</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>ya</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>xb</name><init>=<expr><name>n</name></expr></init></decl>,<decl><type ref="prev"/><name>yb</name><init>=<expr><name>m</name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition><block>{
		<decl_stmt><decl><type><name><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>fd</name><init>=<expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>v1</name><index>[<expr><name>xa</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>v1</name><index>[<expr><name>xa</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>ya</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>fdd</name></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>fd</name><operator>==</operator><name><name>v1</name><index>[<expr><name>xa</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call><operator>||</operator><operator>*</operator><name>fd</name><operator>&gt;</operator><name>yb</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>fdd</name><operator>=</operator><name>yb</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then><else>else <block type="pseudo"><expr_stmt><expr><name>fdd</name><operator>=</operator><operator>*</operator><name>fd</name></expr>;</expr_stmt></block></else></if>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>fdd</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>yb</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>xa</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>xb</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><call><name><name>p</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>==</operator><call><name><name>p</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then><else>else <block type="pseudo"><expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if></block></for></block></for>
		<expr_stmt><expr><name>xa</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>yb</name><operator>=</operator><name>fdd</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<comment type="line">//		cout&lt;&lt;xa&lt;&lt;" "&lt;&lt;ya&lt;&lt;" "&lt;&lt;xb&lt;&lt;" "&lt;&lt;yb&lt;&lt;"\n";</comment>
		
		<expr_stmt><expr><name>fd</name><operator>=</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>v2</name><index>[<expr><name>yb</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>v2</name><index>[<expr><name>yb</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>xa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>fd</name><operator>==</operator><name><name>v2</name><index>[<expr><name>yb</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call><operator>||</operator><operator>*</operator><name>fd</name><operator>&gt;</operator><name>xb</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>fdd</name><operator>=</operator><name>xb</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then><else>else <block type="pseudo"><expr_stmt><expr><name>fdd</name><operator>=</operator><operator>*</operator><name>fd</name></expr>;</expr_stmt></block></else></if>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>fdd</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>xb</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>ya</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>yb</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><call><name><name>p</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>==</operator><call><name><name>p</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then><else>else <block type="pseudo"><expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if></block></for></block></for>
		<expr_stmt><expr><name>yb</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>xb</name><operator>=</operator><name>fdd</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<comment type="line">//		cout&lt;&lt;xa&lt;&lt;" "&lt;&lt;ya&lt;&lt;" "&lt;&lt;xb&lt;&lt;" "&lt;&lt;yb&lt;&lt;"\n";</comment>
		
		<expr_stmt><expr><name>fd</name><operator>=</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>v3</name><index>[<expr><name>xb</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>v3</name><index>[<expr><name>xb</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>yb</name></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>fd</name><operator>==</operator><name><name>v3</name><index>[<expr><name>xb</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call><operator>||</operator><operator>*</operator><name>fd</name><operator>&lt;</operator><name>ya</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>fdd</name><operator>=</operator><name>ya</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then><else>else <block type="pseudo"><expr_stmt><expr><name>fdd</name><operator>=</operator><operator>*</operator><name>fd</name></expr>;</expr_stmt></block></else></if>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>ya</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>fdd</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>xa</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>xb</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><call><name><name>p</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>==</operator><call><name><name>p</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then><else>else <block type="pseudo"><expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if></block></for></block></for>
		<expr_stmt><expr><name>xb</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ya</name><operator>=</operator><name>fdd</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<comment type="line">//		cout&lt;&lt;xa&lt;&lt;" "&lt;&lt;ya&lt;&lt;" "&lt;&lt;xb&lt;&lt;" "&lt;&lt;yb&lt;&lt;"\n";</comment>
		
		<expr_stmt><expr><name>fd</name><operator>=</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>v4</name><index>[<expr><name>ya</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>v4</name><index>[<expr><name>ya</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>xb</name></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>fd</name><operator>==</operator><name><name>v4</name><index>[<expr><name>ya</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call><operator>||</operator><operator>*</operator><name>fd</name><operator>&lt;</operator><name>xa</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>fdd</name><operator>=</operator><name>xa</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then><else>else <block type="pseudo"><expr_stmt><expr><name>fdd</name><operator>=</operator><operator>*</operator><name>fd</name></expr>;</expr_stmt></block></else></if>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>xa</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>fdd</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>ya</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>yb</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><call><name><name>p</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>==</operator><call><name><name>p</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then><else>else <block type="pseudo"><expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if></block></for></block></for>
		<expr_stmt><expr><name>ya</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>xa</name><operator>=</operator><name>fdd</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<comment type="line">//		cout&lt;&lt;xa&lt;&lt;" "&lt;&lt;ya&lt;&lt;" "&lt;&lt;xb&lt;&lt;" "&lt;&lt;yb&lt;&lt;"\n";</comment>
		
		<if>if<condition>(<expr><name>xa</name><operator>&gt;</operator><name>xb</name><operator>||</operator><name>ya</name><operator>&gt;</operator><name>yb</name></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
	}</block></while>
}</block></function>
<comment type="block">/*1
6 5 21
1 4
1 5
2 1
2 4
2 5
3 1
3 4
3 5
4 1
4 4
4 5
5 1
5 2 
5 3 
5 4 
5 5
6 1 
6 2 
6 3 
6 4 
6 5
*/</comment></unit>
