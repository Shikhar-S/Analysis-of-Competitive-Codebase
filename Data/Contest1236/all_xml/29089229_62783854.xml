<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29089229_62783854.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastio</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).begin(),(c).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pr</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dbs(#__VA_ARGS__, __VA_ARGS__)</cpp:value></cpp:define>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>dbs</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>str</name> <operator>&lt;&lt;</operator> <literal type="string">" : "</literal> <operator>&lt;&lt;</operator> <name>t</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name><modifier>...</modifier></type> <name>S</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>dbs</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>S</name><modifier>...</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name><name>str</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <call><name><name>str</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">" : "</literal> <operator>&lt;&lt;</operator> <name>t</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>dbs</name><argument_list>(<argument><expr><call><name><name>str</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>S</name></parameter>, <parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal></expr>;</return>}</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"[ "</literal></expr>;</expr_stmt> <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>it</name> <operator>:</operator> <name>p</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name>it</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for> <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"]"</literal></expr>;</return>}</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"[ "</literal></expr>;</expr_stmt> <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>it</name> <operator>:</operator> <name>p</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name>it</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for> <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"]"</literal></expr>;</return>}</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>S</name></parameter>, <parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"[ "</literal></expr>;</expr_stmt> <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>it</name> <operator>:</operator> <name>p</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name>it</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for> <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"]"</literal></expr>;</return>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>prc</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"["</literal></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>T</name></type> <name>i</name> <init>= <expr><name>a</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>b</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>a</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>i</name></expr>;</expr_stmt>}</block></for> <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"]\n"</literal></expr>;</expr_stmt>}</block></function>
<comment type="line">// Use pr(a,b,c,d,e) or cerr&lt;&lt;anything or prc(v.begin(),v.end()) or prc(v,v+n)</comment>
 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">100007</literal></expr></init></decl>;</decl_stmt>
 
 
 
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>b</name> <operator>-=</operator> <name>z</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">3</literal><operator>*</operator><name>z</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="number">3</literal><operator>*</operator><name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    }</block></while>

   <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
