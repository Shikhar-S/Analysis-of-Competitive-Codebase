<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29084270_62813733.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">100000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>X</name><index>[<expr><name>N</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>Y</name><index>[<expr><name>N</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>checkX</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>U</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>D</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>R</name> <operator>-</operator> <name>L</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>U</name></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>D</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>auto</name></type> <name>t1</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>X</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>auto</name></type> <name>t2</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>X</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>t2</name> <operator>-</operator> <name>t1</name> <operator>!=</operator> <name>len</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    }</block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>checkY</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>U</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>D</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>D</name> <operator>-</operator> <name>U</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>L</name></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>R</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>auto</name></type> <name>t1</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>Y</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Y</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>U</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>auto</name></type> <name>t2</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>Y</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Y</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>D</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>t2</name> <operator>-</operator> <name>t1</name> <operator>!=</operator> <name>len</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    }</block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>X</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>Y</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>L</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>R</name> <init>= <expr><name>m</name></expr></init></decl>, <decl><type ref="prev"/><name>U</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>D</name> <init>= <expr><name>n</name></expr></init></decl>, <decl><type ref="prev"/><name>now</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>f</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition><block>{
        <if>if <condition>(<expr><name>now</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>re</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>X</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>re</name> <operator>==</operator> <name><name>X</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><operator>*</operator><name>re</name><operator>)</operator> <operator>&gt;</operator> <name>R</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>y</name> <operator>=</operator> <name>R</name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>L</name></expr>;</expr_stmt> <expr_stmt><expr><name>now</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr><call><name>checkY</name><argument_list>(<argument><expr><operator>*</operator><name>re</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>U</name></expr></argument>, <argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>y</name> <operator>=</operator> <name>R</name> <operator>=</operator> <operator>*</operator><name>re</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>++</operator><name>L</name></expr>;</expr_stmt> <expr_stmt><expr><name>now</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <goto>goto <name>end</name>;</goto>
                }</block></else></if>
            }</block></else></if>
        }</block></then>
        <elseif>else <if>if <condition>(<expr><name>now</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>re</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>Y</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Y</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>re</name> <operator>==</operator> <name><name>Y</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><operator>*</operator><name>re</name><operator>)</operator> <operator>&gt;</operator> <name>D</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>x</name> <operator>=</operator> <name>D</name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>U</name></expr>;</expr_stmt> <expr_stmt><expr><name>now</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr><call><name>checkX</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><operator>*</operator><name>re</name></expr></argument>, <argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>x</name> <operator>=</operator> <name>D</name> <operator>=</operator> <operator>*</operator><name>re</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>++</operator><name>U</name></expr>;</expr_stmt> <expr_stmt><expr><name>now</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <goto>goto <name>end</name>;</goto>
                }</block></else></if>
            }</block></else></if>
        }</block></then></if></elseif>
        <elseif>else <if>if <condition>(<expr><name>now</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>re</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>X</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>re</name> <operator>==</operator> <name><name>X</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><operator>*</operator><operator>--</operator><name>re</name><operator>)</operator> <operator>&lt;</operator> <name>L</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>y</name> <operator>=</operator> <name>L</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>R</name></expr>;</expr_stmt> <expr_stmt><expr><name>now</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr><call><name>checkY</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>*</operator><name>re</name></expr></argument>, <argument><expr><name>U</name></expr></argument>, <argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>y</name> <operator>=</operator> <name>L</name> <operator>=</operator> <operator>*</operator><name>re</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>--</operator><name>R</name></expr>;</expr_stmt> <expr_stmt><expr><name>now</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <goto>goto <name>end</name>;</goto>
                }</block></else></if>
            }</block></else></if>
        }</block></then></if></elseif>
        <elseif>else <if>if <condition>(<expr><name>now</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>re</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>Y</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Y</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>re</name> <operator>==</operator> <name><name>Y</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><operator>*</operator><operator>--</operator><name>re</name><operator>)</operator> <operator>&lt;</operator> <name>U</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>x</name> <operator>=</operator> <name>U</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>D</name></expr>;</expr_stmt> <expr_stmt><expr><name>now</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr><call><name>checkX</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>U</name></expr></argument>, <argument><expr><operator>*</operator><name>re</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>x</name> <operator>=</operator> <name>U</name> <operator>=</operator> <operator>*</operator><name>re</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>--</operator><name>D</name></expr>;</expr_stmt> <expr_stmt><expr><name>now</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <goto>goto <name>end</name>;</goto>
                }</block></else></if>
            }</block></else></if>
        }</block></then></if></elseif></if>
        <comment type="line">//cout &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; ' ' &lt;&lt; now &lt;&lt; endl;</comment>
        <comment type="line">//cout &lt;&lt; " " &lt;&lt; L &lt;&lt; ' ' &lt;&lt; R &lt;&lt; ' ' &lt;&lt; U &lt;&lt; ' ' &lt;&lt; D &lt;&lt; endl;</comment>
        <if>if <condition>(<expr><operator>(</operator><name>now</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>now</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>U</name> <operator>&gt;=</operator> <name>D</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        <if>if <condition>(<expr><operator>(</operator><name>now</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>now</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>L</name> <operator>&gt;=</operator> <name>R</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
    }</block></while>
    <label><name>end</name>:</label>
    <if>if <condition>(<expr><name>f</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
