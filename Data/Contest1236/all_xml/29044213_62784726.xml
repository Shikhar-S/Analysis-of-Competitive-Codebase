<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29044213_62784726.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>double</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
 

<function><type><name>int</name></type> <name>pow1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>	<block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><call><name>pow1</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>p</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>*</operator><name>x</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>p</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then>
	<else>else
		<block type="pseudo"><return>return <expr><operator>(</operator><name>x</name><operator>*</operator><name>n</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return></block></else></if>
}</block></function>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>fast</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>t</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><operator>(</operator><name>b</name><operator>+</operator><name>c</name><operator>)</operator><operator>/</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>x</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>c</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name><operator>+=</operator><name>x</name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name><operator>-=</operator><name>x</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>y</name><init>=<expr><operator>(</operator><name>a</name><operator>+</operator><name>b</name><operator>)</operator><operator>/</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>y</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name><operator>+=</operator><name>y</name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
