<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29090158_62811746.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>P</name>;</typedef>

<decl_stmt><decl><type><name>P</name></type> <name><name>a</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>b</name><operator>+</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dir</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>flag</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>ln</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>rn</name><init>=<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>lm</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>rm</name><init>=<expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>P</name></type> <name>p</name></decl>,<decl><type ref="prev"/><name>last</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>p</name><operator>.</operator><name>first</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>.</operator><name>second</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>T</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{
        <expr_stmt><expr><name>last</name><operator>=</operator><name>p</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>pos</name><init>=<expr><call><name>upper_bound</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>k</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-</operator><name>a</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>P</name></type> <name>pp</name><init>=<expr><name><name>a</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>pp</name><operator>.</operator><name>second</name></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>pp</name><operator>.</operator><name>second</name></name></expr></argument>,<argument><expr><name>rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>pp</name><operator>.</operator><name>first</name></name><operator>==</operator><name><name>p</name><operator>.</operator><name>first</name></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name><name>pp</name><operator>.</operator><name>second</name></name><operator>-</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>p</name><operator>.</operator><name>second</name></name><operator>=</operator><name><name>pp</name><operator>.</operator><name>second</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name>rm</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>p</name><operator>.</operator><name>second</name></name><operator>=</operator><name>rm</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>rm</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>rm</name></expr></argument>,<argument><expr><name><name>p</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name><operator>=</operator><operator>(</operator><name>dir</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>;</expr_stmt>
        }</block></then>
        <elseif>else <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>pos</name><init>=<expr><call><name>upper_bound</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>k</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-</operator><name>a</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>pos</name><operator>--</operator></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>P</name></type> <name>pp</name><init>=<expr><name><name>a</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>pp</name><operator>.</operator><name>second</name></name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name><name>pp</name><operator>.</operator><name>second</name></name></expr></argument>,<argument><expr><name>lm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>pos</name><operator>&gt;</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name><name>pp</name><operator>.</operator><name>first</name></name><operator>==</operator><name><name>p</name><operator>.</operator><name>first</name></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>-</operator><name><name>pp</name><operator>.</operator><name>second</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>p</name><operator>.</operator><name>second</name></name><operator>=</operator><name><name>pp</name><operator>.</operator><name>second</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>lm</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>p</name><operator>.</operator><name>second</name></name><operator>=</operator><name>lm</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>lm</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>lm</name></expr></argument>,<argument><expr><name><name>p</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name><operator>=</operator><operator>(</operator><name>dir</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>P</name></type> <name>t</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>t</name><operator>.</operator><name>first</name></name><operator>=</operator><name><name>p</name><operator>.</operator><name>second</name></name></expr><operator>,</operator><expr><name><name>t</name><operator>.</operator><name>second</name></name><operator>=</operator><name><name>p</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>pos</name><init>=<expr><call><name>upper_bound</name><argument_list>(<argument><expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>b</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>k</name></expr></argument>,<argument><expr><name>t</name></expr></argument>)</argument_list></call><operator>-</operator><name>b</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>P</name></type> <name>pp</name><init>=<expr><name><name>b</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>pp</name><operator>.</operator><name>second</name></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>pp</name><operator>.</operator><name>second</name></name></expr></argument>,<argument><expr><name>rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>pp</name><operator>.</operator><name>first</name></name><operator>==</operator><name><name>p</name><operator>.</operator><name>second</name></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name><name>pp</name><operator>.</operator><name>second</name></name><operator>-</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>p</name><operator>.</operator><name>first</name></name><operator>=</operator><name><name>pp</name><operator>.</operator><name>second</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name>rn</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>p</name><operator>.</operator><name>first</name></name><operator>=</operator><name>rn</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>rn</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>rn</name></expr></argument>,<argument><expr><name><name>p</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name><operator>=</operator><operator>(</operator><name>dir</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>P</name></type> <name>t</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>t</name><operator>.</operator><name>first</name></name><operator>=</operator><name><name>p</name><operator>.</operator><name>second</name></name></expr><operator>,</operator><expr><name><name>t</name><operator>.</operator><name>second</name></name><operator>=</operator><name><name>p</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>pos</name><init>=<expr><call><name>upper_bound</name><argument_list>(<argument><expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>b</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>k</name></expr></argument>,<argument><expr><name>t</name></expr></argument>)</argument_list></call><operator>-</operator><name>b</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>pos</name><operator>--</operator></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>P</name></type> <name>pp</name><init>=<expr><name><name>b</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>pp</name><operator>.</operator><name>second</name></name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name><name>pp</name><operator>.</operator><name>second</name></name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>pos</name><operator>&gt;</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name><name>pp</name><operator>.</operator><name>first</name></name><operator>==</operator><name><name>p</name><operator>.</operator><name>second</name></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>pp</name><operator>.</operator><name>second</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>p</name><operator>.</operator><name>first</name></name><operator>=</operator><name><name>pp</name><operator>.</operator><name>second</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>ln</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>p</name><operator>.</operator><name>first</name></name><operator>=</operator><literal type="number">1</literal><operator>+</operator><name>ln</name></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>ln</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>ln</name></expr></argument>,<argument><expr><name><name>p</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name><operator>=</operator><operator>(</operator><name>dir</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
        <if>if<condition>(<expr><name>last</name><operator>==</operator><name>p</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>flag</name><operator>++</operator></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
        <if>if<condition>(<expr><name>flag</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
    }</block></while>
    <decl_stmt><decl><type><name>ll</name></type> <name>sum</name><init>=<expr><literal type="number">1ll</literal><operator>*</operator><name>n</name><operator>*</operator><name>m</name><operator>-</operator><literal type="number">1ll</literal><operator>*</operator><name>k</name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>sum</name><operator>==</operator><name>ans</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
