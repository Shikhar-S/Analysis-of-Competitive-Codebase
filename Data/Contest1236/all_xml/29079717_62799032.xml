<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29079717_62799032.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>m_p</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast_io</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0); cin.tie(0)</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">1123456</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXINT</name> <init>= <expr><literal type="number">2147483098</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MAXLL</name> <init>= <expr><literal type="number">9223372036854775258LL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>cur</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>fast_io</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>mx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>m</name> <operator>=</operator> <name>n</name> <operator>*</operator> <name>n</name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>cur</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

    <if>if <condition>(<expr><name>n</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>who</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
                <if>if <condition>(<expr><operator>!</operator><name>who</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>*</operator><operator>(</operator><call><name><name>cur</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>cur</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>cur</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then><else>else <block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>*</operator><operator>(</operator><operator>--</operator><call><name><name>cur</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>cur</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><operator>--</operator><call><name><name>cur</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>

                <expr_stmt><expr><name>who</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>who</name></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></for>
    }</block></then><else>else <block>{
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>who</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
                <if>if <condition>(<expr><operator>!</operator><name>who</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>*</operator><operator>(</operator><call><name><name>cur</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>cur</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>cur</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then><else>else <block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>*</operator><operator>(</operator><operator>--</operator><call><name><name>cur</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>cur</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><operator>--</operator><call><name><name>cur</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>

                <expr_stmt><expr><name>who</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>who</name></expr>;</expr_stmt>
            }</block></for>

            <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><operator>(</operator><call><name><name>cur</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>kek</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name>cur</name></expr></range></decl></init>)</control> <block>{
                <expr_stmt><expr><name>kek</name><operator>++</operator></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>kek</name> <operator>==</operator> <name>num</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>cur</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block></for>

        }</block></for>
    }</block></else></if>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
