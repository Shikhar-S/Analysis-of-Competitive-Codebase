<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29053879_62804306.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = a; i &lt; n; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>per</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = n - 1; i &gt;= a; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>clr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(x, 0, sizeof(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(), (x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(x).size())</cpp:value></cpp:define>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<struct>struct <name>zml</name> <block>{<public type="default">
  <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>S</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>B</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <constructor><name>zml</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_n</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>n</name><argument_list>(<argument><expr><name>_n</name></expr></argument>)</argument_list></call> </member_init_list><block>{
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n + <literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>B</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  }</block></constructor>
  <function><type><name>void</name></type> <name>op</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>B</name> <operator>+=</operator> <name>q</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>S</name><index>[<expr><name>c</name> <operator>-</operator> <name>B</name></expr>]</index></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>S</name><index>[<expr><name>c</name> <operator>-</operator> <name>B</name> <operator>-</operator> <name>q</name></expr>]</index></name> <operator>+=</operator> <name><name>S</name><index>[<expr><name>c</name> <operator>-</operator> <name>B</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>S</name><index>[<expr><name>c</name> <operator>-</operator> <name>B</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>S</name><index>[<expr><literal type="number">0</literal> <operator>-</operator> <name>B</name></expr>]</index></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>S</name><index>[<expr><literal type="number">1</literal> <operator>-</operator> <name>B</name></expr>]</index></name> <operator>+=</operator> <name><name>S</name><index>[<expr><literal type="number">0</literal> <operator>-</operator> <name>B</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>S</name><index>[<expr><literal type="number">0</literal> <operator>-</operator> <name>B</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>S</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>B</name></expr>]</index></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>S</name><index>[<expr><name>n</name> <operator>-</operator> <name>B</name></expr>]</index></name> <operator>+=</operator> <name><name>S</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>B</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>S</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>B</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>
  <function><type><name>ll</name></type> <name>sum</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>i</name> <operator>:</operator> <name>S</name></expr></init>)</control>
      <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>+=</operator> <operator>(</operator><name>ll</name><operator>)</operator><name><name>i</name><operator>.</operator><name>fi</name></name> <operator>*</operator> <name><name>i</name><operator>.</operator><name>se</name></name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>ret</name> <operator>+=</operator> <operator>(</operator><name>ll</name><operator>)</operator><name>B</name> <operator>*</operator> <name>n</name></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  }</block></function>
</public>}</block>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></then></if>
  <decl_stmt><decl><type><name>zml</name></type> <name>L</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>zml</name></type> <name>R</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>m</argument>)</argument_list></macro> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>L</name><operator>.</operator><name>op</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>R</name><operator>.</operator><name>op</name></name><argument_list>(<argument><expr><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  <expr_stmt><expr><call><name><name>L</name><operator>.</operator><name>op</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>+</operator><name>INF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>R</name><operator>.</operator><name>op</name></name><argument_list>(<argument><expr><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>+</operator><name>INF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>R</name><operator>.</operator><name>sum</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>L</name><operator>.</operator><name>sum</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>n</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>
</unit>
