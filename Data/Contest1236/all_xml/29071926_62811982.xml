<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29071926_62811982.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>node</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name><name>dx</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>dy</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>wt</name></decl>, <decl><type ref="prev"/><name>sum</name></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>cmpx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>node</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>node</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><ternary><condition><expr><name><name>x</name><operator>.</operator><name>x</name></name> <operator>==</operator> <name><name>y</name><operator>.</operator><name>x</name></name></expr> ?</condition><then> <expr><name><name>x</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>y</name><operator>.</operator><name>y</name></name></expr> </then><else>: <expr><name><name>x</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>y</name><operator>.</operator><name>x</name></name></expr></else></ternary></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>cmpy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>node</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>node</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><ternary><condition><expr><name><name>x</name><operator>.</operator><name>y</name></name> <operator>==</operator> <name><name>y</name><operator>.</operator><name>y</name></name></expr> ?</condition><then> <expr><name><name>x</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>y</name><operator>.</operator><name>x</name></name></expr> </then><else>: <expr><name><name>x</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>y</name><operator>.</operator><name>y</name></name></expr></else></ternary></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>Ask</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>node</name> <modifier>&amp;</modifier></type><name>ret</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><name>t</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>int</name><argument_list>(<argument><expr><call><name>lower_bound</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><operator>(</operator><name>node</name><operator>)</operator><block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>}</block></expr></argument>, <argument><expr><name>cmpx</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><operator>--</operator><name>pos</name></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>==</operator> <name>x</name></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>ret</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>pos</name></expr>]</index></name></expr><operator>,</operator> <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
	}</block></then><else>else <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>int</name><argument_list>(<argument><expr><call><name>lower_bound</name><argument_list>(<argument><expr><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><operator>(</operator><name>node</name><operator>)</operator><block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>}</block></expr></argument>, <argument><expr><name>cmpy</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><operator>--</operator><name>pos</name></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name><name>b</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>==</operator> <name>y</name></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>ret</name> <operator>=</operator> <name><name>b</name><index>[<expr><name>pos</name></expr>]</index></name></expr><operator>,</operator> <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
	}</block></else></if>
	<return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>Check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><name>x</name> <operator>&lt;=</operator> <name>u</name> <operator>||</operator> <name>x</name> <operator>&gt;=</operator> <name>d</name> <operator>||</operator> <name>y</name> <operator>&lt;=</operator> <name>l</name> <operator>||</operator> <name>y</name> <operator>&gt;=</operator> <name>r</name></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>int</name><argument_list>(<argument><expr><call><name>lower_bound</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><operator>(</operator><name>node</name><operator>)</operator><block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>}</block></expr></argument>, <argument><expr><name>cmpx</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name><name>a</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>==</operator> <name>x</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>==</operator> <name>y</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<comment type="line">//freopen("D.in", "r", stdin);</comment>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>wt</name> <operator>=</operator> <literal type="number">1ll</literal> <operator>*</operator> <name>n</name> <operator>*</operator> <name>m</name> <operator>-</operator> <name>k</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>l</name> <operator>=</operator> <name>u</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>r</name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name>cmpx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name>cmpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>tx</name></decl>, <decl><type ref="prev"/><name>ty</name></decl>, <decl><type ref="prev"/><name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition>;</condition> <incr/>)</control> <block>{
		<comment type="line">//printf("%d %d\n", x, y);</comment>
		<decl_stmt><decl><type><name>node</name></type> <name>p</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>tx</name> <operator>=</operator> <name>x</name></expr><operator>,</operator> <expr><name>ty</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><call><name>Ask</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<if>if<condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>ty</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
			<elseif>else <if>if<condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>tx</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif>
			<elseif>else <if>if<condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>ty</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif>
			<else>else
				<block type="pseudo"><expr_stmt><expr><name>tx</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
		}</block></then><else>else <block>{
			<if>if<condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>ty</name> <operator>=</operator> <name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
			<elseif>else <if>if<condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>tx</name> <operator>=</operator> <name>d</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif>
			<elseif>else <if>if<condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>ty</name> <operator>=</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif>
			<else>else
				<block type="pseudo"><expr_stmt><expr><name>tx</name> <operator>=</operator> <name>u</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
		}</block></else></if>
		<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>tx</name> <operator>-</operator> <name>x</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name>ty</name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <name>tx</name></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <name>ty</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>++</operator><name>t</name><operator>)</operator> <operator>%=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		<if>if<condition>(<expr><call><name>Check</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name><name>dx</name><index>[<expr><name>t</name></expr>]</index></name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>dy</name><index>[<expr><name>t</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><break>break;</break></block></then></if>
		<if>if<condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>u</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block></then>
		<elseif>else <if>if<condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>d</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block></then></if></elseif>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name>l</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block></else></if>
	}</block></for>
	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><ternary><condition><expr><name>sum</name> <operator>==</operator> <name>wt</name></expr> ?</condition><then> <expr><literal type="string">"Yes"</literal></expr> </then><else>: <expr><literal type="string">"No"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
