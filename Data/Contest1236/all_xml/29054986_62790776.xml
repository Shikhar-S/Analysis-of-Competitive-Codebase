<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29054986_62790776.cpp"><comment type="block" format="doxygen">/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author aajisaka
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>void</name></type> <name>debug_out</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Head</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Tail</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>debug_out</name><parameter_list>(<parameter><decl><type><name>Head</name></type> <name>H</name></decl></parameter>, <parameter><decl><type><name>Tail</name><modifier>...</modifier></type> <name>T</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <call><name>to_string</name><argument_list>(<argument><expr><name>H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>debug_out</name><argument_list>(<argument><expr><name>T</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; "[" &lt;&lt; #__VA_ARGS__ &lt;&lt; "]:", debug_out(__VA_ARGS__)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>42</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPEED</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);cin.tie(nullptr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0; i&lt;(int)(n); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(), v.end()</cpp:value></cpp:define>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>chmax</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="boolean">true</literal></expr>;</return> }</block></then></if> <return>return <expr><literal type="boolean">false</literal></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>chmin</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="boolean">true</literal></expr>;</return> }</block></then></if> <return>return <expr><literal type="boolean">false</literal></expr>;</return> }</block></function>

<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>P</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<decl_stmt><decl><specifier>constexpr</specifier> <type><name>double</name></type> <name>PI</name> <init>= <expr><literal type="number">3.14159265358979323846</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mt19937_64</name></type> <name>engine</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><specifier>constexpr</specifier> <type><name>ll</name></type> <name>mod17</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><specifier>constexpr</specifier> <type><name>ll</name></type> <name>mod19</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><specifier>constexpr</specifier> <type><name>ll</name></type> <name>mod9</name> <init>= <expr><literal type="number">998244353</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>mod</name> <init>= <expr><name>mod17</name></expr></init></decl>;</decl_stmt>

<comment type="line">// Mod int library</comment>
<decl_stmt><decl><type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>minvmap</name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>minv</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><type><name>auto</name></type> <name>k</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>auto</name></type> <name>p</name> <init>= <expr><name><name>minvmap</name><index>[<expr><name>a</name></expr>]</index></name></expr></init></decl>;</decl_stmt> <if>if <condition>(<expr><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>p</name></expr>;</return></block></then></if>
  <decl_stmt><decl><type><name>ll</name></type> <name>b</name> <init>= <expr><name>m</name></expr></init></decl>, <decl><type ref="prev"/><name>u</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>b</name></expr>)</condition> <block>{ <decl_stmt><decl><type><name>ll</name></type> <name>t</name> <init>= <expr><name>a</name><operator>/</operator><name>b</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name> <operator>-=</operator> <name>t</name><operator>*</operator><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>u</name> <operator>-=</operator> <name>t</name><operator>*</operator><name>v</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></while>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>u</name><operator>%</operator><name>m</name><operator>+</operator><name>m</name><operator>)</operator><operator>%</operator><name>m</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>minvmap</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt> <return>return <expr><name>p</name></expr>;</return>
}</block></function>

<struct>struct <name>mint</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>;</decl_stmt>
  <constructor><name>mint</name><parameter_list>()</parameter_list><member_init_list>:<call><name>x</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></member_init_list><block>{}</block></constructor>
  <constructor><name>mint</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><member_init_list>:<call><name>x</name><argument_list>(<argument><expr><operator>(</operator><name>x</name><operator>%</operator><name>mod</name><operator>+</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr></argument>)</argument_list></call></member_init_list><block>{}</block></constructor>
  <function><type><name>mint</name><modifier>&amp;</modifier></type> <name>fix</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>%</operator><name>mod</name><operator>+</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>-</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call><name>mint</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <operator>*</operator><name>this</name></expr>;</return>}</block></function>
  <function type="operator"><type><name>mint</name><modifier>&amp;</modifier></type> <name>operator<name>+=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list><block>{ <if>if<condition>(<expr><operator>(</operator><name>x</name><operator>+=</operator><name><name>a</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>&gt;=</operator><name>mod</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name><operator>-=</operator><name>mod</name></expr>;</expr_stmt></block></then></if> <return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></function>
  <function type="operator"><type><name>mint</name><modifier>&amp;</modifier></type> <name>operator<name>-=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list><block>{ <if>if<condition>(<expr><operator>(</operator><name>x</name><operator>+=</operator><name>mod</name><operator>-</operator><name><name>a</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>&gt;=</operator><name>mod</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name><operator>-=</operator><name>mod</name></expr>;</expr_stmt></block></then></if> <return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></function>
  <function type="operator"><type><name>mint</name><modifier>&amp;</modifier></type> <name>operator<name>*=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><operator>(</operator><name>x</name><operator>*=</operator><name><name>a</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>%=</operator><name>mod</name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></function>
  <function type="operator"><type><name>mint</name><modifier>&amp;</modifier></type> <name>operator<name>/=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><operator>(</operator><name>x</name><operator>*=</operator><call><name>minv</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%=</operator><name>mod</name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list><specifier>const</specifier><block>{ <return>return <expr><call><name>mint</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>a</name></expr>;</return>}</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list><specifier>const</specifier><block>{ <return>return <expr><call><name>mint</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>a</name></expr>;</return>}</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list><specifier>const</specifier><block>{ <return>return <expr><call><name>mint</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name>a</name></expr>;</return>}</block></function>
  <function type="operator"><type><name>mint</name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list><specifier>const</specifier><block>{ <return>return <expr><call><name>mint</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>/=</operator> <name>a</name></expr>;</return>}</block></function>
  <function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list><specifier>const</specifier><block>{ <return>return <expr><name>x</name> <operator>&lt;</operator> <name><name>a</name><operator>.</operator><name>x</name></name></expr>;</return>}</block></function>
  <function type="operator"><type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mint</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list><specifier>const</specifier><block>{ <return>return <expr><name>x</name> <operator>==</operator> <name><name>a</name><operator>.</operator><name>x</name></name></expr>;</return>}</block></function>
</public>}</block>;</struct>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>T</name></type> <name>mod_pow</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><type><name>T</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <while>while<condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{
    <if>if <condition>(<expr><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>a</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  }</block></while>
  <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<class>class <name>combination</name> <block>{<private type="default">
    <comment type="line">// factorial</comment>
    </private><public>public: <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>mint</name></expr></argument>&gt;</argument_list></name></name></type> <name>fact</name></decl>;</decl_stmt>
    </public><public>public: <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>mint</name></expr></argument>&gt;</argument_list></name></name></type> <name>inv</name></decl>;</decl_stmt>

    <constructor><name>combination</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>fact</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>inv</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>fact</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fact</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
      }</block></for>
      <expr_stmt><expr><name><name>inv</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>mint</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>fact</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>inv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>inv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
      }</block></for>
    }</block></constructor>

    <comment type="line">// nCr</comment>
    </public><public>public: <function><type><name>mint</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>r</name> <operator>||</operator> <name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
      <return>return <expr><name><name>fact</name><index>[<expr><name>n</name></expr>]</index></name><operator>*</operator><name><name>inv</name><index>[<expr><name>r</name></expr>]</index></name><operator>*</operator><name><name>inv</name><index>[<expr><name>n</name><operator>-</operator><name>r</name></expr>]</index></name></expr>;</return>
    }</block></function>
    <comment type="line">// nPr</comment>
    </public><public>public: <function><type><name>mint</name></type> <name>p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>r</name> <operator>||</operator> <name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
      <return>return <expr><name><name>fact</name><index>[<expr><name>n</name></expr>]</index></name><operator>*</operator><name><name>inv</name><index>[<expr><name>n</name><operator>-</operator><name>r</name></expr>]</index></name></expr>;</return>
    }</block></function>
</public>}</block>;</class>

<class>class <name>BAliceAndTheListOfPresents</name> <block>{<private type="default">
</private><public>public:
    <function><type><name>void</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>cin</name></decl></parameter>, <parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>cout</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name>SPEED</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>mint</name></type> <name>two</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>auto</name></type> <name>ans</name> <init>= <expr><call><name>mod_pow</name><argument_list>(<argument><expr><call><name>mod_pow</name><argument_list>(<argument><expr><name>two</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>ans</name><operator>.</operator><name>x</name></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></function>
</public>}</block>;</class>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>BAliceAndTheListOfPresents</name></type> <name>solver</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>istream</name></name><modifier>&amp;</modifier></type> <name>in</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>out</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cout</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>solver</name><operator>.</operator><name>solve</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
