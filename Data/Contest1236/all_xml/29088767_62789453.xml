<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29088767_62789453.cpp"><comment type="block" format="doxygen">/***
 *      __  __            _    _       _
 *     |  \/  |          | |  | |     | |
 *     | \  / |_ __      | |  | |_ __ | | ___ __   _____      ___ __
 *     | |\/| | '__|     | |  | | '_ \| |/ / '_ \ / _ \ \ /\ / / '_ \
 *     | |  | | |     _  | |__| | | | |   &lt;| | | | (_) \ V  V /| | | |
 *     |_|  |_|_|    (_)  \____/|_| |_|_|\_\_| |_|\___/ \_/\_/ |_| |_|
 *
 *
***/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<comment type="block">/*---------------for_stuff-------------------*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i=a;i&lt;=b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i=a;i&gt;=b;i--)</cpp:value></cpp:define>
<comment type="block">/*---------------pair_stuff------------------*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Iii</name></cpp:macro> <cpp:value>pair&lt;int,ii&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ill</name></cpp:macro> <cpp:value>pair&lt;int,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lli</name></cpp:macro> <cpp:value>pair&lt;ll,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iiI</name></cpp:macro> <cpp:value>pair&lt;ii,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>llll</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<comment type="block">/*--------------vector_stuff-----------------*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ppb</name></cpp:macro> <cpp:value>pop_back</cpp:value></cpp:define>
<comment type="block">/*--------------const_stuff-----------------*/</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<comment type="block">/*--------------map_stuff--------------------*/</comment>
<comment type="line">// why do you think I should write something in this part? :v</comment>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>binpow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>mu</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>cs</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>mu</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>cs</name></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>ll</name></type> <name>coso</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>coso</name><operator>=</operator><call><name>binpow</name><argument_list>(<argument><expr><name>mu</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>coso</name><operator>=</operator><name>coso</name><operator>*</operator><name>coso</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>coso</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>mu</name><operator>%</operator><literal type="number">2</literal><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>coso</name><operator>*=</operator><name>cs</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>coso</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
	}</block></then></if>
	<return>return <expr><name>coso</name></expr>;</return>
}</block></function>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ans</name><operator>=</operator><call><name>binpow</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><literal type="number">2ll</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// cout&lt;&lt;m&lt;&lt;" ";</comment>
	<expr_stmt><expr><name>ans</name><operator>--</operator></expr>;</expr_stmt>
	<comment type="line">// cout&lt;&lt;m&lt;&lt;" ";</comment>
	<if>if <condition>(<expr><name>ans</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><name>ans</name><operator>=</operator><call><name>binpow</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
