<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29050357_62809224.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<comment type="line">//#include &lt;ext/pb_ds/tree_policy.hpp&gt;</comment>
<comment type="line">//#include &lt;ext/pb_ds/assoc_container.hpp&gt;</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line">//using namespace __gnu_pbds;</comment>
<comment type="line">//template&lt;typename key, typename val&gt;</comment>
<comment type="line">//using ordered_tree =</comment>
<comment type="line">//  tree&lt;key, val, greater&lt;&gt;, rb_tree_tag, tree_order_statistics_node_update&gt;;</comment>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>int64</name>;</typedef>
<typedef>typedef <type><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>comp</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pi</name> <init>= <expr><literal type="number">3.14159265358979323846</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><literal type="number">1e+9</literal> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int64</name></type> <name>inf64</name> <init>= <expr><operator>(</operator><name>int64</name><operator>)</operator><literal type="number">1e+18</literal> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>dinf</name> <init>= <expr><literal type="number">1e+20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1</literal><literal type="char">'000'</literal><literal type="number">000</literal><literal type="char">'007;//998244353;
const int base = 2187;
const double eps = 1e-8;
const int N = 100'</literal><literal type="number">000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>LOGN</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>test</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>r</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>c</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>--</operator><name>x</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>y</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <decl_stmt><decl><type><name>int64</name></type> <name>total</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>x_min</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>x_max</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>y_min</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>y_max</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>not_moved</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ok</name></expr>;</condition> <incr><expr><name>dir</name> <operator>=</operator> <operator>(</operator><name>dir</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>to</name></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>dir</name></expr>)</condition> <block>{
      <case>case <expr><literal type="number">0</literal></expr>:</case> <block>{
        <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>r</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>it</name> <operator>==</operator> <name><name>r</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to</name> <operator>=</operator> <name>y_max</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><name>to</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><operator>*</operator><name>it</name></expr></argument>, <argument><expr><name>y_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>not_moved</name> <operator>+=</operator> <name>to</name> <operator>-</operator> <name>y</name> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>total</name> <operator>+=</operator> <name>to</name> <operator>-</operator> <name>y</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <name>to</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>y_max</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>y_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      }</block>
      <case>case <expr><literal type="number">1</literal></expr>:</case> <block>{
        <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>c</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>it</name> <operator>==</operator> <name><name>c</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to</name> <operator>=</operator> <name>x_max</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><name>to</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><operator>*</operator><name>it</name></expr></argument>, <argument><expr><name>x_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>not_moved</name> <operator>+=</operator> <name>to</name> <operator>-</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>total</name> <operator>+=</operator> <name>to</name> <operator>-</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name>to</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>x_max</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      }</block>
      <case>case <expr><literal type="number">2</literal></expr>:</case> <block>{
        <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>r</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>it</name> <operator>==</operator> <name><name>r</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to</name> <operator>=</operator> <name>y_min</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><name>to</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><operator>*</operator><operator>--</operator><name>it</name></expr></argument>, <argument><expr><name>y_min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>not_moved</name> <operator>+=</operator> <name>y</name> <operator>-</operator> <name>to</name> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>total</name> <operator>+=</operator> <name>y</name> <operator>-</operator> <name>to</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <name>to</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>y_min</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>y_min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      }</block>
      <case>case <expr><literal type="number">3</literal></expr>:</case> <block>{
        <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>c</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>it</name> <operator>==</operator> <name><name>c</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to</name> <operator>=</operator> <name>x_min</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><name>to</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><operator>*</operator><operator>--</operator><name>it</name></expr></argument>, <argument><expr><name>x_min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>not_moved</name> <operator>+=</operator> <name>x</name> <operator>-</operator> <name>to</name> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>total</name> <operator>+=</operator> <name>x</name> <operator>-</operator> <name>to</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name>to</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>x_min</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x_min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      }</block>
    }</block></switch>
    <expr_stmt><expr><name>ok</name> <operator>&amp;=</operator> <name>not_moved</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> <operator>&amp;=</operator> <name>x_min</name> <operator>&lt;=</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;=</operator> <name>x_max</name>
       <operator>&amp;&amp;</operator> <name>y_min</name> <operator>&lt;=</operator> <name>y</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;=</operator> <name>y_max</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>total</name> <operator>&gt;=</operator> <name>n</name> <operator>*</operator> <literal type="number">1ll</literal> <operator>*</operator> <name>m</name> <operator>-</operator> <name>k</name></expr>)</condition><then> <block>{
      <break>break;</break>
    }</block></then></if>
    <expr_stmt><expr><name>not_moved</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  }</block></for>
  <if>if <condition>(<expr><name>ok</name> <operator>&amp;&amp;</operator> <name>total</name> <operator>&gt;=</operator> <name>n</name> <operator>*</operator> <literal type="number">1ll</literal> <operator>*</operator> <name>m</name> <operator>-</operator> <name>k</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt>
  }</block></else></if>
}</block></function>

<function><type><name>void</name></type> <name>precalc</name><parameter_list>()</parameter_list> <block>{
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>precalc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>test</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <comment type="line">//cin &gt;&gt; test;</comment>
  <comment type="line">//auto start = chrono::high_resolution_clock::now();</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>test</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
    <expr_stmt><expr><call><name>solve</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <comment type="line">//cerr &lt;&lt; chrono::duration_cast&lt;chrono::milliseconds&gt;(chrono::high_resolution_clock::now() - start).count() &lt;&lt; '\n';</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


</unit>
