<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29061135_62799167.cpp">

<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<comment type="line">//#include &lt;ext/pb_ds/assoc_container.hpp&gt;</comment>
<comment type="line">//#include &lt;ext/pb_ds/tree_policy.hpp&gt;</comment>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line">//using namespace __gnu_pbds;</comment>
<comment type="line">//typedef tree&lt;LL, null_type, less&lt;int&gt;, rb_tree_tag, tree_order_statistics_node_update&gt; pbds;</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro>                  <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro>                 <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scl</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>              <cpp:value>scanf("%lld", &amp;n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scf</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>              <cpp:value>scanf("%lf", &amp;n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sci</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>              <cpp:value>scanf("%d", &amp;n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scii</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>scanf("%d %d",&amp;n,&amp;m)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sciii</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>m</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>scanf("%d %d %d",&amp;n,&amp;m,&amp;p)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scs</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>              <cpp:value>scanf("%s", n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pfi</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>              <cpp:value>printf("%d\n",n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pfl</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>              <cpp:value>printf("%I64\n",n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pfs</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>              <cpp:value>printf("%s\n",s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dist2D</name><parameter_list>(<parameter><type><name>x1</name></type></parameter>,<parameter><type><name>y1</name></type></parameter>,<parameter><type><name>x2</name></type></parameter>,<parameter><type><name>y2</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dist3D</name><parameter_list>(<parameter><type><name>x1</name></type></parameter>,<parameter><type><name>y1</name></type></parameter>,<parameter><type><name>z1</name></type></parameter>,<parameter><type><name>x2</name></type></parameter>,<parameter><type><name>y2</name></type></parameter>,<parameter><type><name>z2</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)+(z1-z2)*(z1-z2))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>deb</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>		        <cpp:value>cout&lt;&lt;#x&lt;&lt;" "&lt;&lt;x&lt;&lt;endl</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FASTREAD</name></cpp:macro>            <cpp:value>ios_base::sync_with_stdio(0);cin.tie(nullptr);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro>                 <cpp:value>100000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODP</name></cpp:macro>                <cpp:value>99999999999973LL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>                  <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro>                  <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pp</name></cpp:macro>                  <cpp:value>pair&lt;LL,LL&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>memo</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>memset(a,b,sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro>                 <cpp:value>1e18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPS</name></cpp:macro>                 <cpp:value>1e-8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Pi</name></cpp:macro>                  <cpp:value>acos(-1.0)</cpp:value></cpp:define>

<function><type><name>LL</name></type> <name>bigmod</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>md</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if><if>if<condition>(<expr><name>p</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{ <return>return <expr><operator>(</operator><operator>(</operator><name>b</name><operator>%</operator><name>md</name><operator>)</operator><operator>*</operator><call><name>bigmod</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>p</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>md</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>md</name></expr>;</return>}</block></then> <else>else <block>{<decl_stmt><decl><type><name>LL</name></type> <name>y</name><init>=<expr><call><name>bigmod</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>p</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><return>return <expr><operator>(</operator><name>y</name><operator>*</operator><name>y</name><operator>)</operator><operator>%</operator><name>md</name></expr>;</return>}</block></else></if>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>200005</cpp:value></cpp:define>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>v</name><index>[<expr><literal type="number">400</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//FASTREAD;</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nn</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>nn</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><name>nn</name><operator>*</operator><name>nn</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <comment type="line">//cout&lt;&lt;c&lt;&lt;endl;</comment>
        <if>if<condition>(<expr><name>flag</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>v</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name><name>v</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
        }</block></else></if>


        <if>if<condition>(<expr><name>c</name><operator>==</operator><name>nn</name><operator>+</operator><literal type="number">1</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>flag</name><operator>=</operator><operator>!</operator><name>flag</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>flag</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>c</name><operator>=</operator><name>nn</name></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>c</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>


        }</block></then></if>
    }</block></for>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>nn</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <comment type="line">//cout&lt;&lt;v[i].size()&lt;&lt;endl;</comment>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></for>




    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<comment type="block">/* LL dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1}; */</comment> <comment type="line">// 4 Direction</comment>
<comment type="block">/* LL dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; */</comment> <comment type="line">// 8 Direction</comment>
<comment type="block">/* LL dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; */</comment> <comment type="line">// Knight Direction</comment>
<comment type="block">/* LL dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; */</comment> <comment type="line">// Hexagonal Direction</comment>
</unit>
