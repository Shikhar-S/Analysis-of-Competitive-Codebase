<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29088750_62784389.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cctype&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MY_READ</name></cpp:macro> <cpp:value>{char c;bool nega=false;while(!isdigit(c=getchar()))if(c=='-')nega=true;x=(c^48);while(isdigit(c=getchar()))x=x*10+(c^48);if(nega)x=-x;}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MY_MIN</name></cpp:macro> <cpp:value>{return a&lt;b?a:b;}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MY_MAX</name></cpp:macro> <cpp:value>{return a&gt;b?a:b;}</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><specifier>inline</specifier> <type><name>void</name></type> <name>readint</name><argument_list>(<argument><expr><name>int</name> <operator>&amp;</operator><name>x</name></expr></argument>)</argument_list> <name>MY_READ</name> <namespace><specifier>inline</specifier> void <name>prtint</name>(<name>ll</name> <name>x</name></namespace></decl>)<block>{<if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>x</name><operator>=</operator><operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if><if>if<condition>(<expr><name>x</name><operator>&gt;=</operator><literal type="number">10</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>prtint</name><argument_list>(<argument><expr><name>x</name><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>x</name><operator>%</operator><literal type="number">10</literal><operator>|</operator><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return;</return>}</block></decl_stmt>
<decl_stmt><decl><specifier>inline</specifier> <type><name>void</name></type> <name>readll</name><argument_list>(<argument><expr><name>ll</name> <operator>&amp;</operator><name>x</name></expr></argument>)</argument_list> <name>MY_READ</name> <namespace><specifier>inline</specifier> void <name>prtll</name>(<name>ll</name> <name>x</name></namespace></decl>)<block>{<if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>x</name><operator>=</operator><operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if><if>if<condition>(<expr><name>x</name><operator>&gt;=</operator><literal type="number">10</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>prtll</name><argument_list>(<argument><expr><name>x</name><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>x</name><operator>%</operator><literal type="number">10</literal><operator>|</operator><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return;</return>}</block></decl_stmt>
<decl_stmt><decl><specifier>inline</specifier> <type><name>int</name></type> <name>mmin</name><argument_list>(<argument><expr><name>int</name> <name>a</name></expr></argument>,<argument><expr><name>int</name> <name>b</name></expr></argument>)</argument_list> <name>MY_MIN</name> <namespace><specifier>inline</specifier> ll <name>mmin</name>(<name>ll</name> <name>a</name><operator>,</operator><name>ll</name> <name>b</name></namespace></decl>) MY_MIN <namespace><specifier>inline</specifier> ll <name>mmin</name>(<name>ll</name> <name>a</name><operator>,</operator><name>int</name> <name>b</name></namespace></decl_stmt>) <decl_stmt><decl><type><name>MY_MIN</name> <specifier>inline</specifier> <name>ll</name></type> <name>mmin</name><argument_list>(<argument><expr><name>int</name> <name>a</name></expr></argument>,<argument><expr><name>ll</name> <name>b</name></expr></argument>)</argument_list> <name>MY_MIN</name>
<namespace><specifier>inline</specifier> int <name>mmax</name>(<name>int</name> <name>a</name><operator>,</operator><name>int</name> <name>b</name></namespace></decl>) MY_MAX <namespace><specifier>inline</specifier> ll <name>mmax</name>(<name>ll</name> <name>a</name><operator>,</operator><name>ll</name> <name>b</name></namespace></decl_stmt>) <decl_stmt><decl><type><name>MY_MAX</name> <specifier>inline</specifier> <name>ll</name></type> <name>mmax</name><argument_list>(<argument><expr><name>ll</name> <name>a</name></expr></argument>,<argument><expr><name>int</name> <name>b</name></expr></argument>)</argument_list> <name>MY_MAX</name> <namespace><specifier>inline</specifier> ll <name>mmax</name>(<name>int</name> <name>a</name><operator>,</operator><name>ll</name> <name>b</name></namespace></decl>) MY_MAX

int T<operator>,</operator>a<operator>,</operator>b<operator>,</operator>c<operator>,</operator>ans;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>readint</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition><block>{
		<expr_stmt><expr><call><name>readint</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>readint</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>readint</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<while>while<condition>(<expr><name>b</name><operator>&gt;=</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><block>{
			<expr_stmt><expr><operator>--</operator><name>b</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>c</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="number">3</literal></expr>;</expr_stmt>
		}</block></while>
		<while>while<condition>(<expr><name>a</name><operator>&gt;=</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>b</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><block>{
			<expr_stmt><expr><operator>--</operator><name>a</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>b</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="number">3</literal></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><call><name>prtint</name><argument_list>(<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
