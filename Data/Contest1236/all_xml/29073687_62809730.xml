<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29073687_62809730.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y0</name></cpp:macro> <cpp:value>eto</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y1</name></cpp:macro> <cpp:value>mezhdy</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y2</name></cpp:macro> <cpp:value>nami</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>left</name></cpp:macro> <cpp:value>extermination</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>right</name></cpp:macro> <cpp:value>dismemberment</cpp:value></cpp:define>
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
 
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>T</name></type> <name>x</name></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name></expr>;</expr_stmt><expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></for>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><decl><type><name>T</name></type> <name>x</name> <range>: <expr><name>a</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>}</block></function>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>r</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name>lx</name></decl>,<decl><type ref="prev"/><name>ly</name></decl>,<decl><type ref="prev"/><name>ux</name></decl>,<decl><type ref="prev"/><name>uy</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//freopen("INPUT.txt", "r", stdin);</comment>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>count</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <if>if<condition>(<expr><name>n</name><operator>*</operator><name>m</name><operator>==</operator><name>k</name><operator>+</operator><name>cnt</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    
    <expr_stmt><expr><name>lx</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ly</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ux</name><operator>=</operator><name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>uy</name><operator>=</operator><name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>y</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cnt</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>yy</name></decl>,<decl><type ref="prev"/><name>xx</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name></decl>;</decl_stmt>
        
        
        <expr_stmt><expr><name>it</name><operator>=</operator><name><name>r</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>it</name><operator>==</operator><name><name>r</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>yy</name><operator>=</operator><name>uy</name></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>yy</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>uy</name></expr></argument>,<argument><expr><operator>*</operator><name>it</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        
        <comment type="line">//cout&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;" -&gt;  "&lt;&lt;x&lt;&lt;" "&lt;&lt;yy&lt;&lt;" "&lt;&lt;yy-y&lt;&lt;endl;</comment>
        
        <if>if<condition>(<expr><name>yy</name><operator>==</operator><name>y</name></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
        
        <expr_stmt><expr><name>cnt</name><operator>+=</operator><operator>(</operator><name>yy</name><operator>-</operator><name>y</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name><operator>=</operator><name>yy</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>uy</name><operator>=</operator><name>yy</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>it</name><operator>=</operator><name><name>c</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>it</name><operator>==</operator><name><name>c</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>xx</name><operator>=</operator><name>ux</name></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>xx</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>ux</name></expr></argument>,<argument><expr><operator>*</operator><name>it</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        
        <if>if<condition>(<expr><name>xx</name><operator>==</operator><name>x</name></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
        
        <comment type="line">//cout&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;" -&gt;  "&lt;&lt;xx&lt;&lt;" "&lt;&lt;y&lt;&lt;" "&lt;&lt;(xx-x)&lt;&lt;endl;</comment>
        <expr_stmt><expr><name>cnt</name><operator>+=</operator><operator>(</operator><name>xx</name><operator>-</operator><name>x</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name><operator>=</operator><name>xx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ux</name><operator>=</operator><name>xx</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>it</name><operator>=</operator><name><name>r</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>it</name><operator>==</operator><name><name>r</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>yy</name><operator>=</operator><name>ly</name></expr>;</expr_stmt></block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>yy</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>ly</name></expr></argument>,<argument><expr><operator>*</operator><name>it</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        
        <if>if<condition>(<expr><name>yy</name><operator>==</operator><name>y</name></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
        
        <comment type="line">//cout&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;" -&gt;  "&lt;&lt;x&lt;&lt;" "&lt;&lt;yy&lt;&lt;" "&lt;&lt;(y-yy)&lt;&lt;endl;</comment>
            
        <expr_stmt><expr><name>cnt</name><operator>+=</operator><operator>(</operator><name>y</name><operator>-</operator><name>yy</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name><operator>=</operator><name>yy</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ly</name><operator>=</operator><name>yy</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>it</name><operator>=</operator><name><name>c</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>it</name><operator>==</operator><name><name>c</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>xx</name><operator>=</operator><name>lx</name></expr>;</expr_stmt></block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>xx</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>lx</name></expr></argument>,<argument><expr><operator>*</operator><name>it</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        
        <if>if<condition>(<expr><name>xx</name><operator>==</operator><name>x</name></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
        
        <comment type="line">//cout&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;" -&gt;  "&lt;&lt;xx&lt;&lt;" "&lt;&lt;y&lt;&lt;" "&lt;&lt;x-xx&lt;&lt;endl;</comment>
        
        <expr_stmt><expr><name>cnt</name><operator>+=</operator><operator>(</operator><name>x</name><operator>-</operator><name>xx</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name><operator>=</operator><name>xx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>lx</name><operator>=</operator><name>xx</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <if>if<condition>(<expr><name>cnt</name><operator>+</operator><name>k</name><operator>==</operator><name>n</name><operator>*</operator><name>m</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal></expr>;</expr_stmt></block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal></expr>;</expr_stmt></block></else></if>
    
    
}</block></function>
</unit>
