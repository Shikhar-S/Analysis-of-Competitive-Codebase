<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29066331_62810284.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>vx</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>vy</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>f</name></decl>,<decl><type ref="prev"/><name>lx</name></decl>,<decl><type ref="prev"/><name>rx</name></decl>,<decl><type ref="prev"/><name>ly</name></decl>,<decl><type ref="prev"/><name>ry</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vx</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vy</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ge</name><init>=<expr><literal type="number">1LL</literal><operator>*</operator><name>n</name><operator>*</operator><name>m</name><operator>-</operator><name>k</name></expr></init></decl>,<decl><type ref="prev"/><name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>bo</name><init>=<expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>y</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>f</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>lx</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>rx</name><operator>=</operator><name>m</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ly</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>ry</name><operator>=</operator><name>n</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>bo</name><operator>&amp;&amp;</operator><name>lx</name><operator>&lt;=</operator><name>rx</name><operator>&amp;&amp;</operator><name>ly</name><operator>&lt;=</operator><name>ry</name></expr>)</condition>
	<block>{
		<switch>switch<condition>(<expr><name>f</name></expr>)</condition>
		<block>{
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name>ans</name><operator>=</operator><name>rx</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>!=</operator><name><name>vy</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{
				<comment type="line">//	printf("(%d %d %d)-&gt;%d\n",x,y,f,vy[y][i]);</comment>
					<if>if<condition>(<expr><name><name>vy</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name>x</name></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name><name>vy</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
				}</block></for>
				<if>if<condition>(<expr><name>ans</name><operator>==</operator><name>x</name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>bo</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
					<break>break;</break>
				}</block></then>
				<else>else
				<block>{
					<expr_stmt><expr><name>ans</name><operator>--</operator></expr>;</expr_stmt>
<comment type="line">//					printf("%d %d %d %d (%d %d %d)-&gt;",lx,rx,ly,ry,x,y,f);</comment>
					<expr_stmt><expr><name>sum</name><operator>+=</operator><name>ans</name><operator>-</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>x</name><operator>=</operator><name>ans</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>y</name><operator>=</operator><name>y</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>ly</name><operator>=</operator><name>y</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>rx</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
<comment type="line">//					printf("(%d %d %d)\n",x,y,f);</comment>
				}</block></else></if>
				<break>break;</break>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><name>ans</name><operator>=</operator><name>ry</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>!=</operator><name><name>vx</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{
					<if>if<condition>(<expr><name><name>vx</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name>y</name></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name><name>vx</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
				}</block></for>
				<if>if<condition>(<expr><name>ans</name><operator>==</operator><name>y</name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>bo</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
					<break>break;</break>
				}</block></then>
				<else>else
				<block>{
					<expr_stmt><expr><name>ans</name><operator>--</operator></expr>;</expr_stmt>
<comment type="line">//					printf("%d %d %d %d (%d %d %d)-&gt;",lx,rx,ly,ry,x,y,f);</comment>
					<expr_stmt><expr><name>sum</name><operator>+=</operator><name>ans</name><operator>-</operator><name>y</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>y</name><operator>=</operator><name>ans</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>rx</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>ry</name><operator>=</operator><name>y</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
<comment type="line">//					printf("(%d %d %d)\n",x,y,f);</comment>
				}</block></else></if>
				<break>break;</break>
			<case>case <expr><literal type="number">3</literal></expr>:</case>
				<expr_stmt><expr><name>ans</name><operator>=</operator><name>lx</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>!=</operator><name><name>vy</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{
<comment type="line">//					printf("%d\n",vy[y][i]);</comment>
					<if>if<condition>(<expr><name><name>vy</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>x</name></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name><name>vy</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
				}</block></for>
				<if>if<condition>(<expr><name>ans</name><operator>==</operator><name>x</name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>bo</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
					<break>break;</break>
				}</block></then>
				<else>else
				<block>{
					<expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
<comment type="line">//					printf("%d %d %d %d (%d %d %d)-&gt;",lx,rx,ly,ry,x,y,f);</comment>
					<expr_stmt><expr><name>sum</name><operator>+=</operator><name>x</name><operator>-</operator><name>ans</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>x</name><operator>=</operator><name>ans</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>y</name><operator>=</operator><name>y</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>lx</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>ry</name><operator>=</operator><name>y</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">4</literal></expr>;</expr_stmt>
<comment type="line">//					printf("(%d %d %d)\n",x,y,f);</comment>
				}</block></else></if>
				<break>break;</break>
			<case>case <expr><literal type="number">4</literal></expr>:</case>
				<expr_stmt><expr><name>ans</name><operator>=</operator><name>ly</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>!=</operator><name><name>vx</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{
					<if>if<condition>(<expr><name><name>vx</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>y</name></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name><name>vx</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
				}</block></for>
				<if>if<condition>(<expr><name>ans</name><operator>==</operator><name>y</name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>bo</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
					<break>break;</break>
				}</block></then>
				<else>else
				<block>{
					<expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
<comment type="line">//					printf("%d %d %d %d (%d %d %d)-&gt;",lx,rx,ly,ry,x,y,f);</comment>
					<expr_stmt><expr><name>sum</name><operator>+=</operator><name>y</name><operator>-</operator><name>ans</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>y</name><operator>=</operator><name>ans</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>lx</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>ly</name><operator>=</operator><name>y</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
<comment type="line">//					printf("(%d %d %d)\n",x,y,f);</comment>
				}</block></else></if>
				<break>break;</break>
		}</block></switch>
	}</block></while>
	<if>if<condition>(<expr><name>sum</name><operator>==</operator><name>ge</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	<else>else
		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
}</block></function></unit>
