<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29030305_62790611.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector&lt;ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(),(x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>ll</name></type> <name>OO</name> <init>= <expr><operator>(</operator><name>ll</name><operator>)</operator> <literal type="number">1e18</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name> <specifier>const</specifier></type> <name>N</name> <init>= <expr><literal type="number">2e5</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>a</name><operator>%=</operator><name>Mod</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name><operator>%=</operator><name>Mod</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name><operator>+=</operator><name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name><operator>%=</operator><name>Mod</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name><operator>+=</operator><name>Mod</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name><operator>%=</operator><name>Mod</name></expr>;</expr_stmt>
    <return>return <expr><name>a</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>a</name><operator>%=</operator><name>Mod</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name><operator>%=</operator><name>Mod</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name><operator>*=</operator><name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name><operator>%=</operator><name>Mod</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name><operator>+=</operator><name>Mod</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name><operator>%=</operator><name>Mod</name></expr>;</expr_stmt>
    <return>return <expr><name>a</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>fpow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>p</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>mul</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><call><name>fpow</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>p</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    <return>return <expr><call><name>fpow</name><argument_list>(<argument><expr><call><name>mul</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>p</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>exceptions</name></name><argument_list>(<argument><expr><name><name>cin</name><operator>.</operator><name>failbit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"in.in"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>fpow</name><argument_list>(<argument><expr><call><name>add</name><argument_list>(<argument><expr><call><name>fpow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
