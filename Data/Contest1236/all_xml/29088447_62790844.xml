<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29088447_62790844.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>bool</name></type> <name>chmax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>a</name><operator>&lt;</operator><name>b</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return> }</block></then></if> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>bool</name></type> <name>chmin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>a</name><operator>&gt;</operator><name>b</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return> }</block></then></if> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></function>

<class><template>template<parameter_list>&lt;<parameter><type><name>int</name></type> <name>mod</name></parameter>&gt;</parameter_list></template> class <name>modint</name>
<block>{<private type="default">   
</private><private>private:
  <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
</private><public>public:
  <function><type><name>int</name></type> <name>value</name><parameter_list>()</parameter_list><block>{ <return>return <expr><name>val</name></expr>;</return> }</block></function>
  <constructor><name>modint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name>val</name><operator>=</operator><name>x</name><operator>%</operator><name>mod</name></expr>;</expr_stmt> }</block></constructor>
  <function><type><name>modint</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>modint</name></type> <name>res</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>x</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{ <if>if<condition>(<expr><name>n</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name><operator>*=</operator><name>x</name></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>x</name><operator>*=</operator><name>x</name></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt> }</block></while>
    <return>return <expr><name>res</name></expr>;</return>
  }</block></function>
  <function><type><name>modint</name></type> <name>inv</name><parameter_list>()</parameter_list><block>{ <return>return <expr><call><name>pow</name><argument_list>(<argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function type="operator"><type><name>modint</name><modifier>&amp;</modifier></type> <name>operator<name>+=</name></name><parameter_list>(<parameter><decl><type><name>modint</name></type> <name>rhs</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name>val</name><operator>+=</operator><name><name>rhs</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt> <if>if<condition>(<expr><name>val</name><operator>&gt;=</operator><name>mod</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>val</name><operator>-=</operator><name>mod</name></expr>;</expr_stmt></block></then></if> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
  <function type="operator"><type><name>modint</name><modifier>&amp;</modifier></type> <name>operator<name>-=</name></name><parameter_list>(<parameter><decl><type><name>modint</name></type> <name>rhs</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name>val</name><operator>+=</operator><name>mod</name><operator>-</operator><name><name>rhs</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt> <if>if<condition>(<expr><name>val</name><operator>&gt;=</operator><name>mod</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>val</name><operator>-=</operator><name>mod</name></expr>;</expr_stmt></block></then></if> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
  <function type="operator"><type><name>modint</name><modifier>&amp;</modifier></type> <name>operator<name>*=</name></name><parameter_list>(<parameter><decl><type><name>modint</name></type> <name>rhs</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name>val</name><operator>=</operator><name>val</name><operator>*</operator><name><name>rhs</name><operator>.</operator><name>val</name></name><operator>%</operator><name>mod</name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
  <function type="operator"><type><name>modint</name><modifier>&amp;</modifier></type> <name>operator<name>/=</name></name><parameter_list>(<parameter><decl><type><name>modint</name></type> <name>rhs</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><operator>*</operator><name>this</name><operator>*=</operator><call><name><name>rhs</name><operator>.</operator><name>inv</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
  <function type="operator"><type><name>modint</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><name>modint</name></type> <name>rhs</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>modint</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call><operator>+=</operator><name>rhs</name></expr>;</return> }</block></function>
  <function type="operator"><type><name>modint</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><name>modint</name></type> <name>rhs</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>modint</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call><operator>-=</operator><name>rhs</name></expr>;</return> }</block></function>
  <function type="operator"><type><name>modint</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><name>modint</name></type> <name>rhs</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>modint</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call><operator>*=</operator><name>rhs</name></expr>;</return> }</block></function>
  <function type="operator"><type><name>modint</name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><name>modint</name></type> <name>rhs</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>modint</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call><operator>/=</operator><name>rhs</name></expr>;</return> }</block></function>
</public>}</block>;</class>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <using>using <name>mint</name><init>=<type><name><name>modint</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1000000007</literal></expr></argument>&gt;</argument_list></name></type></init>;</using>
  <decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>,<decl><type ref="prev"/><name>M</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>N</name><operator>&gt;&gt;</operator><name>M</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>mint</name></type> <name>ans</name><init>=<expr><call><name>mint</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>pow</name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ans</name><operator>=</operator><call><name><name>ans</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>ans</name><operator>.</operator><name>value</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function></unit>
