<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29087483_62786210.cpp"><comment type="line">//This code is solely the property of StarnyC</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hell</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hellx</name></cpp:macro> <cpp:value>998244353</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reset</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a,b,sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Go_Baby_Go</name></cpp:macro>  <cpp:value>ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);cerr.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>deb</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>cout &lt;&lt; (#x) &lt;&lt; " is " &lt;&lt; (x) &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro>  <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro>  <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ll)((a).size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).begin(),(c).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;(int)n;i++)</cpp:value></cpp:define>
 
 


<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if>
    <return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
 
<function><type><name>ll</name></type> <name>binexp</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{
   <if>if<condition>(<expr><operator>!</operator><name>n</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then>
<elseif>else <if>if<condition>(<expr><name>n</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>(</operator><name>x</name><operator>%</operator><name>m</name><operator>)</operator><operator>*</operator><call><name>binexp</name><argument_list>(<argument><expr><operator>(</operator><name>x</name><operator>%</operator><name>m</name><operator>)</operator><operator>*</operator><operator>(</operator><name>x</name><operator>%</operator><name>m</name><operator>)</operator></expr></argument>,<argument><expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>%</operator><name>m</name></expr>;</return></block></then></if></elseif>
<elseif>else <if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>n</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>binexp</name><argument_list>(<argument><expr><operator>(</operator><name>x</name><operator>%</operator><name>m</name><operator>)</operator><operator>*</operator><operator>(</operator><name>x</name><operator>%</operator><name>m</name><operator>)</operator></expr></argument>,<argument><expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>%</operator><name>m</name></expr>;</return></block></then></if></elseif></if> 
<return>return <expr><literal type="number">0</literal></expr>;</return>}</block></function>



<function><type><name>int32_t</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>_</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>_t</name></decl></parameter>)</parameter_list>
<block>{   

	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while<condition>(<expr><name>c</name><operator>&gt;=</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>b</name></expr>)</condition><block>{
		<expr_stmt><expr><name>c</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>

	}</block></while>

	<while>while<condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name>b</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><block>{
		<expr_stmt><expr><name>b</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>

<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>*</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>


}</block></function>
 
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
 <decl_stmt><decl><type><name>Go_Baby_Go</name>
<comment type="line">//cerr&lt;&lt; '\n' &lt;&lt; "Time elapsed :" &lt;&lt; clock() * 1000.0 / CLOCKS_PER_SEC &lt;&lt; " ms" ;</comment>
 
 
<name>ll</name></type> <name>_</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>_</name></expr>;</expr_stmt>
<comment type="line">//cin.ignore();</comment>
<decl_stmt><decl><type><name>ll</name></type> <name>_t</name><init>=<expr><name>_</name></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>_</name><operator>--</operator></expr>)</condition>
<block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>(<argument><expr><name>_</name></expr></argument>,<argument><expr><name>_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
 
<return>return <expr><literal type="number">0</literal></expr>;</return>
 
}</block></function></unit>
