<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29069920_62786378.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line" format="doxygen">/// Typedef</comment>
<typedef>typedef <type><name>long</name> <name>long</name></type>           <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type>         <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type>       <name>pii</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>                  <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ppb</name></cpp:macro>                 <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro>                  <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro>                  <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro>                  <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sf</name></cpp:macro>                  <cpp:value>scanf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro>                  <cpp:value>printf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>              <cpp:value>((x)*(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>loop</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>          <cpp:value>for(int i=0; i&lt;int(y); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>for(int i=int(x); i&lt;int(y); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROF</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>for(int i=int(x); i&gt;=int(y); i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>              <cpp:value>c.begin(), c.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>               <cpp:value>int(c.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>clr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>memset(x, y, sizeof(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>si</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>               <cpp:value>scanf("%d", &amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sii</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>scanf("%d %d", &amp;x, &amp;y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>siii</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>scanf("%d %d %d", &amp;x, &amp;y, &amp;z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sl</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>               <cpp:value>scanf("%lld", &amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sll</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>scanf("%lld %lld", &amp;x, &amp;y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>slll</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>scanf("%lld %lld %lld", &amp;x, &amp;y, &amp;z)</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VAMP</name></cpp:ifdef>
     <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__f(#__VA_ARGS__, __VA_ARGS__)</cpp:value></cpp:define>
    <function><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>Arg1</name></parameter> &gt;</parameter_list></template>
    <type><name>void</name></type> <name>__f</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Arg1</name><modifier>&amp;&amp;</modifier></type> <name>arg1</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>name</name> <operator>&lt;&lt;</operator> <literal type="string">" = "</literal> <operator>&lt;&lt;</operator> <name>arg1</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    }</block></function>
    <function><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>Arg1</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template>
    <type><name>void</name></type> <name>__f</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>names</name></decl></parameter>, <parameter><decl><type><name>Arg1</name><modifier>&amp;&amp;</modifier></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>Args</name><modifier>&amp;&amp;</modifier><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>comma</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>names</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><name>comma</name> <operator>-</operator> <name>names</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">" = "</literal> <operator>&lt;&lt;</operator> <name>arg1</name> <operator>&lt;&lt;</operator><literal type="string">" | "</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>__f</name><argument_list>(<argument><expr><name>comma</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="line" format="doxygen">///******************************************START******************************************</comment>

<comment type="line" format="doxygen">/// Constants</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name></cpp:macro>                 <cpp:value>200005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro>                 <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eps</name></cpp:macro>                 <cpp:value>1e-9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro>                 <cpp:value>0x3f3f3f3f3f3f3f3f</cpp:value></cpp:define> <comment type="line">// 4,557,430,888,798,830,399</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro>                 <cpp:value>0x3f3f3f3f</cpp:value></cpp:define> <comment type="line">// 1,061,109,567</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro>                  <cpp:value>acos(-1.0)</cpp:value></cpp:define>  <comment type="line">// 3.1415926535897932</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT</name></cpp:macro>                  <cpp:value>int</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VAMP</name></cpp:ifdef>
        <decl_stmt><decl><type><name>clock_t</name></type> <name>tStart</name> <init>= <expr><call><name>clock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>tc</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name>si</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>siii</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>a + <literal type="number">1</literal></argument>)</argument_list></macro><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>tmpb</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>&lt;=</operator><name>b</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmpb</name><operator>-=</operator><literal type="number">2</literal><operator>*</operator><name>i</name></expr>;</expr_stmt>
            }</block></then>
            <else>else <block type="pseudo"><break>break;</break></block></else></if>
            <while>while<condition>(<expr><name>tmpb</name><operator>*</operator><literal type="number">2</literal><operator>&gt;</operator><name>c</name></expr>)</condition><block>{
                <expr_stmt><expr><name>tmpb</name><operator>--</operator></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>tmpb</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>tmpb</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>mx</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <expr_stmt><expr><call><name>pf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>mx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VAMP</name></cpp:ifdef>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n&gt;&gt; Runtime: %.10fs\n"</literal></expr></argument>, <argument><expr><call>(<name>double</name>) <argument_list>(<argument><expr><call><name>clock</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tStart</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>CLOCKS_PER_SEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
