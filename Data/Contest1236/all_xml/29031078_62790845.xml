<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29031078_62790845.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair &lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair &lt;ll, ll&gt;</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>mod</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name>mod</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>y</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>&gt;</operator> <name>mod</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name> <operator>+</operator> <name>y</name> <operator>-</operator> <name>mod</name></expr>;</return></block></then></if>
    <return>return <expr><name>x</name> <operator>+</operator> <name>y</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>mod</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name>mod</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>y</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><name>x</name> <operator>*</operator> <name>y</name> <operator>&gt;</operator> <name>mod</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>(</operator><name>x</name> <operator>*</operator> <name>y</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</return></block></then></if>
    <return>return <expr><name>x</name> <operator>*</operator> <name>y</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>pot</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>y</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if>

    <if>if <condition>(<expr><name>y</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>z</name> <init>= <expr><call><name>pot</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>mul</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then>
    <else>else
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>z</name> <init>= <expr><call><name>pot</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>mul</name><argument_list>(<argument><expr><call><name>mul</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
}</block></function>

<decl_stmt><decl><type><name>ll</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name>M</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>sol</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name> <operator>&gt;&gt;</operator> <name>M</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>sol</name> <operator>=</operator> <call><name>pot</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>rj</name> <init>= <expr><call><name>pot</name><argument_list>(<argument><expr><name>sol</name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>rj</name></expr>;</expr_stmt>
}</block></function>
</unit>
