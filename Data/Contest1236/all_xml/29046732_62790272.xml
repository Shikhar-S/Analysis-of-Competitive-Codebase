<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29046732_62790272.cpp"><comment type="line">//âââââââââââââââââââââââââââââââââââââââââââââ</comment>
<comment type="line">//  Date : Plz press Shift + Ctrl + . in proper Sublime</comment>
<comment type="line">//  Author : Sakii</comment>
<comment type="line">//  website : zcqiever.tk</comment>
<comment type="line">//  I'm so vegetable , QAQ..</comment>
<comment type="line">//âââââââââââââââââââââââââââââââââââââââââââââ</comment>

<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>re</name></cpp:macro> <cpp:value>register</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>il</name></cpp:macro> <cpp:value>inline</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lowbit</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x&amp;(-x)</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>

<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <decl_stmt><decl><type><name>re</name> <name>char</name></type> <name>ch</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>re</name> <name>int</name></type> <name>w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>w</name> <operator>|=</operator> <name>ch</name> <operator>==</operator> <literal type="char">'-'</literal></expr><operator>,</operator> <expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <while>while<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>s</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>s</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>ch</name> <operator>^</operator> <literal type="number">48</literal><operator>)</operator></expr><operator>,</operator> <expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <if>if<condition>(<expr><name>w</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>=</operator> <operator>-</operator><name>s</name></expr>;</expr_stmt></block></then></if>
}</block></function>

<namespace>namespace <name>Sakii</name> <block>{

    <function><type><name>il</name> <name>void</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block>{<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <continue>continue;</continue>}</block></then></if>
            <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name>b</name><operator>*</operator><literal type="number">3</literal></expr></argument>,<argument><expr><name>c</name><operator>/</operator><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>+</operator><name>c</name><operator>/</operator><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>b</name> <operator>-=</operator> <call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name><operator>/</operator><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//printf("%d\n", b);</comment>
            <if>if<condition>(<expr><name>b</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name>a</name><operator>*</operator><literal type="number">3</literal></expr></argument>,<argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>+</operator><name>b</name><operator>/</operator><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <return>return;</return>
    }</block></function>
}</block></namespace>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>Sakii</name><operator>::</operator><name>main</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
