<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29090793_62792526.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>mod</name><init>=<expr><literal type="number">1000000000</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<function><type><name>long</name> <name>long</name></type> <name>stepen</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>st</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>st</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>st</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>s</name><init>=<expr><call><name>stepen</name><argument_list>(<argument><expr><name>st</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><name>s</name><operator>*</operator><name>s</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><operator>(</operator><call><name>stepen</name><argument_list>(<argument><expr><name>st</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>num</name></expr></argument>)</argument_list></call><operator>*</operator><name>num</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>stepen</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><call><name>stepen</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
