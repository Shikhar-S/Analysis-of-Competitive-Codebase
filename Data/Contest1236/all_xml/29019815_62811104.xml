<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29019815_62811104.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0; i&lt;int(n); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RNG</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=int(f); i&lt;=int(t); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REV</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=int(f); i&gt;=int(t); --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v).begin(), (v).end()</cpp:value></cpp:define>
<decl_stmt><decl><type><name>bool</name></type> <name>RELAXED</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
<struct><template>template<parameter_list>&lt;<parameter><type><name>int</name></type></parameter>,<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> struct <name>MINMAX</name><block>{<public type="default"> <decl_stmt><decl><type><name>T</name></type> <name>val</name></decl>;</decl_stmt> <constructor><name>MINMAX</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>val</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>val</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor> </public>}</block>;</struct>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name><name>MINMAX</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>MAX</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>MINMAX</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function><empty_stmt>;</empty_stmt>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name><name>MINMAX</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>MIN</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>MINMAX</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function><empty_stmt>;</empty_stmt>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name><modifier>&amp;</modifier></type> <name>operator<name>|=</name></name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><name><name>MINMAX</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>lhs</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>rhs</name><operator>.</operator><name>val</name></name> <operator>&gt;</operator> <name>lhs</name></expr> ?</condition><then> <expr><operator>(</operator><name>RELAXED</name><operator>=</operator><literal type="boolean">true</literal><operator>,</operator><name><name>rhs</name><operator>.</operator><name>val</name></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>RELAXED</name><operator>=</operator><literal type="boolean">false</literal><operator>,</operator><name>lhs</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</return> }</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name><modifier>&amp;</modifier></type> <name>operator<name>|=</name></name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><name><name>MINMAX</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>lhs</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>rhs</name><operator>.</operator><name>val</name></name> <operator>&lt;</operator> <name>lhs</name></expr> ?</condition><then> <expr><operator>(</operator><name>RELAXED</name><operator>=</operator><literal type="boolean">true</literal><operator>,</operator><name><name>rhs</name><operator>.</operator><name>val</name></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>RELAXED</name><operator>=</operator><literal type="boolean">false</literal><operator>,</operator><name>lhs</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>readVector</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>vec</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt> <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> <return>return <expr><name>vec</name></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>EXIT</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>answer</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>answer</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>vpii</name>;</typedef>
<typedef>typedef <type><name>signed</name> <name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>row</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>col</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>steps</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>pr</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pc</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>d</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>minr</name><init>=<expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxr</name><init>=<expr><name>h</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>minc</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxc</name><init>=<expr><name>w</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>oldpr</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>oldpc</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{

<comment type="line">//        if(pc&gt;maxc) return;</comment>
<comment type="line">//        if(pc&lt;minc) return;</comment>
<comment type="line">//        if(pr&gt;maxr) return;</comment>
<comment type="line">//        if(pr&lt;minr) return;</comment>


        <if>if<condition>(<expr><name>d</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>pc</name> <operator>=</operator> <operator>*</operator><name><name>row</name><index>[<expr><name>pr</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>pc</name> <operator>|=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>maxc</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>maxc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name>d</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>pc</name> <operator>=</operator> <operator>*</operator><call><name>prev</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>pr</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>pc</name> <operator>|=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>minc</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>minc</name><operator>=</operator><name>pc</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name>d</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>pr</name> <operator>=</operator> <operator>*</operator><name><name>col</name><index>[<expr><name>pc</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>pr</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>pr</name> <operator>|=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>maxr</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>maxr</name><operator>=</operator><name>pr</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name>d</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>pr</name> <operator>=</operator> <operator>*</operator><call><name>prev</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>pc</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>pr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>pr</name> <operator>|=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>minr</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>minr</name><operator>=</operator><name>pr</name></expr>;</expr_stmt>
        }</block></then></if>

        <if>if<condition>(<expr><name>pr</name><operator>==</operator><name>oldpr</name> <operator>&amp;&amp;</operator> <name>pc</name><operator>==</operator><name>oldpc</name></expr>)</condition><then>
            <block type="pseudo"><return>return;</return></block></then></if>

        <expr_stmt><expr><name>d</name><operator>=</operator><operator>(</operator><name>d</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>steps</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>pc</name><operator>-</operator><name>oldpc</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name>pr</name><operator>-</operator><name>oldpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//        cerr&lt;&lt;"pos "&lt;&lt;pr&lt;&lt;","&lt;&lt;pc&lt;&lt;endl;</comment>
        <expr_stmt><expr><name>oldpr</name><operator>=</operator><name>pr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>oldpc</name><operator>=</operator><name>pc</name></expr>;</expr_stmt>
    }</block></while>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>h</name><operator>&gt;&gt;</operator><name>w</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
<comment type="line">//    if(k==0) EXIT("Yes");</comment>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument>k</argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>

    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument>h+<literal type="number">2</literal></argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>w</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument>w+<literal type="number">2</literal></argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>h</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>

    <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cerr</name><operator>&lt;&lt;</operator><name>steps</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><literal type="number">1LL</literal><operator>*</operator><name>w</name><operator>*</operator><name>h</name><operator>-</operator><name>k</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><ternary><condition><expr><name>steps</name><operator>&gt;=</operator><literal type="number">1LL</literal><operator>*</operator><name>w</name><operator>*</operator><name>h</name><operator>-</operator><name>k</name></expr> ?</condition><then> <expr><literal type="string">"Yes"</literal></expr> </then><else>: <expr><literal type="string">"No"</literal></expr></else></ternary><operator>)</operator><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
