<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29071734_62793275.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cctype&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;complex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;array&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;forward_list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>popcount</name></cpp:macro> <cpp:value>__builtin_popcountll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORS</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (s); i &lt; (n); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FORS(i, 0, n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FI</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FOR(i, n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(), (x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RALL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).rbegin(), (x).rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair((x),(y))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>push_back((x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int((c).size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_SETTED_BIT</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>, <parameter><type><name>mask</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int bit = 0; (mask) &gt;&gt; bit; ++bit) if (1&amp;(mask &gt;&gt; bit))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_NONZERO_SUBMASK</name><parameter_list>(<parameter><type><name>submask</name></type></parameter>, <parameter><type><name>mask</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int submask=(mask); submask; submask=(submask-1)&amp;(mask))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>(3.141592653589793L)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODULO</name></cpp:macro> <cpp:value>((ll)1e9+7LL)</cpp:value></cpp:define>


<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>pi</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument> &gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>ld</name></expr></argument>, <argument><expr><name>ld</name></expr></argument> &gt;</argument_list></name></type> <name>pld</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ld</name></expr></argument>&gt;</argument_list></name></type> <name>vld</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pi</name></expr></argument>&gt;</argument_list></name></type> <name>vpi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>vpll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pld</name></expr></argument>&gt;</argument_list></name></type> <name>vpld</name>;</typedef>
<typedef>typedef <type><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>li</name>;</typedef>
<typedef>typedef <type><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>lll</name>;</typedef>
<typedef>typedef <type><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>ld</name></expr></argument>&gt;</argument_list></name></type> <name>lld</name>;</typedef>
<typedef>typedef <type><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>pi</name></expr></argument>&gt;</argument_list></name></type> <name>lpi</name>;</typedef>
<typedef>typedef <type><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>lpll</name>;</typedef>
<typedef>typedef <type><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>pld</name></expr></argument>&gt;</argument_list></name></type> <name>lpld</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>vvi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vll</name></expr></argument>&gt;</argument_list></name></type> <name>vvll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vld</name></expr></argument>&gt;</argument_list></name></type> <name>vvld</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vpi</name></expr></argument>&gt;</argument_list></name></type> <name>vvpi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vpll</name></expr></argument>&gt;</argument_list></name></type> <name>vvpll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vpld</name></expr></argument>&gt;</argument_list></name></type> <name>vvpld</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>li</name></expr></argument>&gt;</argument_list></name></type> <name>vli</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lll</name></expr></argument>&gt;</argument_list></name></type> <name>vlll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lld</name></expr></argument>&gt;</argument_list></name></type> <name>vlld</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lpi</name></expr></argument>&gt;</argument_list></name></type> <name>vlpi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lpll</name></expr></argument>&gt;</argument_list></name></type> <name>vlpll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lpld</name></expr></argument>&gt;</argument_list></name></type> <name>vlpld</name>;</typedef>
<typedef>typedef <type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>si</name>;</typedef>
<typedef>typedef <type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>sll</name>;</typedef>
<typedef>typedef <type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>pi</name></expr></argument>&gt;</argument_list></name></type> <name>spi</name>;</typedef>
<typedef>typedef <type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>spll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>list</name> <argument_list type="generic">&lt; <argument><expr><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name>ll</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>AdjacencyLists</name>;</typedef>
<typedef>typedef <type><name>vvll</name></type> <name>AdjacencyMatrix</name>;</typedef>


<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>sqr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>x</name> <operator>*</operator> <name>x</name></expr>;</return> }</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>sqr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name><name>sqr</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>T</name></type> <name>binpow</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><call><name>sqr</name><argument_list>(<argument><expr><call><name>binpow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>n</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>*</operator> <operator>(</operator><ternary><condition><expr><name>n</name> <operator>%</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return> }</block></function>
<function><type><name>ll</name></type> <name>binpow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>modulo</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><call><name>sqr</name><argument_list>(<argument><expr><call><name>binpow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>n</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>modulo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>%</operator> <name>modulo</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>n</name> <operator>%</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator> <operator>%</operator> <name>modulo</name></expr></else></ternary></expr>;</return> }</block></function>

<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><name>b</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>x1</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>d</name> <init>= <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name><operator>%</operator><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <name>y1</name> <operator>-</operator> <operator>(</operator><name>b</name> <operator>/</operator> <name>a</name><operator>)</operator> <operator>*</operator> <name>x1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <name>x1</name></expr>;</expr_stmt>
    <return>return <expr><name>d</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>phi</name> <parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>result</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><if>if <condition>(<expr><name>n</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <while>while <condition>(<expr><name>n</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                <block type="pseudo"><expr_stmt><expr><name>n</name> <operator>/=</operator> <name>i</name></expr>;</expr_stmt></block></while>
            <expr_stmt><expr><name>result</name> <operator>-=</operator> <name>result</name> <operator>/</operator> <name>i</name></expr>;</expr_stmt>
        }</block></then></if></block></for>
    <if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>result</name> <operator>-=</operator> <name>result</name> <operator>/</operator> <name>n</name></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>vll</name></type> <name>inverseAll</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>vll</name></type> <name>r</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>m</name> <operator>-</operator> <operator>(</operator><name>m</name><operator>/</operator><name>i</name><operator>)</operator> <operator>*</operator> <name><name>r</name><index>[<expr><name>m</name><operator>%</operator><name>i</name></expr>]</index></name> <operator>%</operator> <name>m</name><operator>)</operator> <operator>%</operator> <name>m</name></expr>;</expr_stmt></block></for>
    <return>return <expr><name>r</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>a</name> <operator>/</operator> <call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>b</name></expr>;</return> }</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>llrand</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>lsbToFill</name> <init>= <expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ll</name></expr></argument>)</argument_list></sizeof> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>bitsFilledInIteration</name> <init>= <expr><call><name>popcount</name><argument_list>(<argument><expr><name>RAND_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>number</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>lsbFilled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>lsbFilled</name> <operator>&lt;=</operator> <name>lsbToFill</name></expr>;</condition> <incr><expr><name>lsbFilled</name> <operator>+=</operator> <name>bitsFilledInIteration</name></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>number</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ll</name><operator>)</operator><call><name>rand</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <name>lsbFilled</name><operator>)</operator></expr>;</expr_stmt>
    }</block></for>
    
    <return>return <expr><name>number</name> <operator>&amp;</operator> <call><name><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>llrand</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><name>begin</name> <operator>+</operator> <call><name>llrand</name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name><operator>)</operator></expr>;</return>
}</block></function>

<struct>struct <name>Dinic</name> <block>{<public type="default">
    <struct>struct <name>Edge</name> <block>{<public type="default">
        <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>cap</name></decl>, <decl><type ref="prev"/><name>flow</name></decl>;</decl_stmt>
        <constructor><name>Edge</name><parameter_list>()</parameter_list> <block>{}</block></constructor>
        <constructor><name>Edge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>cap</name></decl></parameter>)</parameter_list><member_init_list>: <call><name>u</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call>, <call><name>v</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call>, <call><name>cap</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call>, <call><name>flow</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
    </public>}</block>;</struct>
    
    <decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Edge</name></expr></argument>&gt;</argument_list></name></type> <name>E</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>g</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>pt</name></decl>;</decl_stmt>
    
    <constructor><name>Dinic</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>)</parameter_list><member_init_list>: <call><name>N</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call>, <call><name>E</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>, <call><name>g</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call>, <call><name>d</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call>, <call><name>pt</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
    
    <function><type><name>void</name></type> <name>AddEdge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>cap</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>u</name> <operator>!=</operator> <name>v</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>E</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name>Edge</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>g</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>emplace_back</name><argument_list>(<argument><expr><call><name><name>E</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>E</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name>Edge</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>emplace_back</name><argument_list>(<argument><expr><call><name><name>E</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    
    <function><type><name>bool</name></type> <name>BFS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>S</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>T</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>q</name><argument_list>(<argument><expr><block>{<expr><name>S</name></expr>}</block></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><call><name><name>d</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>d</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>d</name><index>[<expr><name>S</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <while>while<condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>u</name> <operator>==</operator> <name>T</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name><range>: <expr><name><name>g</name><index>[<expr><name>u</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
                <decl_stmt><decl><type><name>Edge</name> <modifier>&amp;</modifier></type><name>e</name> <init>= <expr><name><name>E</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>e</name><operator>.</operator><name><name>flow</name> <argument_list type="generic">&lt; <argument><expr><name><name>e</name><operator>.</operator><name>cap</name></name> <operator>&amp;&amp;</operator> <name><name>d</name><index>[<expr><name><name>e</name><operator>.</operator><name>v</name></name></expr>]</index></name></expr></argument> &gt;</argument_list></name></name> <name><name>d</name><index>[<expr><name><name>e</name><operator>.</operator><name>u</name></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>d</name><index>[<expr><name><name>e</name><operator>.</operator><name>v</name></name></expr>]</index></name> <operator>=</operator> <name><name>d</name><index>[<expr><name><name>e</name><operator>.</operator><name>u</name></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></while>
        <return>return <expr><name><name>d</name><index>[<expr><name>T</name></expr>]</index></name> <operator>!=</operator> <name>N</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
    }</block></function>
    
    <function><type><name>ll</name></type> <name>DFS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>T</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>flow</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>u</name> <operator>==</operator> <name>T</name> <operator>||</operator> <name>flow</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>flow</name></expr>;</return></block></then></if>
        <for>for <control>(<init><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>i</name> <init>= <expr><name><name>pt</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>Edge</name> <modifier>&amp;</modifier></type><name>e</name> <init>= <expr><name><name>E</name><index>[<expr><name><name>g</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Edge</name> <modifier>&amp;</modifier></type><name>oe</name> <init>= <expr><name><name>E</name><index>[<expr><name><name>g</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>^</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>d</name><index>[<expr><name><name>e</name><operator>.</operator><name>v</name></name></expr>]</index></name> <operator>==</operator> <name><name>d</name><index>[<expr><name><name>e</name><operator>.</operator><name>u</name></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>ll</name></type> <name>amt</name> <init>= <expr><name><name>e</name><operator>.</operator><name>cap</name></name> <operator>-</operator> <name><name>e</name><operator>.</operator><name>flow</name></name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>flow</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>amt</name> <operator>&gt;</operator> <name>flow</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>amt</name> <operator>=</operator> <name>flow</name></expr>;</expr_stmt></block></then></if>
                <if>if <condition>(<decl><type><name>ll</name></type> <name>pushed</name> <init>= <expr><call><name>DFS</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><name>amt</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>e</name><operator>.</operator><name>flow</name></name> <operator>+=</operator> <name>pushed</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>oe</name><operator>.</operator><name>flow</name></name> <operator>-=</operator> <name>pushed</name></expr>;</expr_stmt>
                    <return>return <expr><name>pushed</name></expr>;</return>
                }</block></then></if>
            }</block></then></if>
        }</block></for>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>
    
    <function><type><name>ll</name></type> <name>MaxFlow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>S</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>T</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name>BFS</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><call><name><name>pt</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pt</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<decl><type><name>ll</name></type> <name>flow</name> <init>= <expr><call><name>DFS</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition>
                <block type="pseudo"><expr_stmt><expr><name>total</name> <operator>+=</operator> <name>flow</name></expr>;</expr_stmt></block></while>
        }</block></while>
        <return>return <expr><name>total</name></expr>;</return>
    }</block></function>
</public>}</block>;</struct>

<function><type><name>vll</name></type> <name>Dijkstra</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AdjacencyLists</name> <modifier>&amp;</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>vll</name></type> <name>d</name><argument_list>(<argument><expr><call><name>SZ</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2LL</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>priority_queue</name> <argument_list type="generic">&lt; <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>d</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <while>while <condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{
        <while>while <condition>(<expr><call><name><name>q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name> <operator>&gt;</operator> <name><name>d</name><index>[<expr><call><name><name>q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr>]</index></name></expr>)</condition> <block>{ <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></while>
        <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
        
        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>cw</name> <range>: <expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control>
        <block>{
            <if>if <condition>(<expr><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name> <operator>+</operator> <name><name>cw</name><operator>.</operator><name>second</name></name> <operator>&lt;</operator> <name><name>d</name><index>[<expr><name><name>cw</name><operator>.</operator><name>first</name></name></expr>]</index></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>d</name><index>[<expr><name><name>cw</name><operator>.</operator><name>first</name></name></expr>]</index></name> <operator>=</operator> <name><name>d</name><index>[<expr><name>v</name></expr>]</index></name> <operator>+</operator> <name><name>cw</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><operator>-</operator><name><name>d</name><index>[<expr><name><name>cw</name><operator>.</operator><name>first</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cw</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></while>
    
    <return>return <expr><name>d</name></expr>;</return>
}</block></function>

<struct>struct <name>BinarySearchIterator</name> <super>: <specifier>public</specifier> <name><name>std</name><operator>::</operator><name><name>iterator</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>forward_iterator_tag</name></name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></name></super>
<block>{<public type="default">
    <decl_stmt><decl><type><name>ll</name></type> <name>value</name></decl>;</decl_stmt>
    
    <function type="operator"><type><name><typename>typename</typename> <name><name>iterator_traits</name><argument_list type="generic">&lt;<argument><expr><name>BinarySearchIterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>difference_type</name></name></type> <name>operator <name>-</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BinarySearchIterator</name> <modifier>&amp;</modifier></type><name>it</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>value</name> <operator>-</operator> <name><name>it</name><operator>.</operator><name>value</name></name></expr>;</return> }</block></function>
    
    <function type="operator"><type><name>BinarySearchIterator</name><modifier>&amp;</modifier></type> <name>operator <name>++</name></name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><operator>++</operator><name>value</name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
    
    <function type="operator"><type><name>bool</name></type> <name>operator <name>!=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BinarySearchIterator</name> <modifier>&amp;</modifier></type><name>it</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>value</name> <operator>!=</operator> <name><name>it</name><operator>.</operator><name>value</name></name></expr>;</return> }</block></function>
    
    <function type="operator"><type><name>bool</name></type> <name>operator<name>*</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{ <comment type="block">/*insert code here*/</comment> <return>return <expr><literal type="boolean">true</literal></expr>;</return> }</block></function>
</public>}</block>;</struct>

<class><template>template <parameter_list>&lt; <parameter><type><name>int</name></type> <name>ALPHA</name></parameter> &gt;</parameter_list></template>
class <name>AhoCorasick</name>
<block>{<private type="default">
</private><public>public:
    <decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>int</name></type> <name>ILLEGAL_INDEX</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>int</name></type> <name>ROOT</name></decl>;</decl_stmt>
    
    <struct>struct <name>Node</name>
    <block>{<public type="default">
        <decl_stmt><decl><type><name>bool</name></type> <name>leaf</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>parent</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>parentCharacter</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>link</name></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>int</name></type> <name><name>next</name><index>[<expr><name>ALPHA</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name><name>go</name><index>[<expr><name>ALPHA</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>outputFunction</name></decl>;</decl_stmt>
        
        <constructor><name>Node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>parent</name> <init>= <expr><name>ILLEGAL_INDEX</name></expr></init></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parentCharacter</name> <init>= <expr><name>ALPHA</name></expr></init></decl></parameter>)</parameter_list> <member_init_list>:
            <call><name>leaf</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>,
            <call><name>parent</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>,
            <call><name>parentCharacter</name><argument_list>(<argument><expr><name>parentCharacter</name></expr></argument>)</argument_list></call>,
            <call><name>link</name><argument_list>(<argument><expr><name>ILLEGAL_INDEX</name></expr></argument>)</argument_list></call>,
            <call><name>outputFunction</name><argument_list>(<argument><expr><name>ILLEGAL_INDEX</name></expr></argument>)</argument_list></call>
        </member_init_list><block>{
            <expr_stmt><expr><call><name>fill_n</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>ALPHA</name></expr></argument>, <argument><expr><name>ILLEGAL_INDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fill_n</name><argument_list>(<argument><expr><name>go</name></expr></argument>, <argument><expr><name>ALPHA</name></expr></argument>, <argument><expr><name>ILLEGAL_INDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
    </public>}</block>;</struct>
    
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Node</name></expr></argument>&gt;</argument_list></name></type> <name>tree</name> <init>= <expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Node</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <constructor><name>AhoCorasick</name><parameter_list>()</parameter_list><block>{}</block></constructor>
    <constructor><name>AhoCorasick</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxStatesNumber</name></decl></parameter>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>tree</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>maxStatesNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <function><template>template <parameter_list>&lt; <parameter><type><name>class</name></type> <name>Iterator</name></parameter> &gt;</parameter_list></template>
    <type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Iterator</name></type> <name>begin</name></decl></parameter>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>vertex</name> <init>= <expr><name>ROOT</name></expr></init></decl>;</decl_stmt>
        
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{
            <if>if <condition>(<expr><name>ILLEGAL_INDEX</name> <operator>==</operator> <name><name>tree</name><index>[<expr><name>vertex</name></expr>]</index></name><operator>.</operator><name><name>next</name><index>[<expr><name><name>begin</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>tree</name><index>[<expr><name>vertex</name></expr>]</index></name><operator>.</operator><name><name>next</name><index>[<expr><name><name>begin</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <call><name>SZ</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tree</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>Node</name><argument_list>(<argument><expr><name>vertex</name></expr></argument>, <argument><expr><name><name>begin</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            
            <expr_stmt><expr><name>vertex</name> <operator>=</operator> <name><name>tree</name><index>[<expr><name>vertex</name></expr>]</index></name><operator>.</operator><name><name>next</name><index>[<expr><name><name>begin</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        
        <expr_stmt><expr><name><name>tree</name><index>[<expr><name>vertex</name></expr>]</index></name><operator>.</operator><name>leaf</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><name>int</name></type> <name>getLink</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vertex</name></decl></parameter>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>vertex</name> <operator>&amp;&amp;</operator> <name>vertex</name> <operator>&lt;</operator> <call><name><name>tree</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <if>if <condition>(<expr><name>ILLEGAL_INDEX</name> <operator>==</operator> <name><name>tree</name><index>[<expr><name>vertex</name></expr>]</index></name><operator>.</operator><name>link</name></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name>ROOT</name> <operator>==</operator> <name>vertex</name> <operator>||</operator> <name>ROOT</name> <operator>==</operator> <name><name>tree</name><index>[<expr><name>vertex</name></expr>]</index></name><operator>.</operator><name>parent</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>tree</name><index>[<expr><name>vertex</name></expr>]</index></name><operator>.</operator><name>link</name> <operator>=</operator> <name>ROOT</name></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name><name>tree</name><index>[<expr><name>vertex</name></expr>]</index></name><operator>.</operator><name>link</name> <operator>=</operator> <call><name>go</name><argument_list>(<argument><expr><call><name>getLink</name><argument_list>(<argument><expr><name><name>tree</name><index>[<expr><name>vertex</name></expr>]</index></name><operator>.</operator><name>parent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tree</name><index>[<expr><name>vertex</name></expr>]</index></name><operator>.</operator><name>parentCharacter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
        
        <return>return <expr><name><name>tree</name><index>[<expr><name>vertex</name></expr>]</index></name><operator>.</operator><name>link</name></expr>;</return>
    }</block></function>
    
    <function><type><name>int</name></type> <name>go</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vertex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>character</name></decl></parameter>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>character</name> <operator>&amp;&amp;</operator> <name>character</name> <operator>&lt;</operator> <name>ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>vertex</name> <operator>&amp;&amp;</operator> <name>vertex</name> <operator>&lt;</operator> <call><name><name>tree</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <if>if <condition>(<expr><name>ILLEGAL_INDEX</name> <operator>==</operator> <name><name>tree</name><index>[<expr><name>vertex</name></expr>]</index></name><operator>.</operator><name><name>go</name><index>[<expr><name>character</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name>ILLEGAL_INDEX</name> <operator>==</operator> <name><name>tree</name><index>[<expr><name>vertex</name></expr>]</index></name><operator>.</operator><name><name>next</name><index>[<expr><name>character</name></expr>]</index></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>tree</name><index>[<expr><name>vertex</name></expr>]</index></name><operator>.</operator><name><name>go</name><index>[<expr><name>character</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>ROOT</name> <operator>==</operator> <name>vertex</name></expr> ?</condition><then> <expr><name>ROOT</name></expr> </then><else>: <expr><call><name>go</name><argument_list>(<argument><expr><call><name>getLink</name><argument_list>(<argument><expr><name>vertex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>character</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name><name>tree</name><index>[<expr><name>vertex</name></expr>]</index></name><operator>.</operator><name><name>go</name><index>[<expr><name>character</name></expr>]</index></name> <operator>=</operator> <name><name>tree</name><index>[<expr><name>vertex</name></expr>]</index></name><operator>.</operator><name><name>next</name><index>[<expr><name>character</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
        
        <return>return <expr><name><name>tree</name><index>[<expr><name>vertex</name></expr>]</index></name><operator>.</operator><name><name>go</name><index>[<expr><name>character</name></expr>]</index></name></expr>;</return>
    }</block></function>
    
    <function><type><name>int</name></type> <name>getOutputFunction</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vertex</name></decl></parameter>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>vertex</name> <operator>&amp;&amp;</operator> <name>vertex</name> <operator>&lt;</operator> <call><name><name>tree</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <if>if <condition>(<expr><name>ILLEGAL_INDEX</name> <operator>==</operator> <name><name>tree</name><index>[<expr><name>vertex</name></expr>]</index></name><operator>.</operator><name>outputFunction</name></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name><name>tree</name><index>[<expr><name>vertex</name></expr>]</index></name><operator>.</operator><name>leaf</name> <operator>||</operator> <name>ROOT</name> <operator>==</operator> <name>vertex</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>tree</name><index>[<expr><name>vertex</name></expr>]</index></name><operator>.</operator><name>outputFunction</name> <operator>=</operator> <name>vertex</name></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name><name>tree</name><index>[<expr><name>vertex</name></expr>]</index></name><operator>.</operator><name>outputFunction</name> <operator>=</operator> <call><name>getOutputFunction</name><argument_list>(<argument><expr><call><name>getLink</name><argument_list>(<argument><expr><name>vertex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
        
        <return>return <expr><name><name>tree</name><index>[<expr><name>vertex</name></expr>]</index></name><operator>.</operator><name>outputFunction</name></expr>;</return>
    }</block></function>
</public>}</block>;</class>

<decl_stmt><decl><template>template <parameter_list>&lt; <parameter><type><name>int</name></type> <name>ALPHA</name></parameter> &gt;</parameter_list></template> <type><specifier>const</specifier> <name>int</name></type> <name><name><name>AhoCorasick</name><argument_list type="generic">&lt;<argument><expr><name>ALPHA</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ILLEGAL_INDEX</name></name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><template>template <parameter_list>&lt; <parameter><type><name>int</name></type> <name>ALPHA</name></parameter> &gt;</parameter_list></template> <type><specifier>const</specifier> <name>int</name></type> <name><name><name>AhoCorasick</name><argument_list type="generic">&lt;<argument><expr><name>ALPHA</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ROOT</name></name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>UnionFind</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>vi</name></type> <name>parent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>vi</name></type> <name>rank</name></decl>;</decl_stmt>
    <constructor><name>UnionFind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>parent</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call>, <call><name>rank</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> </member_init_list><block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>rank</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        }</block></for>
    }</block></constructor>
    <function><type><name>int</name></type> <name>find_set</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>v</name> <operator>==</operator> <name><name>parent</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name>v</name></expr>;</return></block></then></if>
        <return>return <expr><name><name>parent</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <call><name>find_set</name> <argument_list>(<argument><expr><name><name>parent</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><type><name>void</name></type> <name>union_sets</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>find_set</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>find_set</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>a</name> <operator>!=</operator> <name>b</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>rank</name><index>[<expr><name>a</name></expr>]</index></name> <operator>&lt;</operator> <name><name>rank</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>swap</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name><name>parent</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>rank</name><index>[<expr><name>a</name></expr>]</index></name> <operator>==</operator> <name><name>rank</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><operator>++</operator><name><name>rank</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
        }</block></then></if>
    }</block></function>
</public>}</block>;</struct>


<function><type><name>vvi</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>vvi</name></type> <name>answer</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>vi</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    
    <macro><name>FOR</name><argument_list>(<argument>j</argument>, <argument>n</argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>ibegin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>iend</name> <init>= <expr><name>n</name></expr></init></decl>, <decl><type ref="prev"/><name>di</name> <init>= <expr><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        
        <if>if <condition>(<expr><name>j</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ibegin</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>iend</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>di</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
        
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>ibegin</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>iend</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>di</name></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>answer</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>index</name><operator>++</operator></expr>;</expr_stmt>
        }</block></for>
    }</block>

    <return>return <expr><name>answer</name></expr>;</return>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    
    <while>while<condition>(<expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>auto</name></type> <name>answer</name> <init>= <expr><call><name>solve</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>group</name> <range>: <expr><name>answer</name></expr></range></decl></init>)</control> <block>{
            <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>lab</name> <range>: <expr><name>group</name></expr></range></decl></init>)</control> <block>{
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>+</operator> <name>lab</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></for>
    }</block></while>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
