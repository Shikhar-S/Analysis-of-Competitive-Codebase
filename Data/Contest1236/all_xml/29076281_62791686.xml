<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29076281_62791686.cpp"><comment type="block">/*
    TOP GUN: MAVERICK!!
                                */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include> 
<comment type="line">//#include &lt;boost/functional/hash.hpp&gt;</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>lli</name>;</typedef>
<decl_stmt><decl><type><name>lli</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7ll</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lli</name></type> <name>INF</name><init>=<expr><literal type="number">1e17</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x) * (x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bip</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_popcountll(n)</cpp:value></cpp:define><comment type="line">//no of ones bit in binary!!</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bictz</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_ctzll(n)</cpp:value></cpp:define><comment type="line">//no of trailing zeroes in binary!!</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>biclz</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_clzll(n)</cpp:value></cpp:define><comment type="line">//no of leading zeroes in binary!!</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bffs</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_ffsll(n)</cpp:value></cpp:define><comment type="line">//index of first one bit!!</comment>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>,<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></type> <name>ll</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem1</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fill(&amp;a[0], &amp;a[0] + sizeof(a) / sizeof(a[0]), x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fill(&amp;a[0][0], &amp;a[0][0] +sizeof(a)/sizeof(a[0][0]),x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fill(&amp;a[0][0][0], &amp;a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi1</name></cpp:macro> <cpp:value>ifstream fin("input.txt")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>of1</name></cpp:macro> <cpp:value>ofstream fout("output.txt")</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>fmx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>y</name><operator>-</operator><name>x</name><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><literal type="number">31</literal><operator>)</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name>x</name><operator>^</operator><name>y</name><operator>)</operator><operator>)</operator><operator>^</operator><name>y</name></expr>;</return> }</block></function>
<function><type><name>int</name></type> <name>fmi</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>y</name><operator>-</operator><name>x</name><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><literal type="number">31</literal><operator>)</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name>x</name><operator>^</operator><name>y</name><operator>)</operator><operator>)</operator><operator>^</operator><name>x</name></expr>;</return> }</block></function>
<typedef>typedef <type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>,<argument><expr><name>null_type</name></expr></argument>,<argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name>rb_tree_tag</name></expr></argument>,<argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type> <name>ost</name>;</typedef>
<decl_stmt><decl><type><name>lli</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>q</name></decl>,<decl><type ref="prev"/><name>z</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pi1</name><init>=<expr><literal type="number">3.14159265358979323846</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//unordered_map&lt;pair&lt;ll,lli&gt;,lli&gt; mp;</comment>
<function><type><name>lli</name></type> <name>me</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>lli</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>lli</name></type> <name>M</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
    <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then>
    <elseif>else <if>if<condition>(<expr><name>b</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
    <block type="pseudo"><return>return <expr><call><name>me</name><argument_list>(<argument><expr><operator>(</operator><name>a</name><operator>*</operator><name>a</name><operator>)</operator><operator>%</operator><name>M</name></expr></argument>,<argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if></elseif>
    <else>else
    <block type="pseudo"><return>return <expr><operator>(</operator><name>a</name><operator>%</operator><name>M</name><operator>*</operator><call><name>me</name><argument_list>(<argument><expr><operator>(</operator><name>a</name><operator>*</operator><name>a</name><operator>)</operator><operator>%</operator><name>M</name></expr></argument>,<argument><expr><operator>(</operator><name>b</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>M</name></expr></argument>)</argument_list></call><operator>%</operator><name>M</name><operator>)</operator><operator>%</operator><name>M</name></expr>;</return></block></else></if>
}</block></function>
<function><type><name>lli</name></type> <name>mI</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>lli</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><call><name>me</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>m</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>lli</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>lli</name></type> <name>mm</name><init>=<expr><operator>(</operator><call><name>me</name><argument_list>(<argument><expr><literal type="number">2ll</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>%</operator><name>mod</name><operator>+</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>mm</name><operator>=</operator><operator>(</operator><call><name>me</name><argument_list>(<argument><expr><name>mm</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call><operator>%</operator><name>mod</name><operator>+</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>mm</name></expr>;</expr_stmt>
}</block></function></unit>
