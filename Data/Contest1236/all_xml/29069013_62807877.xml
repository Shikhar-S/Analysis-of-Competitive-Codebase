<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29069013_62807877.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pi</name>;</typedef>
 
<decl_stmt><decl><type><name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>comp</name><parameter_list>(<parameter><decl><type><name>pi</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>pi</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><name><name>a</name><operator>.</operator><name>F</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>F</name></name> <operator>||</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>F</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>F</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>S</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>S</name></name><operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>func</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
    <if>if <condition>(<expr><name>y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>temp</name> <init>= <expr><call><name>func</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><name>temp</name><operator>*</operator><name>temp</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>y</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then><block>{
        <return>return <expr><operator>(</operator><name>temp</name><operator>*</operator><name>x</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
    }</block></then>
    <else>else
        <block type="pseudo"><return>return <expr><name>temp</name><operator>%</operator><name>mod</name></expr>;</return></block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name> <operator>::</operator> <name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt; <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>s</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name>a</name></expr>,<expr><name>b</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>r</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>u</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>d</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>r</name> <operator>&amp;&amp;</operator> <name>d</name> <operator>&gt;=</operator> <name>u</name></expr>)</condition><block>{
        <comment type="line">// cout &lt;&lt; "1 " &lt;&lt; u &lt;&lt; " " &lt;&lt; d &lt;&lt; " " &lt;&lt; l &lt;&lt; " " &lt;&lt; r &lt;&lt; endl; </comment>
        <while>while <condition>(<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><block>{<expr><name>u</name></expr>, <expr><name>r</name></expr>}</block></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>u</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>d</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <decl_stmt><decl><type><name>auto</name></type> <name>itr</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>, <expr><name>r</name></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>itr</name> <operator>==</operator> <call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                }</block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            }</block></for>
            <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>u</name><operator>++</operator></expr>;</expr_stmt>
        <comment type="line">// cout &lt;&lt; "2 " &lt;&lt; u &lt;&lt; " " &lt;&lt; d &lt;&lt; " " &lt;&lt; l &lt;&lt; " " &lt;&lt; r &lt;&lt; endl; </comment>

        <while>while <condition>(<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><block>{<expr><name>d</name></expr>, <expr><name>r</name></expr>}</block></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>l</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>r</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <decl_stmt><decl><type><name>auto</name></type> <name>itr</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><block>{<expr><name>d</name></expr>, <expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>itr</name> <operator>==</operator> <call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                }</block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            }</block></for>
            <expr_stmt><expr><name>d</name><operator>--</operator></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
        <comment type="line">// cout &lt;&lt; "3 " &lt;&lt; u &lt;&lt; " " &lt;&lt; d &lt;&lt; " " &lt;&lt; l &lt;&lt; " " &lt;&lt; r &lt;&lt; endl; </comment>

        <while>while <condition>(<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><block>{<expr><name>d</name></expr>, <expr><name>l</name></expr>}</block></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>u</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>d</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <decl_stmt><decl><type><name>auto</name></type> <name>itr</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>, <expr><name>l</name></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>itr</name> <operator>==</operator> <call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                }</block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            }</block></for>
            <expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>d</name><operator>--</operator></expr>;</expr_stmt>
        <comment type="line">// cout &lt;&lt; "4 " &lt;&lt; u &lt;&lt; " " &lt;&lt; d &lt;&lt; " " &lt;&lt; l &lt;&lt; " " &lt;&lt; r &lt;&lt; endl; </comment>

        <while>while <condition>(<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><block>{<expr><name>u</name></expr>, <expr><name>l</name></expr>}</block></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>l</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>r</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <decl_stmt><decl><type><name>auto</name></type> <name>itr</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><block>{<expr><name>u</name></expr>, <expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>itr</name> <operator>==</operator> <call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                }</block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            }</block></for>
            <expr_stmt><expr><name>u</name><operator>++</operator></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
    }</block></while>
    <comment type="line">// cout &lt;&lt; "jivsj";</comment>
    <if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr>;</expr_stmt></block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal></expr>;</expr_stmt></block></else></if>

}</block></function></unit>
