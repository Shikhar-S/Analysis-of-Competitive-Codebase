<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29075470_62796037.cpp"><comment type="line">// Isaunoya</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name> ;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>f</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
  <decl_stmt><decl><type><specifier>register</specifier> <name>char</name></type> <name>c</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl> ;</decl_stmt>
  <for>for<control>( <init>;</init> <condition><expr><operator>!</operator> <call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt></block></then></if></block></for>
  <for>for<control>( <init>;</init> <condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr> ;</expr_stmt></block></for>
  <return>return <expr><name>x</name> <operator>*</operator> <name>f</name></expr> ;</return>
}</block></function>
<function><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>T</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>cmax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type> <name>x</name></decl></parameter> , <parameter><decl><type><name>T</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <name>y</name></expr> ?</condition><then> <expr><operator>(</operator><name>x</name> <operator>=</operator> <name>y</name><operator>)</operator></expr></then></ternary></expr> <operator>,</operator> <expr><literal type="number">1</literal> <operator>:</operator> <literal type="number">0</literal></expr> ;</return>
}</block></function>
<function><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>T</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>cmin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type> <name>x</name></decl></parameter> , <parameter><decl><type><name>T</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><ternary><condition><expr><name>x</name> <operator>&gt;</operator> <name>y</name></expr> ?</condition><then> <expr><operator>(</operator><name>x</name> <operator>=</operator> <name>y</name><operator>)</operator></expr></then></ternary></expr> <operator>,</operator> <expr><literal type="number">1</literal> <operator>:</operator> <literal type="number">0</literal></expr> ;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>QP</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>Mod</name></decl></parameter>)</parameter_list><block>{ <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
  <for>for<control>( <init>;</init> <condition><expr><name>y</name></expr> ;</condition> <incr><expr><name>y</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr> <operator>,</operator> <expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>*</operator> <name>x</name><operator>)</operator> <operator>%</operator> <name>Mod</name></expr></incr>)</control>
    <block type="pseudo"><if>if<condition>(<expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>*</operator> <name>x</name><operator>)</operator> <operator>%</operator> <name>Mod</name></expr> ;</expr_stmt></block></then></if></block></for>
  <return>return <expr><name>ans</name></expr> ;</return>
}</block></function>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl> ;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name><name>v</name> <index>[<expr><literal type="number">400</literal></expr>]</index></name></decl> ;</decl_stmt>
  <while>while<condition>(<expr><name>ans</name> <operator>&lt;=</operator> <name>n</name> <operator>*</operator> <name>n</name></expr>)</condition> <block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{ <expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>ans</name> <operator>++</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt> }</block></for>
    <if>if<condition>(<expr><name>ans</name> <operator>&gt;</operator> <name>n</name> <operator>*</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><break>break ;</break></block></then></if>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr> ;</condition> <incr><expr><name>i</name> <operator>--</operator></expr></incr>)</control> <block>{ <expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>ans</name> <operator>++</operator></expr></argument> )</argument_list></call></expr> ;</expr_stmt> }</block></for>
  }</block></while>
  <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr> <operator>,</operator> <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></incr>)</control>
    <block type="pseudo"><for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld "</literal></expr></argument> , <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></for></block></for>
	<return>return <expr><literal type="number">0</literal></expr> ;</return>
}</block></function>
</unit>
