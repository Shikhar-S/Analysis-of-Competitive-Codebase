<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29065478_62813075.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">1e5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name>M</name></decl>, <decl><type ref="prev"/><name><name>A</name><index>[<expr><name>MAXN</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ans1</name><index>[<expr><name>MAXN</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ans2</name><index>[<expr><name>MAXN</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>N</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>M</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

    <if>if<condition>(<expr><name>N</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>!</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>

    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>M1</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>M1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>M</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><call><name><name>M1</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>!=</operator><call><name><name>M1</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>M1</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>M1</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator> <expr><call><name><name>M1</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><call><name><name>M1</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call><operator>!=</operator><call><name><name>M1</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>M1</name><index>[<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>M1</name><index>[<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>i</name></expr>]</index></name></expr><operator>,</operator> <expr><call><name><name>M1</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <if>if<condition>(<expr><call><name><name>M1</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>M</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>!=</operator><call><name><name>M1</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>M1</name><index>[<expr><name>M</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>M1</name><index>[<expr><name>M</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator> <expr><call><name><name>M1</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>M</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>M2</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>M2</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>M</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><call><name><name>M2</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>N</name><operator>-</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>!=</operator><call><name><name>M2</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>M2</name><index>[<expr><name>N</name><operator>-</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>M2</name><index>[<expr><name>N</name><operator>-</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator> <expr><call><name><name>M2</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>N</name><operator>-</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><call><name><name>M2</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call><operator>!=</operator><call><name><name>M2</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>M2</name><index>[<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>M2</name><index>[<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name>i</name></expr>]</index></name></expr><operator>,</operator> <expr><call><name><name>M2</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <if>if<condition>(<expr><call><name><name>M2</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>N</name><operator>-</operator><operator>(</operator><name>M</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>!=</operator><call><name><name>M2</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>M2</name><index>[<expr><name>N</name><operator>-</operator><operator>(</operator><name>M</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>M2</name><index>[<expr><name>N</name><operator>-</operator><operator>(</operator><name>M</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator> <expr><call><name><name>M2</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>N</name><operator>-</operator><operator>(</operator><name>M</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <expr_stmt><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name> <range>: <expr><name>M1</name></expr></range></decl></init>)</control> <block type="pseudo"><for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name><name>it</name><operator>.</operator><name>second</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ans1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>it</name><operator>.</operator><name>first</name></name><operator>-</operator><name>M</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for></block></for>

    <expr_stmt><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name> <range>: <expr><name>M2</name></expr></range></decl></init>)</control> <block type="pseudo"><for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name><name>it</name><operator>.</operator><name>second</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ans2</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>it</name><operator>.</operator><name>first</name></name><operator>+</operator><name>M</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for></block></for>


    <comment type="line">//for(i=1; i&lt;=N; i++) printf("%d ", ans1[i]); printf("\n");</comment>
    <comment type="line">//for(i=1; i&lt;=N; i++) printf("%d ", ans2[i]);</comment>

    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>ans2</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>ans1</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
