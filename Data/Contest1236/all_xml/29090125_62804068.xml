<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29090125_62804068.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rowMin</name></decl>, <decl><type ref="prev"/><name>rowMax</name></decl>, <decl><type ref="prev"/><name>colMin</name></decl>, <decl><type ref="prev"/><name>colMax</name></decl>, <decl><type ref="prev"/><name>curX</name></decl>, <decl><type ref="prev"/><name>curY</name></decl>, <decl><type ref="prev"/><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>obsRow</name><index>[<expr><literal type="number">110000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>obsCol</name><index>[<expr><literal type="number">110000</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>in</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>obsRow</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>obsCol</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>rowMin</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>rowMax</name> <operator>=</operator> <name>n</name></expr><operator>,</operator> <expr><name>colMin</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>colMax</name> <operator>=</operator> <name>m</name></expr><operator>,</operator> <expr><name>curX</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>curY</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>dir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>in</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>rowMin</name> <operator>&lt;=</operator> <name>rowMax</name> <operator>&amp;&amp;</operator> <name>colMin</name> <operator>&lt;=</operator> <name>colMax</name></expr>)</condition> <block>{
        <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>obsRow</name><index>[<expr><name>curX</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name><name>obsRow</name><index>[<expr><name>curX</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>obsRow</name><index>[<expr><name>curX</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>colMin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>obsRow</name><index>[<expr><name>curX</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name><name>obsRow</name><index>[<expr><name>curX</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>colMax</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>obsRow</name><index>[<expr><name>curX</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>obsRow</name><index>[<expr><name>curX</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>curY</name> <operator>=</operator> <name>colMax</name></expr>;</expr_stmt></block></then>
            <else>else <block>{
                <expr_stmt><expr><name>curY</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>obsRow</name><index>[<expr><name>curX</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>curY</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>colMax</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cnt</name> <operator>+=</operator> <operator>(</operator><name>rowMax</name> <operator>-</operator> <name>rowMin</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block></for>
                <expr_stmt><expr><name>colMax</name> <operator>=</operator> <name>curY</name></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>rowMin</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        }</block></then>
        <elseif>else <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>obsCol</name><index>[<expr><name>curY</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name><name>obsCol</name><index>[<expr><name>curY</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>obsCol</name><index>[<expr><name>curY</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>rowMin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>obsCol</name><index>[<expr><name>curY</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name><name>obsCol</name><index>[<expr><name>curY</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>rowMax</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>obsCol</name><index>[<expr><name>curY</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>obsCol</name><index>[<expr><name>curY</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>curX</name> <operator>=</operator> <name>rowMax</name></expr>;</expr_stmt></block></then>
            <else>else <block>{
                <expr_stmt><expr><name>curX</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>obsCol</name><index>[<expr><name>curY</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>curX</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>rowMax</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cnt</name> <operator>+=</operator> <operator>(</operator><name>colMax</name> <operator>-</operator> <name>colMin</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block></for>
                <expr_stmt><expr><name>rowMax</name> <operator>=</operator> <name>curX</name></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>colMax</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <elseif>else <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>obsRow</name><index>[<expr><name>curX</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name><name>obsRow</name><index>[<expr><name>curX</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>obsRow</name><index>[<expr><name>curX</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>colMin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>obsRow</name><index>[<expr><name>curX</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name><name>obsRow</name><index>[<expr><name>curX</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>colMax</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>obsRow</name><index>[<expr><name>curX</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>obsRow</name><index>[<expr><name>curX</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>curY</name> <operator>=</operator> <name>colMin</name></expr>;</expr_stmt></block></then>
            <else>else <block>{
                <expr_stmt><expr><name>curY</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>obsRow</name><index>[<expr><name>curX</name></expr>]</index></name><operator>.</operator><call><name>rbegin</name><argument_list>()</argument_list></call><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>colMin</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>curY</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cnt</name> <operator>+=</operator> <operator>(</operator><name>rowMax</name> <operator>-</operator> <name>rowMin</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block></for>
                <expr_stmt><expr><name>colMin</name> <operator>=</operator> <name>curY</name></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>rowMax</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <else>else <block>{
            <expr_stmt><expr><name><name>obsCol</name><index>[<expr><name>curY</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name><name>obsCol</name><index>[<expr><name>curY</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>obsCol</name><index>[<expr><name>curY</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>rowMin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>obsCol</name><index>[<expr><name>curY</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name><name>obsCol</name><index>[<expr><name>curY</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>rowMax</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>obsCol</name><index>[<expr><name>curY</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>obsCol</name><index>[<expr><name>curY</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>curX</name> <operator>=</operator> <name>rowMin</name></expr>;</expr_stmt></block></then>
            <else>else <block>{
                <expr_stmt><expr><name>curX</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>obsCol</name><index>[<expr><name>curY</name></expr>]</index></name><operator>.</operator><call><name>rbegin</name><argument_list>()</argument_list></call><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>rowMin</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>curX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cnt</name> <operator>+=</operator> <operator>(</operator><name>colMax</name> <operator>-</operator> <name>colMin</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block></for>
                <expr_stmt><expr><name>rowMin</name> <operator>=</operator> <name>curX</name></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>colMin</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
}</block></function></unit>
