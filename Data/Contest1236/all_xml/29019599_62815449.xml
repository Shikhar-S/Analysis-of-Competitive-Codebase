<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29019599_62815449.cpp"><comment type="line">//amitgomi</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<comment type="line">// #define mp(x,y) make_pair(x,y)</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d", &amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sl</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld", &amp;x)</cpp:value></cpp:define>
 
<comment type="line" format="doxygen">///////////////////////////////////////////////////////////</comment>
<comment type="line">// #include &lt;ext/pb_ds/assoc_container.hpp&gt;</comment>
<comment type="line">// #include &lt;ext/pb_ds/tree_policy.hpp&gt;</comment>
<comment type="line">// using namespace __gnu_pbds;</comment>
<comment type="line">// typedef tree&lt;int,null_type,less&lt;int&gt;,rb_tree_tag,tree_order_statistics_node_update&gt; ordered_set;</comment>
<comment type="line">// ordered_set st;</comment>
<comment type="line">// st.order_of_key(l);</comment>
<comment type="line">// double PI=3.1415926535897932384626;</comment>
<comment type="line">// ll bin_expo(ll a,ll b, ll m){ ll res =1; a %= m; while(b!=0){ if(b%2==1) res = (res*a)%mod; a = (a*a)%mod; b = b/2; } return res; }</comment>
<comment type="line">// ll gcd(ll a, ll b) { if (b == 0) return a; return gcd(b, a % b); } </comment>
<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////////////////////////////</comment>
 
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name><name>ho</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>vo</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
 
 
<function><specifier>inline</specifier> <type><name>int</name></type> <name>erse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>)</parameter_list><block>{
	<comment type="line">// cout&lt;&lt;x1&lt;&lt;' '&lt;&lt;y1&lt;&lt;' '&lt;&lt;x2&lt;&lt;' '&lt;&lt;y2&lt;&lt;endl;</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>x1</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>x2</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>y1</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>y2</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ho</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>==</operator><name><name>ho</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			}</block></then></if>
			<expr_stmt><expr><name><name>ho</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vo</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>
 
<function><type><name>int</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>x1</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>y1</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>x2</name><init>=<expr><name>n</name></expr></init></decl>,<decl><type ref="prev"/><name>y2</name><init>=<expr><name>m</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>d</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<comment type="line">// cout&lt;&lt;"hi"&lt;&lt;endl;</comment>
	<while>while<condition>(<expr><name>x1</name><operator>&lt;=</operator><name>x2</name> <operator>&amp;&amp;</operator> <name>y1</name><operator>&lt;=</operator><name>y2</name></expr>)</condition><block>{
		<comment type="line">// cout&lt;&lt;x&lt;&lt;' '&lt;&lt;y&lt;&lt;' '&lt;&lt;d&lt;&lt;"  "&lt;&lt;x1&lt;&lt;' '&lt;&lt;y1&lt;&lt;' '&lt;&lt;x2&lt;&lt;' '&lt;&lt;y2&lt;&lt;endl;</comment>
		<if>if<condition>(<expr><name>d</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>rx1</name><init>=<expr><name>x1</name></expr></init></decl>,<decl><type ref="prev"/><name>ry1</name><init>=<expr><name>y2</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>rx2</name><init>=<expr><name>x2</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>ry2</name><init>=<expr><name>y2</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><operator>!</operator><name><name>ho</name><index>[<expr><name>x1</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
				<expr_stmt><expr><name>ry1</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name><name>ho</name><index>[<expr><name>x1</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			}</block></then></if>
			<if>if<condition>(<expr><name>rx1</name><operator>&lt;</operator><name>rx2</name> <operator>&amp;&amp;</operator> <name>ry1</name><operator>&lt;</operator><name>ry2</name> <operator>&amp;&amp;</operator><call><name>erse</name><argument_list>(<argument><expr><name>rx1</name></expr></argument>,<argument><expr><name>ry1</name></expr></argument>,<argument><expr><name>rx2</name></expr></argument>,<argument><expr><name>ry2</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
				<comment type="line">// cout&lt;&lt;"No"&lt;&lt;endl;</comment>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			}</block></then></if>
			<expr_stmt><expr><name>x1</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>y2</name> <operator>=</operator> <name>ry1</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name><operator>=</operator><name>x1</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>y</name> <operator>=</operator> <name>y2</name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>x</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ho</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>!=</operator><name><name>ho</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
				<return>return <expr><call><name>erse</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>x2</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y2</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then></if>
			<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>d</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name>d</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>rx1</name><init>=<expr><name>x2</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>ry1</name><init>=<expr><name>y1</name></expr></init></decl>,<decl><type ref="prev"/><name>rx2</name><init>=<expr><name>x2</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>ry2</name><init>=<expr><name>y2</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><operator>!</operator><name><name>vo</name><index>[<expr><name>y2</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
				<expr_stmt><expr><name>rx1</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name><name>vo</name><index>[<expr><name>y2</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			}</block></then></if>
			<if>if<condition>(<expr><name>rx1</name><operator>&lt;</operator><name>rx2</name> <operator>&amp;&amp;</operator> <name>ry1</name><operator>&lt;</operator><name>ry2</name> <operator>&amp;&amp;</operator><call><name>erse</name><argument_list>(<argument><expr><name>rx1</name></expr></argument>,<argument><expr><name>ry1</name></expr></argument>,<argument><expr><name>rx2</name></expr></argument>,<argument><expr><name>ry2</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
				<comment type="line">// cout&lt;&lt;"No"&lt;&lt;endl;</comment>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			}</block></then></if>
			<expr_stmt><expr><name>y2</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>x2</name> <operator>=</operator> <name>rx1</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>y</name> <operator>=</operator> <name>y2</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name><operator>=</operator><name>x2</name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>x</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ho</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>!=</operator><name><name>ho</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
				<return>return <expr><call><name>erse</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>x2</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y2</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then></if>
			<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>d</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>;</expr_stmt>
		}</block></then></if></elseif>
 
		<elseif>else <if>if<condition>(<expr><name>d</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>rx1</name><init>=<expr><name>x1</name></expr></init></decl>,<decl><type ref="prev"/><name>ry1</name><init>=<expr><name>y1</name></expr></init></decl>,<decl><type ref="prev"/><name>rx2</name><init>=<expr><name>x2</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>ry2</name><init>=<expr><name>y1</name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><operator>!</operator><name><name>ho</name><index>[<expr><name>x2</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
				<decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>ho</name><index>[<expr><name>x2</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>ry2</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>it</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if>
			<if>if<condition>(<expr><name>rx1</name><operator>&lt;</operator><name>rx2</name> <operator>&amp;&amp;</operator> <name>ry1</name><operator>&lt;</operator><name>ry2</name> <operator>&amp;&amp;</operator><call><name>erse</name><argument_list>(<argument><expr><name>rx1</name></expr></argument>,<argument><expr><name>ry1</name></expr></argument>,<argument><expr><name>rx2</name></expr></argument>,<argument><expr><name>ry2</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
				<comment type="line">// cout&lt;&lt;"No"&lt;&lt;endl;</comment>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			}</block></then></if>
			<expr_stmt><expr><name>x2</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>y1</name> <operator>=</operator> <name>ry2</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name><operator>=</operator><name>x2</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>y</name> <operator>=</operator> <name>y1</name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>x</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ho</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>!=</operator><name><name>ho</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
				<return>return <expr><call><name>erse</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>x2</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y2</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then></if>
			<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>d</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>;</expr_stmt>
		}</block></then></if></elseif>
 
		<elseif>else <if>if<condition>(<expr><name>d</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>rx1</name><init>=<expr><name>x1</name></expr></init></decl>,<decl><type ref="prev"/><name>ry1</name><init>=<expr><name>y1</name></expr></init></decl>,<decl><type ref="prev"/><name>rx2</name><init>=<expr><name>x1</name></expr></init></decl>,<decl><type ref="prev"/><name>ry2</name><init>=<expr><name>y2</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><operator>!</operator><name><name>vo</name><index>[<expr><name>y1</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
				<decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>vo</name><index>[<expr><name>y1</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>rx2</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>it</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if>
			<if>if<condition>(<expr><name>rx1</name><operator>&lt;</operator><name>rx2</name> <operator>&amp;&amp;</operator> <name>ry1</name><operator>&lt;</operator><name>ry2</name> <operator>&amp;&amp;</operator><call><name>erse</name><argument_list>(<argument><expr><name>rx1</name></expr></argument>,<argument><expr><name>ry1</name></expr></argument>,<argument><expr><name>rx2</name></expr></argument>,<argument><expr><name>ry2</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
				<comment type="line">// cout&lt;&lt;"No"&lt;&lt;endl;</comment>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			}</block></then></if>
			<expr_stmt><expr><name>y1</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <name>rx2</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name><operator>=</operator><name>x1</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>y</name> <operator>=</operator> <name>y1</name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>x</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ho</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>!=</operator><name><name>ho</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
				<return>return <expr><call><name>erse</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>x2</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y2</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then></if>
			<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>d</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
	}</block></while>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>
 
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="line">// cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</comment>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
		<comment type="line">// cin&gt;&gt;a&gt;&gt;b;</comment>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ho</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vo</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<comment type="line">// cout&lt;&lt;"hi"&lt;&lt;endl;</comment>
	<if>if<condition>(<expr><call><name>solve</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// cout&lt;&lt;"Yes"&lt;&lt;endl;</comment>
	}</block></then>
	<else>else
		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		<comment type="line">// cout&lt;&lt;"No"&lt;&lt;endl;</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
