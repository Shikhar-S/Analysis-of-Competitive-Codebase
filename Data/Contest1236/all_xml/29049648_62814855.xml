<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29049648_62814855.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>lli</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>fx</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>fy</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gbX</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gbY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mnX</name></decl>, <decl><type ref="prev"/><name>mxX</name></decl>, <decl><type ref="prev"/><name>mnY</name></decl>, <decl><type ref="prev"/><name>mxY</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>change_dir</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><operator>++</operator><name>dir</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>int</name></type> <name>dist_next</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>coord</name></decl></parameter>, <parameter><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lim</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>auto</name></type> <name>t</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>upper_bound</name></name><argument_list>(<argument><expr><name>coord</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>t</name> <operator>!=</operator> <call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><operator>*</operator><name>t</name></expr> </then><else>: <expr><name>lim</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>min</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><name>lim</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>coord</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>dist_prev</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>coord</name></decl></parameter>, <parameter><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lim</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>auto</name></type> <name>t</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><name>coord</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mn</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>t</name> <operator>!=</operator> <call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><operator>*</operator><operator>(</operator><operator>--</operator><name>t</name><operator>)</operator></expr> </then><else>: <expr><name>lim</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>coord</name> <operator>-</operator> <call><name>max</name><argument_list>(<argument><expr><name>mn</name></expr></argument>, <argument><expr><name>lim</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>go_max</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>dir</name></expr>)</condition> <block>{
        <case>case <expr><literal type="number">1</literal></expr>:</case> <block>{
            <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>dist_next</name><argument_list>(<argument><expr><name>gbY</name></expr></argument>, <argument><expr><name><name>fx</name><index>[<expr><name>gbX</name></expr>]</index></name></expr></argument>, <argument><expr><name>mxY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>gbY</name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>mxY</name> <operator>=</operator> <name>gbY</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block>
        <case>case <expr><literal type="number">2</literal></expr>:</case> <block>{
            <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>dist_next</name><argument_list>(<argument><expr><name>gbX</name></expr></argument>, <argument><expr><name><name>fy</name><index>[<expr><name>gbY</name></expr>]</index></name></expr></argument>, <argument><expr><name>mxX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>gbX</name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>mxX</name> <operator>=</operator> <name>gbX</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block>
        <case>case <expr><literal type="number">3</literal></expr>:</case> <block>{
            <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>dist_prev</name><argument_list>(<argument><expr><name>gbY</name></expr></argument>, <argument><expr><name><name>fx</name><index>[<expr><name>gbX</name></expr>]</index></name></expr></argument>, <argument><expr><name>mnY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>gbY</name> <operator>-=</operator> <name>d</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>mnY</name> <operator>=</operator> <name>gbY</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block>
        <case>case <expr><literal type="number">4</literal></expr>:</case> <block>{
            <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>dist_prev</name><argument_list>(<argument><expr><name>gbX</name></expr></argument>, <argument><expr><name><name>fy</name><index>[<expr><name>gbY</name></expr>]</index></name></expr></argument>, <argument><expr><name>mnX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>gbX</name> <operator>-=</operator> <name>d</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>mnX</name> <operator>=</operator> <name>gbX</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block>
    }</block></switch>
    <return>return <expr><name>d</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <comment type="line">// ifstream cin("biconv.in");</comment>
    <comment type="line">// ofstream cout("biconv.out");</comment>
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>fx</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>fy</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>mnX</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>mxX</name> <operator>=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>mnY</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>mxY</name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>lli</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>f</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>go_max</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><name>f</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <break>break;</break>
        }</block></then></if>
        <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>change_dir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <decl_stmt><decl><type><name>lli</name></type> <name>e</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>e</name> <operator>*=</operator> <name>m</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ans</name> <operator>==</operator> <name>e</name> <operator>-</operator> <name>k</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr>;</expr_stmt>
    }</block></else></if>
}</block></function></unit>
