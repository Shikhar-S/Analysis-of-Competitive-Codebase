<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29074609_62784247.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rnt</name></cpp:macro> <cpp:value>re int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>re</name></cpp:macro> <cpp:value>register</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I</name></cpp:macro> <cpp:value>inline int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name></cpp:macro> <cpp:value>inline void</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isnum</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>('0'&lt;=ch&amp;&amp;ch&lt;='9')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(rnt i=a;i&lt;=b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROF</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(rnt i=a;i&gt;=b;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gc</name></cpp:macro> <cpp:value>(_op==_ed&amp;&amp;(_ed=(_op=_buf)+fread(_buf,1,100000,stdin),_op==_ed)?EOF:*_op++)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name></type> <name><name>_buf</name><index>[<expr><literal type="number">100000</literal></expr>]</index></name></decl>,<modifier>*</modifier><decl><type ref="prev"/><name>_op</name><argument_list>(<argument><expr><name>_buf</name></expr></argument>)</argument_list></decl>,<modifier>*</modifier><decl><type ref="prev"/><name>_ed</name><argument_list>(<argument><expr><name>_buf</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function><type><name>I</name></type> <name>getint</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>int</name></type> <name><name>flag</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rnt</name></type> <name>_s</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>_f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>re</name> <name>char</name></type> <name>_ch</name><init>=<expr><name>gc</name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>!</operator><call><name>isnum</name><argument_list>(<argument><expr><name>_ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>_f</name><operator>=</operator><name><name>flag</name><index>[<expr><name>_ch</name><operator>==</operator><literal type="char">'-'</literal></expr>]</index></name></expr><operator>,</operator><expr><name>_ch</name><operator>=</operator><name>gc</name></expr>;</expr_stmt></block></while>
	<while>while<condition>(<expr><call><name>isnum</name><argument_list>(<argument><expr><name>_ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>_s</name><operator>=</operator><name>_s</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>_ch</name><operator>-</operator><literal type="number">48</literal></expr><operator>,</operator><expr><name>_ch</name><operator>=</operator><name>gc</name></expr>;</expr_stmt></block></while>
	<return>return <expr><name>_s</name><operator>*</operator><name>_f</name></expr>;</return>
}</block></function>
<function><type><name>I</name></type> <name>max</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>x</name><operator>&gt;</operator><name>y</name></expr>?</condition><then><expr><name>x</name></expr></then><else>:<expr><name>y</name></expr></else></ternary></expr>;</return>}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1e2</literal><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>f</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>g</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>I</name></type> <name>dp</name><parameter_list>(<parameter><decl><type><name>rnt</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>rnt</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>rnt</name></type> <name>z</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name><name>g</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>z</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>z</name></expr>]</index></name></expr>;</return></block></then></if>
	<expr_stmt><expr><name><name>g</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>z</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>x</name><operator>&gt;=</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>y</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>z</name></expr>]</index></name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>z</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>dp</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>z</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>y</name><operator>&gt;=</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>z</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>z</name></expr>]</index></name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>z</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>dp</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>z</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<return>return <expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>z</name></expr>]</index></name></expr>;</return>
}</block></function>
<function><type><name>V</name></type> <name>input</name><parameter_list>()</parameter_list><block>{
	
}</block></function>
<function><type><name>V</name></type> <name>init</name><parameter_list>()</parameter_list><block>{
	
}</block></function>
<function><type><name>V</name></type> <name>work</name><parameter_list>()</parameter_list><block>{
	
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
<comment type="line">//	freopen("test.in","r",stdin);</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>T</name><operator>=</operator><call><name>getint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition><block>{
		<expr_stmt><expr><name>x</name><operator>=</operator><call><name>getint</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name>y</name><operator>=</operator><call><name>getint</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name>z</name><operator>=</operator><call><name>getint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>dp</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>z</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><call><name>input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>work</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
