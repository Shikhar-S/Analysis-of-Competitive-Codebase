<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29089536_62785479.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(), (x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>begin</name></type></parameter>, <parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (__typeof(end) i = (begin) - ((begin) &gt; (end)); i != (end) - ((begin) &gt; (end)); i += 1 - 2 * ((begin) &gt; (end)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>allin</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto x : V)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>vrb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{cerr &lt;&lt; #vrb &lt;&lt; ": " &lt;&lt; vrb &lt;&lt; endl;}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name><parameter_list>(<parameter><type><name>cnt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{cerr &lt;&lt; #cnt &lt;&lt; ": "; for(auto vrb : cnt) cerr &lt;&lt; vrb &lt;&lt; ", "; cerr &lt;&lt; endl;}</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>

<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>vvi</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vii</name></expr></argument>&gt;</argument_list></name></type> <name>vvii</name>;</typedef>

<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vc</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vc</name></expr></argument>&gt;</argument_list></name></type> <name>vvc</name>;</typedef>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <comment type="line">//freopen("input.txt", "r", stdin);</comment>
    <comment type="line">//freopen("output.txt", "w", stdout);</comment>

    <comment type="line">//cout.setf(ios::fixed);</comment>
    <comment type="line">//cout.precision(4);</comment>

    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
    	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
    	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
    	<decl_stmt><decl><type><name>int</name></type> <name>sol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    	<if>if <condition>(<expr><literal type="number">2</literal><operator>*</operator><name>b</name> <operator>&lt;=</operator> <name>c</name></expr>)</condition><then> <block>{
    		<expr_stmt><expr><name>sol</name> <operator>+=</operator> <literal type="number">3</literal><operator>*</operator><name>b</name></expr>;</expr_stmt>
    		<expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="number">2</literal><operator>*</operator><name>b</name></expr>;</expr_stmt>
    		<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    	}</block></then>
    	<else>else <block>{
    		<expr_stmt><expr><name>sol</name> <operator>+=</operator> <literal type="number">3</literal><operator>*</operator><operator>(</operator><name>c</name> <operator>-</operator> <name>c</name><operator>%</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
    		<expr_stmt><expr><name>b</name> <operator>-=</operator> <operator>(</operator><name>c</name> <operator>-</operator> <name>c</name><operator>%</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
    		<expr_stmt><expr><name>c</name> <operator>=</operator> <name>c</name><operator>%</operator><literal type="number">2</literal></expr>;</expr_stmt>
    	}</block></else></if>

    	<if>if <condition>(<expr><literal type="number">2</literal><operator>*</operator><name>a</name> <operator>&lt;=</operator> <name>b</name></expr>)</condition><then> <block>{
    		<expr_stmt><expr><name>sol</name> <operator>+=</operator> <literal type="number">3</literal><operator>*</operator><name>a</name></expr>;</expr_stmt>
    		<expr_stmt><expr><name>b</name> <operator>-=</operator> <literal type="number">2</literal><operator>*</operator><name>a</name></expr>;</expr_stmt>
    		<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    	}</block></then>
    	<else>else <block>{
    		<expr_stmt><expr><name>sol</name> <operator>+=</operator> <literal type="number">3</literal><operator>*</operator><operator>(</operator><name>b</name> <operator>-</operator> <name>b</name><operator>%</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
    		<expr_stmt><expr><name>a</name> <operator>-=</operator> <operator>(</operator><name>b</name> <operator>-</operator> <name>b</name><operator>%</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
    		<expr_stmt><expr><name>b</name> <operator>=</operator> <name>b</name><operator>%</operator><literal type="number">2</literal></expr>;</expr_stmt>
    	}</block></else></if>

    	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>sol</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    		
    }</block></while>
}</block></function>
</unit>
