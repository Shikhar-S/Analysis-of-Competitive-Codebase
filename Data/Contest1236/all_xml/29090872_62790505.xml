<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29090872_62790505.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<decl_stmt><decl><type><name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{
    <if>if<condition>(<expr><operator>!</operator><name>idx</name></expr>)</condition><then> <block>{
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>temp</name> <init>= <expr><call><name>power</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>idx</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>temp</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>temp</name> <operator>*=</operator> <name>temp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>temp</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>idx</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>temp</name> <operator>*=</operator> <name>num</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>temp</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>temp</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>num</name> <init>= <expr><call><name>power</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>mod</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>num</name><operator>--</operator></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>num</name> <operator>+=</operator> <name>mod</name></expr>;</expr_stmt>
    }</block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><call><name>power</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>mod</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <comment type="line">// num %= mod;</comment>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
