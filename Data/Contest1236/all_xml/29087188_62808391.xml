<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29087188_62808391.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>dh</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>dw</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>K</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>K</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>h</name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>w</name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>rows</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>cols</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>K</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>h</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>w</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>h</name><index>[<expr><name>i</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>w</name><index>[<expr><name>i</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rows</name><index>[<expr><name><name>h</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name><name>w</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cols</name><index>[<expr><name><name>w</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name><name>h</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>rows</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rows</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>rows</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>rows</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>cols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>cols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>   

    <decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cw</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>minh</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxh</name> <init>= <expr><name>n</name></expr></init></decl>, <decl><type ref="prev"/><name>minw</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxw</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>rest</name> <init>= <expr><operator>(</operator><name>ll</name><operator>)</operator><name>n</name> <operator>*</operator> <name>m</name> <operator>-</operator> <name>K</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>turned</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>rest</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{
        <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><operator>*</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>rows</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>rows</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nw</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>maxw</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>nw</name> <operator>==</operator> <name>cw</name> <operator>&amp;&amp;</operator> <name>turned</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>maxw</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>maxw</name></expr></argument>, <argument><expr><name>nw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rest</name> <operator>-=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>nw</name> <operator>-</operator> <name>cw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cw</name> <operator>=</operator> <name>nw</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>turned</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><operator>*</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>cols</name><index>[<expr><name>cw</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cols</name><index>[<expr><name>cw</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nh</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>maxh</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>nh</name> <operator>==</operator> <name>ch</name> <operator>&amp;&amp;</operator> <name>turned</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>maxh</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>maxh</name></expr></argument>, <argument><expr><name>nh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rest</name> <operator>-=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>nh</name> <operator>-</operator> <name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>nh</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>turned</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><operator>*</operator><call><name>prev</name><argument_list>(<argument><expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>rows</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>rows</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nw</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>minw</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>nw</name> <operator>==</operator> <name>cw</name> <operator>&amp;&amp;</operator> <name>turned</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>minw</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>minw</name></expr></argument>, <argument><expr><name>nw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rest</name> <operator>-=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>nw</name> <operator>-</operator> <name>cw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cw</name> <operator>=</operator> <name>nw</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>turned</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><operator>*</operator><call><name>prev</name><argument_list>(<argument><expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>cols</name><index>[<expr><name>cw</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cols</name><index>[<expr><name>cw</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nh</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>minh</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>nh</name> <operator>==</operator> <name>ch</name> <operator>&amp;&amp;</operator> <name>turned</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>minh</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>minh</name></expr></argument>, <argument><expr><name>nh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rest</name> <operator>-=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>nh</name> <operator>-</operator> <name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>nh</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>turned</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>rest</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"Yes"</literal></expr> </then><else>: <expr><literal type="string">"No"</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
