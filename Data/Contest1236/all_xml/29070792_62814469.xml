<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29070792_62814469.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scan</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d",&amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scanl</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%I64d",&amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>For</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;=b;i++)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>vx</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>vy</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt><comment type="line">//vxä¸ºæ¯è¡yå¼ï¼vyä¸ºæ¯åxå¼ </comment>
<decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>t</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>b</name><init>=<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>move</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list><block>{
<comment type="line">//	cout&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;" "&lt;&lt;d&lt;&lt;" "&lt;&lt;ans&lt;&lt;"\n";</comment>
<comment type="line">//	cout&lt;&lt;l&lt;&lt;" "&lt;&lt;r&lt;&lt;" "&lt;&lt;t&lt;&lt;" "&lt;&lt;b&lt;&lt;"\n";</comment>
	<if>if<condition>(<expr><name>ans</name><operator>&gt;</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>d</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>p</name><init>=<expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>vx</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>vx</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>vx</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>tt</name></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>p</name><operator>==</operator><name><name>vx</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>||</operator><name><name>vx</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name><operator>&gt;=</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>tt</name><operator>=</operator><name>r</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>tt</name><operator>=</operator><name><name>vx</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
		<expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><name>r</name><operator>-</operator><name>tt</name><operator>)</operator><operator>*</operator><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name>b</name><operator>-</operator><name>x</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tt</name><operator>--</operator></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>tt</name><operator>==</operator><name>y</name><operator>&amp;&amp;</operator><operator>(</operator><name>x</name><operator>!=</operator><literal type="number">1</literal><operator>||</operator><name>y</name><operator>!=</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>ans</name><operator>==</operator><name>k</name></expr>;</return></block></then>
		<elseif>else <if>if<condition>(<expr><name>tt</name><operator>==</operator><name>y</name><operator>&amp;&amp;</operator><name>x</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>y</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>move</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if></elseif>
	<comment type="line">//	else if(tt==y&amp;&amp;num==1) return move(x,tt,2);</comment>
		<else>else <block type="pseudo"><return>return <expr><call><name>move</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>tt</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
	}</block></then>
	<elseif>else <if>if<condition>(<expr><name>d</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>p</name><init>=<expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>vy</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>vy</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>vy</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>tt</name></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>p</name><operator>==</operator><name><name>vy</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>||</operator><name><name>vy</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name><operator>&gt;=</operator><name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>tt</name><operator>=</operator><name>b</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>tt</name><operator>=</operator><name><name>vy</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
		<expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><name>b</name><operator>-</operator><name>tt</name><operator>)</operator><operator>*</operator><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name>y</name><operator>-</operator><name>l</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>r</name><operator>=</operator><name>y</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tt</name><operator>--</operator></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>tt</name><operator>==</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>ans</name><operator>==</operator><name>k</name></expr>;</return></block></then>
	<comment type="line">//	else if(tt==x&amp;&amp;num==1) return move(tt,y,3,2);</comment>
		<else>else <block type="pseudo"><return>return <expr><call><name>move</name><argument_list>(<argument><expr><name>tt</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
	}</block></then></if></elseif>
	<elseif>else <if>if<condition>(<expr><name>d</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>p</name><init>=<expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>vx</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>vx</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>vx</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>tt</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>p</name><operator>&lt;</operator><literal type="number">0</literal><operator>||</operator><name><name>vx</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name><operator>&lt;=</operator><name>l</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>tt</name><operator>=</operator><name>l</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>tt</name><operator>=</operator><name><name>vx</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
		<expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><name>tt</name><operator>-</operator><name>l</name><operator>)</operator><operator>*</operator><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name>x</name><operator>-</operator><name>t</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tt</name><operator>++</operator></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>tt</name><operator>==</operator><name>y</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>ans</name><operator>==</operator><name>k</name></expr>;</return></block></then>
		<comment type="line">//else if(tt==y&amp;&amp;num==1) return move(x,tt,4,2);</comment>
		<else>else <block type="pseudo"><return>return <expr><call><name>move</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>tt</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
	}</block></then></if></elseif>
	<else>else<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>p</name><init>=<expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>vy</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>vy</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>vy</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>tt</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>p</name><operator>&lt;</operator><literal type="number">0</literal><operator>||</operator><name><name>vy</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name><operator>&lt;=</operator><name>t</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>tt</name><operator>=</operator><name>t</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>tt</name><operator>=</operator><name><name>vy</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
		<expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><name>tt</name><operator>-</operator><name>t</name><operator>)</operator><operator>*</operator><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name>r</name><operator>-</operator><name>y</name><operator>)</operator></expr>;</expr_stmt>
	<comment type="line">//	cout&lt;&lt;ans&lt;&lt;"\n";</comment>
		<expr_stmt><expr><name>l</name><operator>=</operator><name>y</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tt</name><operator>++</operator></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>tt</name><operator>==</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>ans</name><operator>==</operator><name>k</name></expr>;</return></block></then>
	<comment type="line">//	else if(tt==x&amp;&amp;num==1) return move(tt,y,1,2);</comment>
		<else>else <block type="pseudo"><return>return <expr><call><name>move</name><argument_list>(<argument><expr><name>tt</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
	}</block></else></if>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
<comment type="line">//	freopen("in.txt","r",stdin);</comment>
	<expr_stmt><expr><call><name>scan</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>scan</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>scan</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>l</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator><expr><name>r</name><operator>=</operator><name>m</name><operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>t</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator><expr><name>b</name><operator>=</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>scan</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>scan</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vx</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vy</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>vx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>vx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>vy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>vy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<if>if<condition>(<expr><call><name>move</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt></block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
