<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29086386_62814766.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(), (x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(a).size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>for0</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = 0; i &lt; (int)(n); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>for1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = 1; i &lt;= (int)(n); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ld</name></expr></argument>, <argument><expr><name>ld</name></expr></argument>&gt;</argument_list></name></type> <name>pld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>

 <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>


<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <comment type="line">//ifstream cin("input.txt");</comment>
    <comment type="line">//ofstream cout("output.txt");</comment>
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>str</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>stb</name><argument_list>(<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line">//    for(int i = 1; i &lt;= n; i++){</comment>
<comment type="line">//        strto[i].insert(0);</comment>
<comment type="line">//        strd[i].insert(m+1);</comment>
<comment type="line">//    }</comment>
<comment type="line">//</comment>
<comment type="line">//    for(int i = 1; i &lt;= m; i++){</comment>
<comment type="line">//        stbto[i].insert(0);</comment>
<comment type="line">//        stbd[i].insert(n+1);</comment>
<comment type="line">//    }</comment>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>str</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>stb</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>stmx</name> <init>= <expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>stmn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sbmx</name> <init>= <expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>sbmn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ty</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>np</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


   <comment type="line">// for(int i = 0; i &lt; 7; i++)</comment>

        <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
        <block>{
        <expr_stmt><expr><name>np</name> <operator>=</operator> <operator>(</operator><name>np</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>;</expr_stmt>

        <if>if<condition>(<expr><name>np</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>str</name><index>[<expr><name>tx</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>ty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>t</name> <init>= <expr><name><name>str</name><index>[<expr><name>tx</name></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>ty</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>t</name><operator>++</operator></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>gty</name></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>t</name> <operator>==</operator> <name><name>str</name><index>[<expr><name>tx</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>gty</name> <operator>=</operator> <name>m</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>gty</name> <operator>=</operator> <operator>*</operator><name>t</name></expr>;</expr_stmt></block></else></if>
            <expr_stmt><expr><name>gty</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>gty</name></expr></argument>, <argument><expr><name>stmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <comment type="line">// cout&lt;&lt;"np = "&lt;&lt;np&lt;&lt;"  gty = "&lt;&lt;gty&lt;&lt;endl;</comment>
            <expr_stmt><expr><name>ans</name> <operator>+=</operator> <operator>(</operator><name>gty</name><operator>-</operator><name>ty</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>stmx</name> <operator>=</operator> <name>gty</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>sbmn</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>sbmn</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>str</name><index>[<expr><name>tx</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>ty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ty</name> <operator>=</operator> <name>gty</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<comment type="line">//               cout&lt;&lt;"tx = "&lt;&lt;tx&lt;&lt;"   ty = "&lt;&lt;ty&lt;&lt;endl;</comment>
<comment type="line">//               cout&lt;&lt;"stmx = "&lt;&lt;stmx&lt;&lt;"   stmn = "&lt;&lt;stmn&lt;&lt;"   sbmx = "&lt;&lt;sbmx&lt;&lt;"   sbmn = "&lt;&lt;sbmn&lt;&lt;endl;</comment>
<comment type="line">//</comment>
<comment type="line">//               cout&lt;&lt;endl;</comment>

               <if>if<condition>(<expr><name>stmx</name> <operator>==</operator> <name>stmn</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        }</block></then></if>

        <if>if<condition>(<expr><name>np</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>str</name><index>[<expr><name>tx</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>ty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>t</name> <init>= <expr><name><name>str</name><index>[<expr><name>tx</name></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>ty</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>gty</name></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>t</name> <operator>==</operator> <name><name>str</name><index>[<expr><name>tx</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>gty</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then> <else>else<block>{<expr_stmt><expr><name>t</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>gty</name> <operator>=</operator> <operator>*</operator><name>t</name></expr>;</expr_stmt>}</block></else></if>

            <expr_stmt><expr><name>gty</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>gty</name></expr></argument>, <argument><expr><name>stmn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//cout&lt;&lt;"np = "&lt;&lt;np&lt;&lt;"  gty = "&lt;&lt;gty&lt;&lt;endl;</comment>
            <expr_stmt><expr><name>ans</name> <operator>+=</operator> <operator>(</operator><name>ty</name> <operator>-</operator> <name>gty</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>stmn</name> <operator>=</operator> <name>gty</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>sbmx</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>sbmx</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>str</name><index>[<expr><name>tx</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>ty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ty</name> <operator>=</operator> <name>gty</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<comment type="line">//            cout&lt;&lt;"tx = "&lt;&lt;tx&lt;&lt;"   ty = "&lt;&lt;ty&lt;&lt;endl;</comment>
<comment type="line">//              cout&lt;&lt;"stmx = "&lt;&lt;stmx&lt;&lt;"   stmn = "&lt;&lt;stmn&lt;&lt;"   sbmx = "&lt;&lt;sbmx&lt;&lt;"   sbmn = "&lt;&lt;sbmn&lt;&lt;endl;</comment>
<comment type="line">//</comment>
<comment type="line">//               cout&lt;&lt;endl;</comment>
               <if>if<condition>(<expr><name>stmx</name> <operator>==</operator> <name>stmn</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        }</block></then></if>

        <if>if<condition>(<expr><name>np</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>stb</name><index>[<expr><name>ty</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>t</name> <init>= <expr><name><name>stb</name><index>[<expr><name>ty</name></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>t</name><operator>++</operator></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>gtx</name></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>t</name> <operator>==</operator> <name><name>stb</name><index>[<expr><name>ty</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>gtx</name> <operator>=</operator> <name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>gtx</name> <operator>=</operator> <operator>*</operator><name>t</name></expr>;</expr_stmt></block></else></if>
            <expr_stmt><expr><name>gtx</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>gtx</name></expr></argument>, <argument><expr><name>sbmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <comment type="line">//   cout&lt;&lt;"np = "&lt;&lt;np&lt;&lt;"  gtx = "&lt;&lt;gtx&lt;&lt;endl;</comment>
            <expr_stmt><expr><name>ans</name> <operator>+=</operator> <operator>(</operator><name>gtx</name><operator>-</operator><name>tx</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>sbmx</name> <operator>=</operator> <name>gtx</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>stmx</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>stmx</name></expr></argument>, <argument><expr><name>ty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stb</name><index>[<expr><name>ty</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tx</name> <operator>=</operator> <name>gtx</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<comment type="line">//               cout&lt;&lt;"tx = "&lt;&lt;tx&lt;&lt;"   ty = "&lt;&lt;ty&lt;&lt;endl;</comment>
<comment type="line">//                 cout&lt;&lt;"stmx = "&lt;&lt;stmx&lt;&lt;"   stmn = "&lt;&lt;stmn&lt;&lt;"   sbmx = "&lt;&lt;sbmx&lt;&lt;"   sbmn = "&lt;&lt;sbmn&lt;&lt;endl;</comment>
<comment type="line">//</comment>
<comment type="line">//                  cout&lt;&lt;endl;</comment>
                  <if>if<condition>(<expr><name>sbmx</name> <operator>==</operator> <name>sbmn</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        }</block></then></if>

        <if>if<condition>(<expr><name>np</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>stb</name><index>[<expr><name>ty</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>t</name> <init>= <expr><name><name>stb</name><index>[<expr><name>ty</name></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>gtx</name></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>t</name> <operator>==</operator> <name><name>stb</name><index>[<expr><name>ty</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>gtx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then> <else>else<block>{<expr_stmt><expr><name>t</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>gtx</name> <operator>=</operator> <operator>*</operator><name>t</name></expr>;</expr_stmt>}</block></else></if>

            <expr_stmt><expr><name>gtx</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>gtx</name></expr></argument>, <argument><expr><name>sbmn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <comment type="line">// cout&lt;&lt;"np = "&lt;&lt;np&lt;&lt;"  gtx = "&lt;&lt;gtx&lt;&lt;endl;</comment>
            <expr_stmt><expr><name>ans</name> <operator>+=</operator> <operator>(</operator><name>tx</name> <operator>-</operator> <name>gtx</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>sbmn</name> <operator>=</operator> <name>gtx</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>stmn</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>stmn</name></expr></argument>, <argument><expr><name>ty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stb</name><index>[<expr><name>ty</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tx</name> <operator>=</operator> <name>gtx</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<comment type="line">//               cout&lt;&lt;"tx = "&lt;&lt;tx&lt;&lt;"   ty = "&lt;&lt;ty&lt;&lt;endl;</comment>
<comment type="line">//                 cout&lt;&lt;"stmx = "&lt;&lt;stmx&lt;&lt;"   stmn = "&lt;&lt;stmn&lt;&lt;"   sbmx = "&lt;&lt;sbmx&lt;&lt;"   sbmn = "&lt;&lt;sbmn&lt;&lt;endl;</comment>
<comment type="line">//</comment>
<comment type="line">//                  cout&lt;&lt;endl;</comment>
                  <if>if<condition>(<expr><name>sbmx</name> <operator>==</operator> <name>sbmn</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        }</block></then></if>

 <comment type="line">//cout &lt;&lt; ans&lt;&lt;endl;</comment>
    }</block></while>

 <expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
<comment type="line">// cout&lt;&lt;ans&lt;&lt;endl;</comment>

 <if>if<condition>(<expr><name>ans</name> <operator>==</operator> <name>n</name><operator>*</operator><name>m</name> <operator>-</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator><literal type="string">"Yes"</literal></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr>;</expr_stmt></block></else></if>

}</block></function>

</unit>
