<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29058101_62809950.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mk</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fs</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>mp</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>mp1</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>px1</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>px2</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>py1</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>py2</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>)</condition><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>sm</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
            <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp1</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>lx1</name></decl>, <decl><type ref="prev"/><name>lx2</name></decl>, <decl><type ref="prev"/><name>ly1</name></decl>, <decl><type ref="prev"/><name>ly2</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>lx1</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>lx2</name><operator>=</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
            <expr_stmt><expr><name><name>mp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>mp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>mp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>px2</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>mp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>--</operator><name><name>px2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>px1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        }</block></for>
            <expr_stmt><expr><name>ly1</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>ly2</name><operator>=</operator><name>m</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
            <expr_stmt><expr><name><name>mp1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>mp1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>mp1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>py2</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>mp1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>--</operator><name><name>py2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>py1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>dir</name><init>=<expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>tmpx</name></decl>, <decl><type ref="prev"/><name>tmpy</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>, <decl><type ref="prev"/><name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>y</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cnt1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{
            <expr_stmt><expr><name>tmpx</name><operator>=</operator><name>x</name></expr>;</expr_stmt><expr_stmt><expr><name>tmpy</name><operator>=</operator><name>y</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                <while>while<condition>(<expr><name><name>mp</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name><name>px2</name><index>[<expr><name>x</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&gt;</operator><name>y</name></expr>)</condition><block>{
                    <expr_stmt><expr><operator>--</operator><name><name>px2</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></while>
                <expr_stmt><expr><name>tmp</name><operator>=</operator><name><name>mp</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name><name>px2</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>ly2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>sm</name><operator>+=</operator><name>tmp</name><operator>-</operator><name>y</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>y</name><operator>=</operator><name>tmp</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>ly2</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>lx1</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>lx1</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <elseif>else <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
                <while>while<condition>(<expr><name><name>mp1</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name><name>py2</name><index>[<expr><name>y</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&gt;</operator><name>x</name></expr>)</condition><block>{
                    <expr_stmt><expr><operator>--</operator><name><name>py2</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></while>
                <expr_stmt><expr><name>tmp</name><operator>=</operator><name><name>mp1</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name><name>py2</name><index>[<expr><name>y</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>lx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>sm</name><operator>+=</operator><name>tmp</name><operator>-</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>x</name><operator>=</operator><name>tmp</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>lx2</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ly2</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>ly2</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif>
            <elseif>else <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
                <while>while<condition>(<expr><name><name>mp</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name><name>px1</name><index>[<expr><name>x</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;</operator><name>y</name></expr>)</condition><block>{
                    <expr_stmt><expr><operator>++</operator><name><name>px1</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></while>
                <expr_stmt><expr><name>tmp</name><operator>=</operator><name><name>mp</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name><name>px1</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>ly1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>sm</name><operator>+=</operator><name>y</name><operator>-</operator><name>tmp</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>y</name><operator>=</operator><name>tmp</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>ly1</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>lx2</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>lx2</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif>
            <elseif>else <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><then><block>{
                <while>while<condition>(<expr><name><name>mp1</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name><name>py1</name><index>[<expr><name>y</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;</operator><name>x</name></expr>)</condition><block>{
                    <expr_stmt><expr><operator>++</operator><name><name>py1</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></while>
                <expr_stmt><expr><name>tmp</name><operator>=</operator><name><name>mp1</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name><name>py1</name><index>[<expr><name>y</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>lx1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>sm</name><operator>+=</operator><name>x</name><operator>-</operator><name>tmp</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>x</name><operator>=</operator><name>tmp</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>lx1</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ly1</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>ly1</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
            <expr_stmt><expr><operator>++</operator><name>dir</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">5</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name>tmpx</name><operator>==</operator><name>x</name><operator>&amp;&amp;</operator><name>tmpy</name><operator>==</operator><name>y</name></expr>)</condition><then><block>{
                <expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name>cnt</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            }</block></else></if>
            <if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>y</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>cnt</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then><block>{
                    <break>break;</break>
                }</block></then></if>
            }</block></then>
            <else>else<block>{
                <if>if<condition>(<expr><name>cnt</name><operator>&gt;=</operator><literal type="number">1</literal></expr>)</condition><then>
                    <block type="pseudo"><break>break;</break></block></then></if>
            }</block></else></if>
            <expr_stmt><expr><operator>++</operator><name>cnt1</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cnt1</name><operator>&lt;</operator><literal type="number">3</literal><operator>*</operator><operator>(</operator><name>n</name><operator>+</operator><name>m</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//            cout&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;" "&lt;&lt;sm&lt;&lt;endl;</comment>
        }</block></while>
<comment type="line">//        cout&lt;&lt;sm&lt;&lt;endl;</comment>
        <if>if<condition>(<expr><name>n</name><operator>*</operator><name>m</name><operator>-</operator><name>sm</name><operator>==</operator><name>k</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


</unit>
