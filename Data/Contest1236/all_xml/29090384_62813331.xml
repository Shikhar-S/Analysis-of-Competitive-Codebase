<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29090384_62813331.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>f1</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>a</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>&lt;</operator> <name>d</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>

    <while>while <condition>(<expr><name>r</name> <operator>-</operator> <name>l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{
        <expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>m</name></expr>]</index></name> <operator>&gt;=</operator> <name>d</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>r</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>l</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <return>return <expr><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>f2</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>a</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>&gt;</operator> <name>d</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>

    <while>while <condition>(<expr><name>r</name> <operator>-</operator> <name>l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{
        <expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>m</name></expr>]</index></name> <operator>&lt;=</operator> <name>d</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>l</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>r</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <return>return <expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>y</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>b</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>max</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>c</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>now</name></decl>, <decl><type ref="prev"/><name>mem_y</name></decl>, <decl><type ref="prev"/><name>mem_x</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>down</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>up</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>right</name> <init>= <expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
        <expr_stmt><expr><name>mem_y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mem_x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>f1</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>now</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>now</name> <operator>&lt;=</operator> <name>right</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>right</name> <operator>=</operator> <name>now</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>right</name> <operator>&lt;</operator> <name>left</name></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
        <comment type="line">//cout &lt;&lt; left &lt;&lt; ' ' &lt;&lt; right &lt;&lt; ' ' &lt;&lt; up &lt;&lt; ' ' &lt;&lt; down &lt;&lt; " | " &lt;&lt; y &lt;&lt; ' ' &lt;&lt; x &lt;&lt; ' ' &lt;&lt; now &lt;&lt; ' ' &lt;&lt; c &lt;&lt; '\n';</comment>
        <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>right</name> <operator>-</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>up</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
        <comment type="line">//cout &lt;&lt; left &lt;&lt; ' ' &lt;&lt; right &lt;&lt; ' ' &lt;&lt; up &lt;&lt; ' ' &lt;&lt; down &lt;&lt; " | " &lt;&lt; y &lt;&lt; ' ' &lt;&lt; x &lt;&lt; ' ' &lt;&lt; now &lt;&lt; ' ' &lt;&lt; c &lt;&lt; "\n\n";</comment>

        <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>f1</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>now</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>now</name> <operator>&lt;=</operator> <name>down</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>down</name> <operator>=</operator> <name>now</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>down</name> <operator>&lt;</operator> <name>up</name></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
        <comment type="line">//cout &lt;&lt; left &lt;&lt; ' ' &lt;&lt; right &lt;&lt; ' ' &lt;&lt; up &lt;&lt; ' ' &lt;&lt; down &lt;&lt; " | " &lt;&lt; y &lt;&lt; ' ' &lt;&lt; x &lt;&lt; ' ' &lt;&lt; now &lt;&lt; ' ' &lt;&lt; c &lt;&lt; "\n";</comment>
        <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>down</name> <operator>-</operator> <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>right</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <name>down</name></expr>;</expr_stmt>
        <comment type="line">//cout &lt;&lt; left &lt;&lt; ' ' &lt;&lt; right &lt;&lt; ' ' &lt;&lt; up &lt;&lt; ' ' &lt;&lt; down &lt;&lt; " | " &lt;&lt; y &lt;&lt; ' ' &lt;&lt; x &lt;&lt; ' ' &lt;&lt; now &lt;&lt; ' ' &lt;&lt; c &lt;&lt; "\n\n";</comment>

        <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>f2</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>now</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>now</name> <operator>&gt;=</operator> <name>left</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>left</name> <operator>=</operator> <name>now</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>right</name> <operator>&lt;</operator> <name>left</name></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
        <comment type="line">//cout &lt;&lt; left &lt;&lt; ' ' &lt;&lt; right &lt;&lt; ' ' &lt;&lt; up &lt;&lt; ' ' &lt;&lt; down &lt;&lt; " | " &lt;&lt; y &lt;&lt; ' ' &lt;&lt; x &lt;&lt; ' ' &lt;&lt; now &lt;&lt; ' ' &lt;&lt; c &lt;&lt; "\n";</comment>
        <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>x</name> <operator>-</operator> <name>left</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>down</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
        <comment type="line">//cout &lt;&lt; left &lt;&lt; ' ' &lt;&lt; right &lt;&lt; ' ' &lt;&lt; up &lt;&lt; ' ' &lt;&lt; down &lt;&lt; " | " &lt;&lt; y &lt;&lt; ' ' &lt;&lt; x &lt;&lt; ' ' &lt;&lt; now &lt;&lt; ' ' &lt;&lt; c &lt;&lt; "\n\n";</comment>

        <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>f2</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>now</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>now</name> <operator>&gt;=</operator> <name>up</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>up</name> <operator>=</operator> <name>now</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>down</name> <operator>&lt;</operator> <name>up</name></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
        <comment type="line">//cout &lt;&lt; left &lt;&lt; ' ' &lt;&lt; right &lt;&lt; ' ' &lt;&lt; up &lt;&lt; ' ' &lt;&lt; down &lt;&lt; " | " &lt;&lt; y &lt;&lt; ' ' &lt;&lt; x &lt;&lt; ' ' &lt;&lt; now &lt;&lt; ' ' &lt;&lt; c &lt;&lt; "\n";</comment>
        <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>y</name> <operator>-</operator> <name>up</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>left</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <name>up</name></expr>;</expr_stmt>
        <comment type="line">//cout &lt;&lt; left &lt;&lt; ' ' &lt;&lt; right &lt;&lt; ' ' &lt;&lt; up &lt;&lt; ' ' &lt;&lt; down &lt;&lt; " | " &lt;&lt; y &lt;&lt; ' ' &lt;&lt; x &lt;&lt; ' ' &lt;&lt; now &lt;&lt; ' ' &lt;&lt; c &lt;&lt; "\n\n";</comment>
        <comment type="line">//cout &lt;&lt; "----------------\n";</comment>
        <if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>mem_y</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>==</operator> <name>mem_x</name></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
    }</block></while>

    <if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>n</name> <operator>*</operator> <name>m</name> <operator>-</operator> <name>k</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>
</unit>
