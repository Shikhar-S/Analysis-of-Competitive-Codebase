<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29087114_62791191.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lli</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(),(x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ve</name></cpp:macro> <cpp:value>vector&lt;lli&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vep</name></cpp:macro> <cpp:value>vector&lt;pair&lt;lli,lli&gt; &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(lli i=0;i&lt;(n);i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<function><type><name>long</name> <name>long</name> <name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>a</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></then></if>
	<return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name><operator>%</operator><name>a</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>bin</name><parameter_list>(<parameter><decl><type><name>long</name> <name>int</name></type> <name><name>a</name><index>[]</index></name></decl></parameter>,<parameter><decl><type><name>long</name> <name>int</name></type> <name>low</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>int</name></type> <name>high</name></decl></parameter>,<parameter><decl><type><name>long</name></type> <name>d</name></decl></parameter>,<parameter><decl><type><name>long</name></type> <name><name>day</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{
	<comment type="line">//cout&lt;&lt;low&lt;&lt;" "&lt;&lt;high&lt;&lt;" "&lt;&lt;d&lt;&lt;"\n";</comment>
	<if>if<condition>(<expr><name>low</name><operator>&gt;</operator><name>high</name></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>long</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>low</name><operator>+</operator><name>high</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>mid</name></expr>]</index></name><operator>&gt;</operator><operator>(</operator><name><name>a</name><index>[<expr><name>low</name></expr>]</index></name><operator>+</operator><name>d</name><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name><name>a</name><index>[<expr><name>mid</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;=</operator><operator>(</operator><name><name>a</name><index>[<expr><name>low</name></expr>]</index></name><operator>+</operator><name>d</name><operator>)</operator><operator>||</operator><name><name>day</name><index>[<expr><name>mid</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&amp;&amp;</operator><name><name>day</name><index>[<expr><name>mid</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><name>mid</name></expr>;</return></block></then>
	<elseif>else <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>mid</name></expr>]</index></name><operator>&gt;</operator><operator>(</operator><name><name>a</name><index>[<expr><name>low</name></expr>]</index></name><operator>+</operator><name>d</name><operator>)</operator><operator>&amp;&amp;</operator><name><name>day</name><index>[<expr><name>mid</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><call><name>bin</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>low</name></expr></argument>,<argument><expr><name>mid</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>day</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if></elseif>
	<else>else
		<block type="pseudo"><return>return <expr><call><name>bin</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>high</name></expr></argument>,<argument><expr><name>d</name><operator>-</operator><name><name>a</name><index>[<expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>low</name></expr>]</index></name></expr></argument>,<argument><expr><name>day</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
}</block></function>
<function><type><name>long</name> <name>long</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<comment type="line">//cout&lt;&lt;a&lt;&lt;" "&lt;&lt;b&lt;&lt;"\n";</comment>
	<if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>b</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>(</operator><call><name>power</name><argument_list>(<argument><expr><operator>(</operator><name>a</name><operator>*</operator><name>a</name><operator>)</operator><operator>%</operator><name>mod</name></expr></argument>,<argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return></block></then></if>
	<return>return <expr><operator>(</operator><operator>(</operator><name>a</name><operator>%</operator><name>mod</name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>power</name><argument_list>(<argument><expr><operator>(</operator><name>a</name><operator>*</operator><name>a</name><operator>)</operator><operator>%</operator><name>mod</name></expr></argument>,<argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
}</block></function>
<comment type="block">/*int subtree(vector&lt;int&gt;v,int sub[],i,j)
{
	if(sub[i]&gt;0)return sub[i];
	for(auto x:v[i])
	{
		if(x!=j)sub[i]+=subtree(v,sub,x,i);
	}
	return sub[i];
}*/</comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{	
	<comment type="block">/*ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);*/</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<comment type="line">//cin&gt;&gt;t;</comment>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>lli</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name><operator>=</operator><call><name>power</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>power</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
