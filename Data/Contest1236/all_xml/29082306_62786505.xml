<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29082306_62786505.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair(a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>push_back(a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>boost</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #x &lt;&lt; " : " &lt;&lt; (x) &lt;&lt; endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(),v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>show</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto i:a) cout&lt;&lt;i&lt;&lt;" ";cout&lt;&lt;endl</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef> 
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef> 
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> , <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>mypair</name>;</typedef>
<typedef>typedef <type><name><name>priority_queue</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>max_heap</name>;</typedef>
<typedef>typedef <type><name><name>priority_queue</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>min_heap</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name><init>=<expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>N</name><init>=<expr><literal type="number">5e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>boost</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>A</name></decl>,<decl><type ref="prev"/><name>B</name></decl>,<decl><type ref="prev"/><name>C</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>A</name><operator>&gt;&gt;</operator><name>B</name><operator>&gt;&gt;</operator><name>C</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">100</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">100</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
				<expr_stmt><expr><name>a</name><operator>=</operator><name>A</name></expr>;</expr_stmt><expr_stmt><expr><name>b</name><operator>=</operator><name>B</name></expr>;</expr_stmt><expr_stmt><expr><name>c</name><operator>=</operator><name>C</name></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>bool</name></type> <name>flag</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<if>if<condition>(<expr><name>a</name><operator>&gt;=</operator><name>i</name> <operator>and</operator> <name>b</name><operator>&gt;=</operator><literal type="number">2</literal><operator>*</operator><name>i</name></expr> )</condition><then>
				<block>{
					<expr_stmt><expr><name>sum</name><operator>+=</operator><literal type="number">3</literal><operator>*</operator><name>i</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>a</name><operator>-=</operator><name>i</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>b</name><operator>-=</operator><literal type="number">2</literal><operator>*</operator><name>i</name></expr>;</expr_stmt>
				}</block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
				<if>if<condition>(<expr><name>b</name><operator>&gt;=</operator><name>j</name> <operator>and</operator> <name>c</name><operator>&gt;=</operator><literal type="number">2</literal><operator>*</operator><name>j</name></expr> )</condition><then>
				<block>{
					<expr_stmt><expr><name>sum</name><operator>+=</operator><literal type="number">3</literal><operator>*</operator><name>j</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>b</name><operator>-=</operator><name>j</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>c</name><operator>-=</operator><literal type="number">2</literal><operator>*</operator><name>j</name></expr>;</expr_stmt>
				}</block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
				<if>if<condition>(<expr><name>flag</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>


			}</block></for>
		}</block></for>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></while>
   	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
