<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29068341_62796185.cpp">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ln</name></cpp:macro>                <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>dat</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>dat.begin(), dat.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>loop</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>to</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>for (int i = 0; i &lt; to; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cont</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>to</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>for (int i = 1; i &lt;= to; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>circ</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>fr</name></type></parameter>, <parameter><type><name>to</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>for (int i = fr; i &lt;= to; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>foreach</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>dat</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>for (__typeof(dat.begin()) i = dat.begin(); i != dat.end(); ++i)</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type>          <name>num</name>;</typedef>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nsz</name> <init>= <expr><literal type="number">3e2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name><name>g</name><index>[<expr><name>nsz</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index><index>[<expr><name>nsz</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ans</name><index>[<expr><name>nsz</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index><index>[<expr><name>nsz</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name> <specifier>inline</specifier></type> <name>calc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>cont</name> <argument_list>(<argument>k1</argument>, <argument>n</argument>)</argument_list></macro> <block>{
		<macro><name>cont</name> <argument_list>(<argument>k2</argument>, <argument>n</argument>)</argument_list></macro> <block>{
			<if>if <condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k1</name></expr>]</index></name> <operator>&gt;</operator> <name><name>ans</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k2</name></expr>]</index></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block>
		
	}</block>
	<return>return <expr><name>cnt</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>cont</name> <argument_list>(<argument>j</argument>, <argument>n</argument>)</argument_list></macro> <block>{
		<if>if <condition>(<expr><name>d</name></expr>)</condition><then> <block>{
			<macro><name>cont</name> <argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
				<expr_stmt><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>++</operator><name>cnt</name></expr>;</expr_stmt>
			}</block>
			<expr_stmt><expr><name>d</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{
				<expr_stmt><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>++</operator><name>cnt</name></expr>;</expr_stmt>
			}</block></for>
			<expr_stmt><expr><name>d</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></else></if>
	}</block>
	<macro><name>cont</name> <argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
		<macro><name>cont</name> <argument_list>(<argument>j</argument>, <argument>n</argument>)</argument_list></macro> <block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
		}</block>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ln</name></expr>;</expr_stmt>
	}</block>
}</block></function></unit>
