<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29087066_62813456.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>for(long long i=a;i&lt;=b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>for(long long i=0;i&lt;a;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fd</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>for(long long i=b;i&gt;=a;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>clr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>memset(x,0,sizeof(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cln</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>memset(x,-1,sizeof(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__</name></cpp:macro>           <cpp:value>printf(" ")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_</name></cpp:macro>            <cpp:value>printf("\n")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_o</name></cpp:macro>           <cpp:value>printf("1\n")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stree</name></cpp:macro>        <cpp:value>long long lft=node&lt;&lt;1,rht=(node&lt;&lt;1)|1,mid=(s+e)&gt;&gt;1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snode</name></cpp:macro>        <cpp:value>long long s,long long e,long long node</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>slft</name></cpp:macro>         <cpp:value>s,mid,lft</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>srht</name></cpp:macro>         <cpp:value>mid+1,e,rht</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sin</name><parameter_list>()</parameter_list></cpp:macro>        <cpp:value>if(S&lt;=s&amp;&amp;e&lt;=E)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sout</name><parameter_list>()</parameter_list></cpp:macro>       <cpp:value>if(S&gt;e||s&gt;E)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro>          <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read</name><parameter_list>()</parameter_list></cpp:macro>       <cpp:value>freopen("in.txt","r",stdin)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>write</name><parameter_list>()</parameter_list></cpp:macro>      <cpp:value>freopen("out.txt","w",stdout)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sfl</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>scanf("%I64d",&amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sfll</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>scanf("%I64d %I64d",&amp;x,&amp;y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sflll</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%I64d %I64d %I64d",&amp;x,&amp;y,&amp;z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pfl</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>printf("%I64d",x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pfll</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>printf("%I64d %I64d",x,y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pflll</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%I64d %I64d %I64d",x,y,z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xx</name></cpp:macro>           <cpp:value>100000</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>,<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type><name><name>vec</name><index>[<expr><literal type="number">500</literal></expr>]</index></name></decl>;</decl_stmt>


<function><name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>m</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <macro><name>fi</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <block>{
       <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><macro><name>fi</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>vec</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>m</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
       <else>else <block type="pseudo"><macro><name>fd</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>vec</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>m</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block>

    <macro><name>fi</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <block>{
       <macro><name>fr</name><argument_list>(<argument>j</argument>,<argument>n</argument>)</argument_list></macro> <block>{
           <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <if>if<condition>(<expr><name>j</name><operator>+</operator><literal type="number">1</literal><operator>==</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>_</name></expr>;</expr_stmt></block></then>
           <else>else <block type="pseudo"><expr_stmt><expr><name>__</name></expr>;</expr_stmt></block></else></if>
       }</block>
    }</block>





    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
