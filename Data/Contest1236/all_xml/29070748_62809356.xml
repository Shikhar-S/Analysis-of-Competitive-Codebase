<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29070748_62809356.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>sx</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>sy</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>c</name><operator>&gt;&gt;</operator><name>d</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sx</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sy</name><index>[<expr><name>d</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>path</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>dir</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>xp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>yp</name><init>=<expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>xn</name><init>=<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>yn</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nowx</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>nowy</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>xp</name><operator>&lt;</operator><name>xn</name><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name>yn</name><operator>&lt;</operator><name>yp</name><operator>)</operator></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>tem</name><init>=<expr><name>yp</name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><operator>!</operator><name><name>sx</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>auto</name></type> <name>o</name><init>=<expr><name><name>sx</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>nowy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name>o</name><operator>!=</operator><name><name>sx</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block>{
                    <if>if<condition>(<expr><operator>*</operator><name>o</name><operator>&lt;</operator><name>tem</name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name>tem</name><operator>=</operator><operator>*</operator><name>o</name></expr>;</expr_stmt></block></then></if>
                }</block></then></if>
            }</block></then></if>
            <if>if<condition>(<expr><operator>(</operator><name>tem</name><operator>-</operator><name>nowy</name><operator>==</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name>nowx</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>dir</name><operator>++</operator></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <if>if<condition>(<expr><name>tem</name><operator>-</operator><name>nowy</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>path</name><operator>=</operator><name>path</name><operator>+</operator><name>tem</name><operator>-</operator><name>nowy</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>nowy</name><operator>=</operator><name>tem</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>xp</name><operator>=</operator><name>nowx</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>tem</name><init>=<expr><name>xn</name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><operator>!</operator><name><name>sy</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>auto</name></type> <name>o</name><init>=<expr><name><name>sy</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>nowx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name>o</name><operator>!=</operator><name><name>sy</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block>{
                    <if>if<condition>(<expr><operator>*</operator><name>o</name><operator>&lt;</operator><name>tem</name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name>tem</name><operator>=</operator><operator>*</operator><name>o</name></expr>;</expr_stmt></block></then></if>
                }</block></then></if>
            }</block></then></if>
            <if>if<condition>(<expr><name>tem</name><operator>-</operator><name>nowx</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>path</name><operator>=</operator><name>path</name><operator>+</operator><name>tem</name><operator>-</operator><name>nowx</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>nowx</name><operator>=</operator><name>tem</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>yp</name><operator>=</operator><name>nowy</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>tem</name><init>=<expr><name>yn</name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><operator>!</operator><name><name>sx</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>auto</name></type> <name>o</name><init>=<expr><name><name>sx</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>nowy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if<condition>(<expr><name>o</name><operator>!=</operator><name><name>sx</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>o</name><operator>--</operator></expr>;</expr_stmt>
                    <if>if<condition>(<expr><operator>*</operator><name>o</name><operator>&gt;</operator><name>tem</name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name>tem</name><operator>=</operator><operator>*</operator><name>o</name></expr>;</expr_stmt></block></then></if>
                }</block></then></if>
            }</block></then></if>
            <comment type="line">//cout&lt;&lt;"NOWY"&lt;&lt;yn&lt;&lt;'\n';</comment>
            <if>if<condition>(<expr><name>nowy</name><operator>-</operator><name>tem</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>path</name><operator>=</operator><name>path</name><operator>+</operator><name>nowy</name><operator>-</operator><name>tem</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>nowy</name><operator>=</operator><name>tem</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>xn</name><operator>=</operator><name>nowx</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>tem</name><init>=<expr><name>xp</name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><operator>!</operator><name><name>sy</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>auto</name></type> <name>o</name><init>=<expr><name><name>sy</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>nowx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if<condition>(<expr><name>o</name><operator>!=</operator><name><name>sy</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>o</name><operator>--</operator></expr>;</expr_stmt>
                    <if>if<condition>(<expr><operator>*</operator><name>o</name><operator>&gt;</operator><name>tem</name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name>tem</name><operator>=</operator><operator>*</operator><name>o</name></expr>;</expr_stmt></block></then></if>
                }</block></then></if>
            }</block></then></if>

            <if>if<condition>(<expr><name>nowx</name><operator>-</operator><name>tem</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>path</name><operator>=</operator><name>path</name><operator>+</operator><name>nowx</name><operator>-</operator><name>tem</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>nowx</name><operator>=</operator><name>tem</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>yn</name><operator>=</operator><name>nowy</name></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="line">//cout&lt;&lt;dir&lt;&lt;' '&lt;&lt;nowx&lt;&lt;' '&lt;&lt;nowy&lt;&lt;' '&lt;&lt;path&lt;&lt;'\n';</comment>
        <expr_stmt><expr><name>dir</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>dir</name><operator>%=</operator><literal type="number">4</literal></expr>;</expr_stmt>
    }</block></while>
    <comment type="line">//cout&lt;&lt;path&lt;&lt;'\n';</comment>
    <if>if<condition>(<expr><name>n</name><operator>*</operator><name>m</name><operator>-</operator><name>k</name><operator>==</operator><name>path</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt></block></else></if>
}</block></function>
</unit>
