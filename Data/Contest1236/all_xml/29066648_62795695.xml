<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29066648_62795695.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast,inline,unroll-loops,fast-math"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>Power</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>o</name></decl>;</decl_stmt>

    <for>for<control>(<init><expr><name>o</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name></expr>;</condition> <incr><expr><name>y</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>o</name> <operator>=</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>o</name> <operator>*</operator> <name>x</name> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>x</name> <operator>*</operator> <name>x</name> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><name>o</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>Power</name><argument_list>(<argument><expr><operator>(</operator><call><name>Power</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>MOD</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>MOD</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
