<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29086794_62785262.cpp"><comment type="line">//%std</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>out</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>fh</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>jp</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>jp</name><operator>&gt;</operator><literal type="char">'9'</literal><operator>||</operator><name>jp</name><operator>&lt;</operator><literal type="char">'0'</literal><operator>)</operator><operator>&amp;&amp;</operator><name>jp</name><operator>!=</operator><literal type="char">'-'</literal></expr>)</condition>
		<block type="pseudo"><expr_stmt><expr><name>jp</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<if>if <condition>(<expr><name>jp</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>fh</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>jp</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	<while>while <condition>(<expr><name>jp</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>jp</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition>
		<block type="pseudo"><expr_stmt><expr><name>out</name><operator>=</operator><name>out</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>jp</name><operator>-</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>jp</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<return>return <expr><name>out</name><operator>*</operator><name>fh</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>T</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>b</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>c</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<while>while<condition>(<expr><name>b</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition>
			<block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="number">3</literal></expr><operator>,</operator><expr><operator>--</operator><name>b</name></expr><operator>,</operator><expr><name>c</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></while>
		<while>while<condition>(<expr><name>a</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition>
			<block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="number">3</literal></expr><operator>,</operator><expr><operator>--</operator><name>a</name></expr><operator>,</operator><expr><name>b</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></while>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
