<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29022614_62784717.cpp"><comment type="line">// Author: Tony5t4rk Time: 2019-10-17 21:36:10 </comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>c</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>a</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <if>if <condition>(<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <if>if <condition>(<expr><literal type="number">2</literal> <operator>*</operator> <name>j</name> <operator>&gt;</operator> <name>c</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
    }</block></for>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
  }</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
