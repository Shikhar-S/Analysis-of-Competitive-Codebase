<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29091538_62804645.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(x.size()))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOI</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = int(a); i &lt;= int(n); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = int(a); i &gt;= int(n); i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((y).find(x) != (y).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>t.begin(),t.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSET</name><parameter_list>(<parameter><type><name>tabl</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(tabl, i, sizeof(tabl))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fixed&lt;&lt;setprecision(y)&lt;&lt;lf(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBG</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #c &lt;&lt; " = " &lt;&lt; c &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Rtime1</name></cpp:macro> <cpp:value>((double)clock()/(double)CLOCKS_PER_SEC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sync</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>


<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>lf</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument> &gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>vvi</name>;</typedef>
<typedef>typedef <type><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>base</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACE</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TRACE</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__f(#__VA_ARGS__, __VA_ARGS__)</cpp:value></cpp:define>
    <function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Arg1</name></parameter>&gt;</parameter_list></template>
    <type><name>void</name></type> <name>__f</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Arg1</name><modifier>&amp;&amp;</modifier></type> <name>arg1</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>name</name> <operator>&lt;&lt;</operator> <literal type="string">" : "</literal> <operator>&lt;&lt;</operator> <name>arg1</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
        <comment type="line">//use cerr if u want to display at the bottom</comment>
    }</block></function>
    <function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Arg1</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template>
    <type><name>void</name></type> <name>__f</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>names</name></decl></parameter>, <parameter><decl><type><name>Arg1</name><modifier>&amp;&amp;</modifier></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>Args</name><modifier>&amp;&amp;</modifier><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>comma</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>names</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><name>comma</name> <operator>-</operator> <name>names</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">" : "</literal> <operator>&lt;&lt;</operator> <name>arg1</name><operator>&lt;&lt;</operator><literal type="string">" | "</literal></expr>;</expr_stmt><expr_stmt><expr><call><name>__f</name><argument_list>(<argument><expr><name>comma</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">2e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lgN</name> <init>= <expr><literal type="number">1e6</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>te</name> <init>= <expr><literal type="number">3e8</literal><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD2</name> <init>= <expr><literal type="number">1299709</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD3</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lf</name></type> <name>pi</name> <init>= <expr><literal type="number">3.141592653589793238462643383</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>IMAX</name> <init>= <expr><literal type="number">4e18</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name> <init>= <expr><literal type="number">3.141592653589793</literal></expr></init></decl>;</decl_stmt>


<using><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
using <name>max_pq</name> <init>= <type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
using <name>min_pq</name> <init>= <type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type></init>;</using> 
<using><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
using <name>OST</name> <init>= <type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>null_type</name></expr></argument>, <argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>rb_tree_tag</name></expr></argument>, <argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{ <if>if<condition>(<expr><name>a</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator><expr><name>y</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> <return>return <expr><name>b</name></expr>;</return>}</block></then></if><decl_stmt><decl><type><name>T</name></type> <name>gc</name><init>=<expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name><operator>%</operator><name>a</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>T</name></type> <name>temp</name></decl>;</decl_stmt><expr_stmt><expr><name>temp</name><operator>=</operator><name>x</name></expr>;</expr_stmt><expr_stmt><expr><name>x</name><operator>=</operator><name>y</name><operator>-</operator><operator>(</operator><name>b</name><operator>/</operator><name>a</name><operator>)</operator><operator>*</operator><name>temp</name></expr>;</expr_stmt><expr_stmt><expr><name>y</name><operator>=</operator><name>temp</name></expr>;</expr_stmt><return>return <expr><name>gc</name></expr>;</return>}</block></function>

<comment type="line">//(a^x)%m</comment>
<function><type><name>ll</name></type> <name>po</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{ <if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{<return>return <expr><literal type="number">1</literal></expr>;</return>}</block></then></if><decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>ll</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>  <while>while<condition>(<expr><name>k</name><operator>&lt;=</operator><name>x</name></expr>)</condition> <block>{<if>if<condition>(<expr><name>x</name><operator>&amp;</operator><name>k</name></expr>)</condition><then><block>{<expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><operator>(</operator><name>ans</name><operator>*</operator><name>a</name><operator>)</operator><operator>%</operator><name>m</name><operator>)</operator></expr>;</expr_stmt>}</block></then></if> <expr_stmt><expr><name>k</name><operator>&lt;&lt;=</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>a</name><operator>*=</operator><name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name><operator>%=</operator><name>m</name></expr>;</expr_stmt> }</block></while><return>return <expr><name>ans</name></expr>;</return> }</block></function> 

<decl_stmt><decl><type><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>tc</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tr</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>



<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <macro><name>FOI</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>k</argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>u</name><operator>&gt;&gt;</operator><name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tr</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tc</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <macro><name>FOI</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>tr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>tr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>FOI</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>m</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>tc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>tc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nu</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nd</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nl</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nr</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>md</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>FOI</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+m</argument>)</argument_list></macro> <block>{
        <if>if<condition>(<expr><name>md</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <if>if<condition>(<expr><name><name>tr</name><index>[<expr><name>nu</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
                <macro><name>FOI</name><argument_list>(<argument>j</argument>, <argument>tr[nu].front()</argument>, <argument>nr</argument>)</argument_list></macro> <block>{
                    <if>if<condition>(<expr><name><name>tc</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>!=</operator> <operator>(</operator><name>nd</name><operator>+</operator><literal type="number">1</literal><operator>-</operator><name>nu</name><operator>)</operator></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">0</literal></expr>;</return>
                    }</block></then></if>
                }</block>
                <decl_stmt><decl><type><name>int</name></type> <name>st</name> <init>= <expr><name><name>tr</name><index>[<expr><name>nu</name></expr>]</index></name><operator>.</operator><call><name>front</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <macro><name>FOI</name><argument_list>(<argument>j</argument>, <argument>tr[nu].front()</argument>, <argument>nr</argument>)</argument_list></macro> <block>{
                    <for>for<control>(<init><decl><type><name>auto</name></type> <name>u</name><range>: <expr><name><name>tc</name><index>[<expr><name>j</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
                        <expr_stmt><expr><name><name>tr</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>pop_back</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></for>
                }</block>
                <expr_stmt><expr><name>nr</name> <operator>=</operator> <name>st</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then></if> 
            <expr_stmt><expr><name>nu</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>md</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <if>if<condition>(<expr><name><name>tc</name><index>[<expr><name>nr</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
                <macro><name>FOI</name><argument_list>(<argument>j</argument>, <argument>tc[nr].front()</argument>, <argument>nd</argument> )</argument_list></macro> <block>{
                    <if>if<condition>(<expr><name><name>tr</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>!=</operator> <operator>(</operator><name>nr</name><operator>+</operator><literal type="number">1</literal><operator>-</operator><name>nl</name><operator>)</operator></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">0</literal></expr>;</return>
                    }</block></then></if>
                }</block>
                                <decl_stmt><decl><type><name>int</name></type> <name>st</name> <init>= <expr><name><name>tc</name><index>[<expr><name>nr</name></expr>]</index></name><operator>.</operator><call><name>front</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <macro><name>FOI</name><argument_list>(<argument>j</argument>, <argument>tc[nr].front()</argument>, <argument>nd</argument> )</argument_list></macro> <block>{
                    <for>for<control>(<init><decl><type><name>auto</name></type> <name>u</name><range>:<expr><name><name>tr</name><index>[<expr><name>j</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
                        <expr_stmt><expr><name><name>tc</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>pop_back</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></for>
                }</block>
                <expr_stmt><expr><name>nd</name> <operator>=</operator> <name>st</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>nr</name><operator>--</operator></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>md</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
            <if>if<condition>(<expr><name><name>tr</name><index>[<expr><name>nd</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
                <macro><name>FOD</name><argument_list>(<argument>j</argument>, <argument>tr[nd].back()</argument>, <argument>nl</argument> )</argument_list></macro> <block>{
                    <if>if<condition>(<expr><name><name>tc</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>!=</operator> <operator>(</operator><name>nd</name><operator>+</operator><literal type="number">1</literal><operator>-</operator><name>nu</name><operator>)</operator></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">0</literal></expr>;</return>
                    }</block></then></if>
                }</block>
                                <decl_stmt><decl><type><name>int</name></type> <name>st</name> <init>= <expr><name><name>tr</name><index>[<expr><name>nd</name></expr>]</index></name><operator>.</operator><call><name>back</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <macro><name>FOD</name><argument_list>(<argument>j</argument>, <argument>tr[nd].back()</argument>, <argument>nl</argument> )</argument_list></macro> <block>{
                    <for>for<control>(<init><decl><type><name>auto</name></type> <name>u</name><range>:<expr><name><name>tc</name><index>[<expr><name>j</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
                        <expr_stmt><expr><name><name>tr</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>pop_front</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></for>
                }</block>
                <expr_stmt><expr><name>nl</name> <operator>=</operator> <name>st</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>nd</name><operator>--</operator></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{
            <if>if<condition>(<expr><name><name>tc</name><index>[<expr><name>nl</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
                <macro><name>FOD</name><argument_list>(<argument>j</argument>, <argument>tc[nl].back()</argument>, <argument>nu</argument> )</argument_list></macro> <block>{
                    <if>if<condition>(<expr><name><name>tr</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>!=</operator> <operator>(</operator><name>nr</name><operator>+</operator><literal type="number">1</literal><operator>-</operator><name>nl</name><operator>)</operator></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">0</literal></expr>;</return>
                    }</block></then></if>
                }</block>
                <decl_stmt><decl><type><name>int</name></type> <name>st</name> <init>= <expr><name><name>tc</name><index>[<expr><name>nl</name></expr>]</index></name><operator>.</operator><call><name>back</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <macro><name>FOD</name><argument_list>(<argument>j</argument>, <argument>tc[nl].back()</argument>, <argument>nu</argument> )</argument_list></macro> <block>{
                    <for>for<control>(<init><decl><type><name>auto</name></type> <name>u</name><range>:<expr><name><name>tr</name><index>[<expr><name>j</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
                        <expr_stmt><expr><name><name>tc</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>pop_front</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></for>
                }</block>
                <expr_stmt><expr><name>nu</name> <operator>=</operator> <name>st</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>nl</name><operator>++</operator></expr>;</expr_stmt>
        }</block></else></if>
        <if>if<condition>(<expr><name>nu</name> <operator>&gt;</operator> <name>nd</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        <if>if<condition>(<expr><name>nl</name> <operator>&gt;</operator> <name>nr</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        <expr_stmt><expr><name>md</name> <operator>=</operator> <operator>(</operator><name>md</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal></expr>;</expr_stmt>
}</block></function></unit>
