<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29028510_62803249.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"O3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro> <cpp:value>push_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>pozL</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pozC</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>fndL</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>linie</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>st</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dr</name> <init>= <expr><name><name>pozL</name><index>[<expr><name>linie</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>st</name> <operator>&lt;=</operator> <name>dr</name></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>st</name> <operator>+</operator> <name>dr</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>pozL</name><index>[<expr><name>linie</name></expr>]</index><index>[<expr><name>mid</name></expr>]</index></name> <operator>&lt;</operator> <name>val</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>st</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <name><name>pozL</name><index>[<expr><name>linie</name></expr>]</index><index>[<expr><name>mid</name></expr>]</index></name></expr><operator>,</operator> <expr><name>dr</name> <operator>=</operator> <name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>fndC</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>coloana</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>st</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dr</name> <init>= <expr><name><name>pozC</name><index>[<expr><name>coloana</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>st</name> <operator>&lt;=</operator> <name>dr</name></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>st</name> <operator>+</operator> <name>dr</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>pozC</name><index>[<expr><name>coloana</name></expr>]</index><index>[<expr><name>mid</name></expr>]</index></name> <operator>&lt;</operator> <name>val</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>st</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <name><name>pozC</name><index>[<expr><name>coloana</name></expr>]</index><index>[<expr><name>mid</name></expr>]</index></name></expr><operator>,</operator> <expr><name>dr</name> <operator>=</operator> <name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>fndLR</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>linie</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>st</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dr</name> <init>= <expr><name><name>pozL</name><index>[<expr><name>linie</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><operator>-</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>st</name> <operator>&lt;=</operator> <name>dr</name></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>st</name> <operator>+</operator> <name>dr</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>pozL</name><index>[<expr><name>linie</name></expr>]</index><index>[<expr><name>mid</name></expr>]</index></name> <operator>&gt;</operator> <name>val</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>dr</name> <operator>=</operator> <name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <name><name>pozL</name><index>[<expr><name>linie</name></expr>]</index><index>[<expr><name>mid</name></expr>]</index></name></expr><operator>,</operator> <expr><name>st</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>fndCR</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>coloana</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>st</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dr</name> <init>= <expr><name><name>pozC</name><index>[<expr><name>coloana</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><operator>-</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>st</name> <operator>&lt;=</operator> <name>dr</name></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>st</name> <operator>+</operator> <name>dr</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>pozC</name><index>[<expr><name>coloana</name></expr>]</index><index>[<expr><name>mid</name></expr>]</index></name> <operator>&gt;</operator> <name>val</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>dr</name> <operator>=</operator> <name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <name><name>pozC</name><index>[<expr><name>coloana</name></expr>]</index><index>[<expr><name>mid</name></expr>]</index></name></expr><operator>,</operator> <expr><name>st</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ll</name></type> <name>puncte</name> <init>= <expr><literal type="number">1LL</literal> <operator>*</operator> <name>n</name> <operator>*</operator> <name>m</name> <operator>-</operator> <name>k</name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pozL</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pozC</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">100000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>pozL</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pozL</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>pozC</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pozC</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>minL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxL</name> <init>= <expr><name>n</name></expr></init></decl>, <decl><type ref="prev"/><name>minC</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxC</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt>
    <comment type="line">// 1 - R, 2 - D, 3 - L, 4 - U</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>minL</name> <operator>&lt;=</operator> <name>maxL</name> <operator>&amp;&amp;</operator> <name>minC</name> <operator>&lt;=</operator> <name>maxC</name></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>stop</name> <init>= <expr><call><name>fndL</name><argument_list>(<argument><expr><name>minL</name></expr></argument>, <argument><expr><name>minC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>stop</name> <operator>!=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal><operator>)</operator></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>maxC</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>maxC</name></expr></argument>, <argument><expr><name>stop</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>puncte</name> <operator>-=</operator> <operator>(</operator><name>maxC</name> <operator>-</operator> <name>minC</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>minL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        }</block></then>
        <elseif>else
            <if>if<condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>stop</name> <init>= <expr><call><name>fndC</name><argument_list>(<argument><expr><name>maxC</name></expr></argument>, <argument><expr><name>minL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name>stop</name> <operator>!=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal><operator>)</operator></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>maxL</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>maxL</name></expr></argument>, <argument><expr><name>stop</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><name>puncte</name> <operator>-=</operator> <operator>(</operator><name>maxL</name> <operator>-</operator> <name>minL</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>maxC</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
            }</block></then></if></elseif>
            <else>else
            <block>{
                <if>if<condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then>
                <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>stop</name> <init>= <expr><call><name>fndLR</name><argument_list>(<argument><expr><name>maxL</name></expr></argument>, <argument><expr><name>maxC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if<condition>(<expr><name>stop</name> <operator>!=</operator> <operator>-</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal><operator>)</operator></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name>minC</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>minC</name></expr></argument>, <argument><expr><name>stop</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    <expr_stmt><expr><name>puncte</name> <operator>-=</operator> <operator>(</operator><name>maxC</name> <operator>-</operator> <name>minC</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>--</operator><name>maxL</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
                }</block></then>
                <else>else
                <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>stop</name> <init>= <expr><call><name>fndCR</name><argument_list>(<argument><expr><name>minC</name></expr></argument>, <argument><expr><name>maxL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if<condition>(<expr><name>stop</name> <operator>!=</operator> <operator>-</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal><operator>)</operator></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name>minL</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>minL</name></expr></argument>, <argument><expr><name>stop</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    <expr_stmt><expr><name>puncte</name> <operator>-=</operator> <operator>(</operator><name>maxL</name> <operator>-</operator> <name>minL</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>minC</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>
    }</block></while>
    <if>if<condition>(<expr><name>puncte</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
