<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29067200_62809607.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>2000000000</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<function><type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block>{<if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><name>f</name></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
    <while>while<condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <return>return <expr><name>f</name> <operator>*</operator> <name>x</name></expr>;</return> 
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dx</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>dy</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>posx</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>posy</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>read</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>m</name> <operator>=</operator> <call><name>read</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>xx</name> <init>= <expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>yy</name> <init>= <expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>posx</name><index>[<expr><name>xx</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>posy</name><index>[<expr><name>yy</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>xx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name><name>posx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>posx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>posx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name><name>posy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>posy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>posy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
}</block></function>
<function><type><name>int</name></type> <name>queryx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>xid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>o</name></decl></parameter>)</parameter_list><block>{
    <if>if <condition>(<expr><name><name>posx</name><index>[<expr><name>xid</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
        <comment type="line">// -&gt;</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>dd</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>posx</name><index>[<expr><name>xid</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>posx</name><index>[<expr><name>xid</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>posx</name><index>[<expr><name>xid</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>dd</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dd</name> <operator>&lt;</operator> <name><name>posx</name><index>[<expr><name>xid</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>posx</name><index>[<expr><name>xid</name></expr>]</index><index>[<expr><name>dd</name></expr>]</index></name> <operator>&lt;=</operator> <name>r</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name><name>posx</name><index>[<expr><name>xid</name></expr>]</index><index>[<expr><name>dd</name></expr>]</index></name></expr>;</return></block></then>
        <else>else <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></else></if>
    }</block></then><else>else <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>dd</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>posx</name><index>[<expr><name>xid</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>posx</name><index>[<expr><name>xid</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>posx</name><index>[<expr><name>xid</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><operator>--</operator><name>dd</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>dd</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dd</name> <operator>&lt;</operator> <name><name>posx</name><index>[<expr><name>xid</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>posx</name><index>[<expr><name>xid</name></expr>]</index><index>[<expr><name>dd</name></expr>]</index></name> <operator>&gt;=</operator> <name>l</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name><name>posx</name><index>[<expr><name>xid</name></expr>]</index><index>[<expr><name>dd</name></expr>]</index></name></expr>;</return></block></then>
        <else>else <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></else></if>
    }</block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>queryy</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>yid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>o</name></decl></parameter>)</parameter_list><block>{
    <if>if <condition>(<expr><name><name>posy</name><index>[<expr><name>yid</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
        <comment type="line">// -&gt;</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>dd</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>posy</name><index>[<expr><name>yid</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>posy</name><index>[<expr><name>yid</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>posy</name><index>[<expr><name>yid</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>dd</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dd</name> <operator>&lt;</operator> <name><name>posy</name><index>[<expr><name>yid</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>posy</name><index>[<expr><name>yid</name></expr>]</index><index>[<expr><name>dd</name></expr>]</index></name> <operator>&lt;=</operator> <name>r</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name><name>posy</name><index>[<expr><name>yid</name></expr>]</index><index>[<expr><name>dd</name></expr>]</index></name></expr>;</return></block></then>
        <else>else <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></else></if>
    }</block></then><else>else <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>dd</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>posy</name><index>[<expr><name>yid</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>posy</name><index>[<expr><name>yid</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>posy</name><index>[<expr><name>yid</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><operator>--</operator><name>dd</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>dd</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dd</name> <operator>&lt;</operator> <name><name>posy</name><index>[<expr><name>yid</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>posy</name><index>[<expr><name>yid</name></expr>]</index><index>[<expr><name>dd</name></expr>]</index></name> <operator>&gt;=</operator> <name>l</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name><name>posy</name><index>[<expr><name>yid</name></expr>]</index><index>[<expr><name>dd</name></expr>]</index></name></expr>;</return></block></then>
        <else>else <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></else></if>
    }</block></else></if>
}</block></function>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>up_bd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>down_bd</name> <init>= <expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>left_bd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>right_bd</name> <init>= <expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init> <condition>;</condition> <incr/>)</control><block>{
        <comment type="line">//cout &lt;&lt; up_bd &lt;&lt; "  " &lt;&lt; down_bd &lt;&lt; "  " &lt;&lt; left_bd &lt;&lt; "  " &lt;&lt; right_bd &lt;&lt; endl;</comment>
        <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>curx</name> <init>= <expr><name>up_bd</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>cury</name> <init>= <expr><name>left_bd</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>curx</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>cury</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cury</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>    <comment type="line">// (0, 0)</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>tary</name> <init>= <expr><name>right_bd</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>tary</name> <operator>&lt;</operator> <name>cury</name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>queryx</name><argument_list>(<argument><expr><name>curx</name></expr></argument>, <argument><expr><name>cury</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tary</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>res</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>tary</name> <operator>=</operator> <name>res</name> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>right_bd</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt></block></then></if>
            <if>if <condition>(<expr><name>tary</name> <operator>&lt;</operator> <name>cury</name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><operator>++</operator><name>up_bd</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>tary</name> <operator>-</operator> <name>cury</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>cnt</name> <operator>+=</operator> <literal type="number">1ll</literal> <operator>*</operator> <operator>(</operator><name>tary</name> <operator>-</operator> <name>cury</name><operator>)</operator></expr>;</expr_stmt></block></then>
            <else>else <block>{
                <if>if <condition>(<expr><name>curx</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name>cury</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block></else></if>
        }</block></then><elseif>else <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>curx</name> <init>= <expr><name>up_bd</name></expr></init></decl>, <decl><type ref="prev"/><name>cury</name> <init>= <expr><name>right_bd</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>tarx</name> <init>= <expr><name>down_bd</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>tarx</name> <operator>&lt;</operator> <name>curx</name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>queryy</name><argument_list>(<argument><expr><name>cury</name></expr></argument>, <argument><expr><name>curx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tarx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>res</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>tarx</name> <operator>=</operator> <name>res</name> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>down_bd</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt></block></then></if>
            <if>if <condition>(<expr><name>tarx</name> <operator>&lt;</operator> <name>curx</name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><operator>--</operator><name>right_bd</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>tarx</name> <operator>-</operator> <name>curx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>cnt</name> <operator>+=</operator> <literal type="number">1ll</literal> <operator>*</operator> <operator>(</operator><name>tarx</name> <operator>-</operator> <name>curx</name><operator>)</operator></expr>;</expr_stmt></block></then>
            <else>else <block>{
                <expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>
        }</block></then></if></elseif><elseif>else <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>curx</name> <init>= <expr><name>down_bd</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>cury</name> <init>= <expr><name>right_bd</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>tary</name> <init>= <expr><name>left_bd</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>tary</name> <operator>&gt;</operator> <name>cury</name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>queryx</name><argument_list>(<argument><expr><name>curx</name></expr></argument>, <argument><expr><name>tary</name></expr></argument>, <argument><expr><name>cury</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>res</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>tary</name> <operator>=</operator> <name>res</name> <operator>+</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>left_bd</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt></block></then></if>
            <if>if <condition>(<expr><name>tary</name> <operator>&gt;</operator> <name>cury</name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">3</literal></expr><operator>,</operator> <expr><operator>--</operator><name>down_bd</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>cury</name> <operator>-</operator> <name>tary</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>cnt</name> <operator>+=</operator> <literal type="number">1ll</literal> <operator>*</operator> <operator>(</operator><name>cury</name> <operator>-</operator> <name>tary</name><operator>)</operator></expr>;</expr_stmt></block></then>
            <else>else <block>{
                <expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>
        }</block></then></if></elseif><else>else <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>curx</name> <init>= <expr><name>down_bd</name></expr></init></decl>, <decl><type ref="prev"/><name>cury</name> <init>= <expr><name>left_bd</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>tarx</name> <init>= <expr><name>up_bd</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>tarx</name> <operator>&gt;</operator> <name>curx</name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>queryy</name><argument_list>(<argument><expr><name>cury</name></expr></argument>, <argument><expr><name>tarx</name></expr></argument>, <argument><expr><name>curx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>res</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>tarx</name> <operator>=</operator> <name>res</name> <operator>+</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>up_bd</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt></block></then></if>
            <if>if <condition>(<expr><name>tarx</name> <operator>&gt;</operator> <name>curx</name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><operator>++</operator><name>left_bd</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>curx</name> <operator>-</operator> <name>tarx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>cnt</name> <operator>+=</operator> <literal type="number">1ll</literal> <operator>*</operator> <operator>(</operator><name>curx</name> <operator>-</operator> <name>tarx</name><operator>)</operator></expr>;</expr_stmt></block></then>
            <else>else <block>{
                <expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>
        }</block></else></if>
        <comment type="line">//cout &lt;&lt; cnt &lt;&lt; endl;</comment>
    }</block></for>
    <if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">1ll</literal> <operator>*</operator> <name>n</name> <operator>*</operator> <name>m</name> <operator>-</operator> <name>k</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
