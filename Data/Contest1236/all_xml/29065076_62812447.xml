<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29065076_62812447.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mxn</name></cpp:macro> <cpp:value>1000010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>db</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldb</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ppb</name></cpp:macro> <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro> <cpp:value>push_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x1</name></cpp:macro> <cpp:value>faqx1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y1</name></cpp:macro> <cpp:value>faqy1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x2</name></cpp:macro> <cpp:value>faqx2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y2</name></cpp:macro> <cpp:value>faqy2</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name><init>=<expr><literal type="number">1e9</literal></expr></init></decl>,<decl><type ref="prev"/><name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>K</name></decl>,<decl><type ref="prev"/><name>sl</name></decl>,<decl><type ref="prev"/><name>fh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>a</name><index>[<expr><name>mxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><name>mxn</name></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>seg</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>lt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LL</name></type> <name>s</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>tr</name><index>[<expr><name>mxn</name><operator>&lt;&lt;</operator><literal type="number">2</literal></expr>]</index></name></decl>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mid</name></cpp:macro> <cpp:value>((l+r)&gt;&gt;1)</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>upd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name><name>tr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>lt</name><operator>+=</operator><name>v</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>tr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>s</name><operator>+=</operator><literal type="number">1ll</literal><operator>*</operator><name>v</name><operator>*</operator><operator>(</operator><name>r</name><operator>-</operator><name>l</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>pushdown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name><name>tr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>lt</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name><name>tr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>lt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>|</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name><name>tr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>lt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>lt</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>
<function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>L</name><operator>&gt;</operator><name>R</name><operator>||</operator><name>l</name><operator>&gt;</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><return>return ;</return></block></then></if>
	<if>if<condition>(<expr><name>L</name><operator>&lt;=</operator><name>l</name><operator>&amp;&amp;</operator><name>r</name><operator>&lt;=</operator><name>R</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>upd</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
	<expr_stmt><expr><call><name>pushdown</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>L</name><operator>&lt;=</operator><name>mid</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>R</name><operator>&gt;</operator><name>mid</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>|</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><name><name>tr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>s</name><operator>=</operator><name><name>tr</name><index>[<expr><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>s</name><operator>+</operator><name><name>tr</name><index>[<expr><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>|</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>s</name></expr>;</expr_stmt>
}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>mid</name></cpp:undef>
<function><type><name>int</name></type> <name>rd</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>sl</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><expr_stmt><expr><name>fh</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>ch</name><operator>&lt;</operator><literal type="char">'0'</literal><operator>||</operator><literal type="char">'9'</literal><operator>&lt;</operator><name>ch</name></expr>)</condition> <block>{<if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fh</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
	<while>while<condition>(<expr><literal type="char">'0'</literal><operator>&lt;=</operator><name>ch</name><operator>&amp;&amp;</operator><name>ch</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>sl</name><operator>=</operator><name>sl</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<return>return <expr><name>sl</name><operator>*</operator><name>fh</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>n</name><operator>=</operator><call><name>rd</name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>m</name><operator>=</operator><call><name>rd</name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>K</name><operator>=</operator><call><name>rd</name><argument_list>()</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>flg</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>K</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>x</name><operator>=</operator><call><name>rd</name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>y</name><operator>=</operator><call><name>rd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>b</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>x</name><operator>=</operator><name>y</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>d</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>flg</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>sx</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>sy</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>ex</name><init>=<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>ey</name><init>=<expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>p</name></decl>;</init><condition>;</condition><incr/>)</control>
	<block>{
		<if>if<condition>(<expr><name>d</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>p</name><operator>=</operator><literal type="number">1e9</literal></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block>{
				<decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if<condition>(<expr><name>it</name><operator>!=</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>p</name><operator>=</operator><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
			}</block></then></if>
			<expr_stmt><expr><name>p</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>ey</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>y</name><operator>==</operator><name>p</name><operator>&amp;&amp;</operator><name>flg</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>flg</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
			<expr_stmt><expr><name>ey</name><operator>=</operator><name>y</name><operator>=</operator><name>p</name></expr>;</expr_stmt><expr_stmt><expr><name>d</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name>d</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>p</name><operator>=</operator><literal type="number">1e9</literal></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>b</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block>{
				<decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><name><name>b</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if<condition>(<expr><name>it</name><operator>!=</operator><name><name>b</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>p</name><operator>=</operator><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
			}</block></then></if>
			<expr_stmt><expr><name>p</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>ex</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>x</name><operator>==</operator><name>p</name><operator>&amp;&amp;</operator><name>flg</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ex</name><operator>=</operator><name>x</name><operator>=</operator><name>p</name></expr>;</expr_stmt><expr_stmt><expr><name>d</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name>d</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>p</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block>{
				<decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if<condition>(<expr><name>it</name><operator>!=</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>p</name><operator>=</operator><operator>(</operator><operator>*</operator><operator>--</operator><name>it</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
			}</block></then></if>
			<expr_stmt><expr><name>p</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>sy</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>-</operator><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>y</name><operator>==</operator><name>p</name><operator>&amp;&amp;</operator><name>flg</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name>sy</name><operator>=</operator><name>y</name><operator>=</operator><name>p</name></expr>;</expr_stmt><expr_stmt><expr><name>d</name><operator>=</operator><literal type="number">4</literal></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<else>else
		<block>{
			<expr_stmt><expr><name>p</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>b</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block>{
				<decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><name><name>b</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if<condition>(<expr><name>it</name><operator>!=</operator><name><name>b</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>p</name><operator>=</operator><operator>(</operator><operator>*</operator><operator>--</operator><name>it</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
			}</block></then></if>
			<expr_stmt><expr><name>p</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>sx</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>x</name><operator>==</operator><name>p</name><operator>&amp;&amp;</operator><name>flg</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>sx</name><operator>=</operator><name>x</name><operator>=</operator><name>p</name></expr>;</expr_stmt><expr_stmt><expr><name>d</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><name>flg</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></for>
	<if>if<condition>(<expr><name><name>tr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>s</name><operator>==</operator><literal type="number">1ll</literal><operator>*</operator><name>n</name><operator>*</operator><name>m</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
