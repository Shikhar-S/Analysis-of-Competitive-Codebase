<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29074379_62812238.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mk</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>nxt</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pre</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>M</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>r</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>l</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>f</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>g</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name><name>r</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> 
				<block type="pseudo"><expr_stmt><expr><name><name>r</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>
		}</block></then></if>
		<if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name><name>l</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name><name>l</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>
		}</block></then></if>
	}</block></for>
	<if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>m</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><call><name><name>M</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>M</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name><name>M</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>f</name><index>[<expr><name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name><name>M</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>m</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><call><name><name>M</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>M</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name><name>M</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>g</name><index>[<expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>stop</name> <init>= <expr><name><name>f</name><index>[<expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>stop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name><name>l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>max</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>stop</name> <init>= <expr><name><name>g</name><index>[<expr><name><name>l</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>max</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>stop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name></expr>;</expr_stmt>
}</block></function>

</unit>
