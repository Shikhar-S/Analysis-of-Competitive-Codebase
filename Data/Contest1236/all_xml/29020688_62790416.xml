<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29020688_62790416.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name>M</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<function><type><name>long</name> <name>long</name></type> <name>sqa</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name>n</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then>
	<block>{
		<return>return <expr><operator>(</operator><call><name>sqa</name><argument_list>(<argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>num</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ret</name> <init>= <expr><call><name>sqa</name><argument_list>(<argument><expr><name>n</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><operator>(</operator><name>ret</name> <operator>*</operator> <name>ret</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name> <operator>&gt;&gt;</operator> <name>M</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>res</name> <init>= <expr><operator>(</operator><call><name>sqa</name><argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>mod</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>mod</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>sqa</name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
