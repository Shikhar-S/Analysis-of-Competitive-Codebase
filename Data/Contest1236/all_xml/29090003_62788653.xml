<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29090003_62788653.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>Q</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>pow</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>__pow</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>m</name></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>m</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>pow</name> <operator>*=</operator> <name>__pow</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>pow</name> <operator>%=</operator> <name>Q</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>__pow</name> <operator>*=</operator> <name>__pow</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>__pow</name> <operator>%=</operator> <name>Q</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>m</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name>pow</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>pow</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>pow</name> <operator>+=</operator> <name>Q</name></expr>;</expr_stmt></block></then></if>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>__ans</name> <init>= <expr><name>pow</name></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>n</name></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>*=</operator> <name>__ans</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>ans</name> <operator>%=</operator> <name>Q</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>__ans</name> <operator>*=</operator> <name>__ans</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>__ans</name> <operator>%=</operator> <name>Q</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
