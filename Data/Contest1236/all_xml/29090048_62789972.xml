<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29090048_62789972.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name> <name>(</name><cpp:literal>"O3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>zak</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e3</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>, <decl><type ref="prev"/><name>M</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>, <decl><type ref="prev"/><name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>zak</name>
    <name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>out</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>now</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>mov</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>cnt</name> <init>= <expr><name>n</name> <operator>*</operator> <name>n</name></expr></init></decl>, <decl><type ref="prev"/><name>ptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>cnt</name><operator>--</operator></expr>)</condition><block>{
<comment type="line">//        cout &lt;&lt; ptr &lt;&lt; " " &lt;&lt; now &lt;&lt; " ";</comment>
        <expr_stmt><expr><name><name>out</name><index>[<expr><name>ptr</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>now</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>mov</name></expr>;</expr_stmt>
<comment type="line">//        cout &lt;&lt; ptr &lt;&lt; " " &lt;&lt; now &lt;&lt; "\n";</comment>
        <if>if<condition>(<expr><name>ptr</name> <operator>==</operator> <name>n</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>ptr</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>mov</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name>ptr</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>mov</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block></while>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <range>: <expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control><block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>
</unit>
