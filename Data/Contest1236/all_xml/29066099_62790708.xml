<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29066099_62790708.cpp"><comment type="block">/*
Author: QAQAutomaton
LANG: C++
PROG: C.cpp
Mail: lk@qaq-am.com
Blog: https://www.qaq-am.com/
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr,__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name></cpp:macro> <cpp:value>printf("Passing [%s] in LINE %d\n",__FUNCTION__,__LINE__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Debug</name></cpp:macro> <cpp:value>debug("Passing [%s] in LINE %d\n",__FUNCTION__,__LINE__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<decl_stmt><decl><type><name>int</name></type> <name>inf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name><init>=<expr><literal type="number">1e-8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pi</name><init>=<expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>int</name></type> <name>chkmin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>a</name><operator>&gt;</operator><name>b</name></expr>?</condition><then><expr><name>a</name><operator>=</operator><name>b</name></expr></then></ternary></expr><operator>,</operator><expr><literal type="number">1</literal><operator>:</operator><literal type="number">0</literal></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>int</name></type> <name>chkmax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>a</name><operator>&lt;</operator><name>b</name></expr>?</condition><then><expr><name>a</name><operator>=</operator><name>b</name></expr></then></ternary></expr><operator>,</operator><expr><literal type="number">1</literal><operator>:</operator><literal type="number">0</literal></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>T</name></type> <name>sqr</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>a</name><operator>*</operator><name>a</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>T</name></type> <name>mmin</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>a</name><operator>&lt;</operator><name>b</name></expr>?</condition><then><expr><name>a</name></expr></then><else>:<expr><name>b</name></expr></else></ternary></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>T</name></type> <name>mmax</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>a</name><operator>&gt;</operator><name>b</name></expr>?</condition><then><expr><name>a</name></expr></then><else>:<expr><name>b</name></expr></else></ternary></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>T</name></type> <name>aabs</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>a</name><operator>&lt;</operator><literal type="number">0</literal></expr>?</condition><then><expr><operator>-</operator><name>a</name></expr></then><else>:<expr><name>a</name></expr></else></ternary></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>int</name></type> <name>dcmp</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>a</name><operator>&gt;</operator><name>b</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>int</name> <modifier>*</modifier></type><name>a</name></parameter>&gt;</parameter_list></template><type><name>int</name></type> <name>cmp_a</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>&lt;</operator><name><name>a</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</return>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min</name></cpp:macro> <cpp:value>mmin</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max</name></cpp:macro> <cpp:value>mmax</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>abs</name></cpp:macro> <cpp:value>aabs</cpp:value></cpp:define>
<struct>struct <name>__INIT__</name><block>{<public type="default">
	<constructor><name>__INIT__</name><parameter_list>()</parameter_list><block>{
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inf</name></expr></argument>,<argument><expr><literal type="number">0x3f</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>inf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
</public>}</block><decl><name>__INIT___</name></decl>;</struct>
<namespace>namespace <name>io</name> <block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>SIZE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>ibuf</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>, <modifier>*</modifier><decl><type ref="prev"/><name>iS</name></decl>, <modifier>*</modifier><decl><type ref="prev"/><name>iT</name></decl>, <decl><type ref="prev"/><name><name>obuf</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>, <modifier>*</modifier><decl><type ref="prev"/><name>oS</name> <init>= <expr><name>obuf</name></expr></init></decl>, <modifier>*</modifier><decl><type ref="prev"/><name>oT</name> <init>= <expr><name>oS</name> <operator>+</operator> <name>SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name><name>qu</name><index>[<expr><literal type="number">55</literal></expr>]</index></name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>f</name></decl>, <decl><type ref="prev"/><name>qr</name></decl>;</decl_stmt>
	<comment type="line">// getchar</comment>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gc</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(iS == iT ? (iT = (iS = ibuf) + fread (ibuf, 1, SIZE, stdin), (iS == iT ? EOF : *iS ++)) : *iS ++)</cpp:value></cpp:define>
	<comment type="line">// print the remaining part</comment>
	<function><specifier>inline</specifier> <type><name>void</name></type> <name>flush</name> <parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>fwrite</name> <argument_list>(<argument><expr><name>obuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>oS</name> <operator>-</operator> <name>obuf</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>oS</name> <operator>=</operator> <name>obuf</name></expr>;</expr_stmt>
	}</block></function>
	<comment type="line">// putchar</comment>
	<function><specifier>inline</specifier> <type><name>void</name></type> <name>putc</name> <parameter_list>(<parameter><decl><type><name>char</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><operator>*</operator><name>oS</name> <operator>++</operator> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>oS</name> <operator>==</operator> <name>oT</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></function>
	<comment type="line">// input a signed integer</comment>
	<function><specifier>inline</specifier> <type><name>bool</name></type> <name>read</name> <parameter_list>(<parameter><decl><type><name>signed</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{
		<for>for <control>(<init><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <call><name>gc</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>gc</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then><elseif>else <if>if<condition>(<expr><name>c</name><operator>==</operator><name>EOF</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></elseif></if></block></for>
		<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>gc</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt></block></for> <expr_stmt><expr><name>x</name> <operator>*=</operator> <name>f</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	}</block></function>

	<function><specifier>inline</specifier> <type><name>bool</name></type> <name>read</name> <parameter_list>(<parameter><decl><type><name>long</name> <name>long</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{
		<for>for <control>(<init><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <call><name>gc</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>gc</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then><elseif>else <if>if<condition>(<expr><name>c</name><operator>==</operator><name>EOF</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></elseif></if></block></for>
		<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>gc</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt></block></for> <expr_stmt><expr><name>x</name> <operator>*=</operator> <name>f</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	}</block></function>
	<function><specifier>inline</specifier> <type><name>bool</name></type> <name>read</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>x</name><operator>=</operator><call><name>gc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>x</name><operator>!=</operator><name>EOF</name></expr>;</return>
	}</block></function>
	<function><specifier>inline</specifier> <type><name>bool</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{
		<while>while<condition>(<expr><operator>(</operator><operator>*</operator><name>x</name><operator>=</operator><call><name>gc</name><argument_list>()</argument_list></call><operator>)</operator><operator>==</operator><literal type="char">'\n'</literal> <operator>||</operator> <operator>*</operator><name>x</name><operator>==</operator><literal type="char">' '</literal><operator>||</operator><operator>*</operator><name>x</name><operator>==</operator><literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><if>if<condition>(<expr><operator>*</operator><name>x</name><operator>==</operator><name>EOF</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></while>
		<while>while<condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>x</name><operator>==</operator><literal type="char">'\n'</literal><operator>||</operator><operator>*</operator><name>x</name><operator>==</operator><literal type="char">' '</literal><operator>||</operator><operator>*</operator><name>x</name><operator>==</operator><literal type="char">'\r'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><expr_stmt><expr><operator>*</operator><operator>(</operator><operator>++</operator><name>x</name><operator>)</operator><operator>=</operator><call><name>gc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
		<expr_stmt><expr><operator>*</operator><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	}</block></function>
	<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>,<parameter><type><name>typename</name> <modifier>...</modifier></type><name>B</name></parameter>&gt;</parameter_list></template>
	<specifier>inline</specifier> <type><name>bool</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>A</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>B</name> <modifier>&amp;</modifier><modifier>...</modifier></type><name>y</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><call><name>read</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>read</name><argument_list>(<argument><expr><name>y</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<comment type="line">// print a signed integer</comment>
	<function><specifier>inline</specifier> <type><name>bool</name></type> <name>write</name> <parameter_list>(<parameter><decl><type><name>signed</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> <if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>x</name> <operator>=</operator> <operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>
		<while>while <condition>(<expr><name>x</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name><name>qu</name><index>[<expr><operator>++</operator> <name>qr</name></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="char">'0'</literal></expr><operator>,</operator>  <expr><name>x</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block></while>
		<while>while <condition>(<expr><name>qr</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><name><name>qu</name><index>[<expr><name>qr</name> <operator>--</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></function>

	<function><specifier>inline</specifier> <type><name>bool</name></type> <name>write</name> <parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> <if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>x</name> <operator>=</operator> <operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>
		<while>while <condition>(<expr><name>x</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name><name>qu</name><index>[<expr><operator>++</operator> <name>qr</name></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="char">'0'</literal></expr><operator>,</operator>  <expr><name>x</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block></while>
		<while>while <condition>(<expr><name>qr</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><name><name>qu</name><index>[<expr><name>qr</name> <operator>--</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></function>
	<function><specifier>inline</specifier> <type><name>bool</name></type> <name>write</name> <parameter_list>(<parameter><decl><type><name>char</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></function>
	<function><specifier>inline</specifier> <type><name>bool</name></type> <name>write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{
		<while>while<condition>(<expr><operator>*</operator><name>x</name></expr>)</condition><block>{<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><operator>*</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><operator>++</operator><name>x</name></expr>;</expr_stmt>}</block></while>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></function>
	<function><specifier>inline</specifier> <type><name>bool</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{
		<while>while<condition>(<expr><operator>*</operator><name>x</name></expr>)</condition><block>{<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><operator>*</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><operator>++</operator><name>x</name></expr>;</expr_stmt>}</block></while>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></function>
	<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>,<parameter><type><name>typename</name> <modifier>...</modifier></type><name>B</name></parameter>&gt;</parameter_list></template>
	<specifier>inline</specifier> <type><name>bool</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>A</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>B</name> <modifier>...</modifier></type><name>y</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><call><name>write</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>||</operator><call><name>write</name><argument_list>(<argument><expr><name>y</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<comment type="line">//no need to call flush at the end manually!</comment>
	<struct>struct <name>Flusher_</name> <block>{<public type="default"><destructor><name>~<name>Flusher_</name></name><parameter_list>()</parameter_list><block>{<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></destructor></public>}</block><decl><name>io_flusher_</name></decl>;</struct>
}</block></namespace>
<using>using <name><name>io</name> <operator>::</operator> <name>read</name></name>;</using>
<using>using <name><name>io</name> <operator>::</operator> <name>putc</name></name>;</using>
<using>using <name><name>io</name> <operator>::</operator> <name>write</name></name>;</using>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">305</literal></expr>]</index><index>[<expr><literal type="number">305</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>QAQAutoMaton</name></cpp:ifdef> 
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"C.in"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"C.out"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>n</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>m</name><init>=<expr><name>n</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>t</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><operator>++</operator><name>t</name></expr>;</expr_stmt></block></for>
		}</block></for>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><operator>++</operator><name>t</name></expr>;</expr_stmt></block></for>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><name>m</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><operator>++</operator><name>t</name></expr>;</expr_stmt></block></for>
		}</block></for>
	}</block></then>
	<else>else<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>m</name><init>=<expr><name>n</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>t</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><operator>++</operator><name>t</name></expr>;</expr_stmt></block></for>
		}</block></for>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><name>m</name></expr>]</index></name><operator>=</operator><operator>++</operator><name>t</name></expr>;</expr_stmt></block></for>
		}</block></for>
	}</block></else></if>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><ternary><condition><expr><name>j</name><operator>==</operator><name>n</name></expr>?</condition><then><expr><literal type="char">'\n'</literal></expr></then><else>:<expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
