<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29051248_62810033.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include> 
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using> 
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro>              <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro>              <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro>             <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>              <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro>              <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro>             <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro>              <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mii</name></cpp:macro>             <cpp:value>map&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pqb</name></cpp:macro>             <cpp:value>priority_queue&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pqs</name></cpp:macro>             <cpp:value>priority_queue&lt;int,vi,greater&lt;int&gt; &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MX</name></cpp:macro>              <cpp:value>200005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro>             <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro>             <cpp:value>1e18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ps</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>fixed&lt;&lt;setprecision(y)&lt;&lt;x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mk</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>type *arr=new type[n];</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>w</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>            <cpp:value>int x; cin&gt;&gt;x; while(x--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pw</name><parameter_list>(<parameter><type><name>b</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>pow(b,p) + 0.1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>mt19937</name></type>                 <name>rng</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<typedef>typedef <type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>null_type</name></expr></argument>, <argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>rb_tree_tag</name></expr></argument>, <argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type> <name>pbds</name>;</typedef>

<function><type><name>void</name></type> <name>c_p_c</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<decl_stmt><decl><type><name>vi</name></type> <name><name>row</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vi</name></type> <name><name>col</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>c_p_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>cover</name> <init>= <expr><name>n</name><operator>*</operator><name>m</name><operator>-</operator><name>k</name></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><name>k</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>beg_row</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>beg_col</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>end_row</name><init>=<expr><name>n</name></expr></init></decl>,<decl><type ref="prev"/><name>end_col</name><init>=<expr><name>m</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>beg_row_last</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>beg_col_last</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>end_row_last</name><init>=<expr><name>n</name></expr></init></decl>,<decl><type ref="prev"/><name>end_col_last</name><init>=<expr><name>m</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>done</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><name>beg_row</name><operator>&lt;=</operator><name>end_row</name> <operator>&amp;&amp;</operator> <name>beg_col</name><operator>&lt;=</operator><name>end_col</name></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>turn</name></decl>;</decl_stmt>

            <if>if<condition>(<expr><name>it</name><operator>==</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>&gt;</operator><name>end_col</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>turn</name> <operator>=</operator> <name>end_col</name></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>turn</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><name>done</name> <operator>+=</operator> <name>turn</name><operator>-</operator><name>j</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>j</name><operator>=</operator><name>turn</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>end_col</name><operator>=</operator><name>turn</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>beg_row</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then>

        <elseif>else <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>col</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>turn</name></decl>;</decl_stmt>

            <if>if<condition>(<expr><name>it</name><operator>==</operator><name><name>col</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>&gt;</operator><name>end_row</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>turn</name> <operator>=</operator> <name>end_row</name></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>turn</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><name>done</name> <operator>+=</operator> <name>turn</name><operator>-</operator><name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name> <operator>=</operator> <name>turn</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>end_row</name> <operator>=</operator> <name>turn</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>end_col</name><operator>--</operator></expr>;</expr_stmt>
        }</block></then></if></elseif>

        <elseif>else <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>turn</name></decl>;</decl_stmt>

            <if>if<condition>(<expr><name>it</name><operator>==</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>--</operator><name>it</name><operator>)</operator><operator>&lt;</operator><name>beg_col</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>turn</name> <operator>=</operator> <name>beg_col</name></expr>;</expr_stmt>
            }</block></then>

            <else>else
            <block>{
                <expr_stmt><expr><name>turn</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><name>done</name> <operator>+=</operator> <name>j</name><operator>-</operator><name>turn</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>j</name> <operator>=</operator> <name>turn</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>beg_col</name> <operator>=</operator> <name>turn</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>end_row</name><operator>--</operator></expr>;</expr_stmt>
        }</block></then></if></elseif>

        <elseif>else <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>col</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>turn</name></decl>;</decl_stmt>

            <if>if<condition>(<expr><name>it</name><operator>==</operator><name><name>col</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>--</operator><name>it</name><operator>)</operator><operator>&lt;</operator><name>beg_row</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>turn</name> <operator>=</operator> <name>beg_row</name></expr>;</expr_stmt>
            }</block></then>

            <else>else
            <block>{
                <expr_stmt><expr><name>turn</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><name>done</name> <operator>+=</operator> <name>i</name> <operator>-</operator> <name>turn</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name> <operator>=</operator> <name>turn</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>beg_row</name> <operator>=</operator> <name>turn</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>beg_col</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then></if></elseif></if>

        <if>if<condition>(<expr><name>beg_row</name><operator>==</operator><name>beg_row_last</name> <operator>&amp;&amp;</operator> <name>beg_col</name><operator>==</operator><name>beg_col_last</name> <operator>&amp;&amp;</operator> <name>end_col</name><operator>==</operator><name>end_col_last</name> <operator>&amp;&amp;</operator> <name>end_row</name><operator>==</operator><name>end_row_last</name></expr>)</condition><then>
        <block>{
            <break>break;</break>
        }</block></then>

        <else>else
        <block>{
            <expr_stmt><expr><name>beg_row_last</name><operator>=</operator><name>beg_row</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>beg_col_last</name><operator>=</operator><name>beg_col</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>end_row_last</name><operator>=</operator><name>end_row</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>end_col_last</name><operator>=</operator><name>end_col</name></expr>;</expr_stmt>
        }</block></else></if>
        <comment type="block">/*cout&lt;&lt;done&lt;&lt;'\n';

        if(done==5)
            cout&lt;&lt;beg_row&lt;&lt;' '&lt;&lt;end_row&lt;&lt;' '&lt;&lt;beg_col&lt;&lt;' '&lt;&lt;end_col&lt;&lt;'\n';*/</comment>
    }</block></while>

    <if>if<condition>(<expr><name>done</name><operator>==</operator><name>cover</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal></expr>;</expr_stmt></block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt></block></else></if>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
