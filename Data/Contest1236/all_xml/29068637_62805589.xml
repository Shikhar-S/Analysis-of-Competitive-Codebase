<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29068637_62805589.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>row</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>col</name><argument_list>(<argument><expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>}</block></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>x_from</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>x_to</name> <init>= <expr><name>n</name></expr></init></decl>, <decl><type ref="prev"/><name>y_from</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>y_to</name> <init>= <expr><name>m</name></expr></init></decl>, <decl><type ref="prev"/><name>direct</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{
<comment type="line">//		cerr &lt;&lt; x_from &lt;&lt; ' ' &lt;&lt; x_to &lt;&lt; ' ' &lt;&lt; y_from &lt;&lt; ' ' &lt;&lt; y_to &lt;&lt; '\n';</comment>
		<if>if <condition>(<expr><name>y_from</name> <operator>&gt;</operator> <name>y_to</name></expr>)</condition><then> <block>{
			<break>break;</break>
		}</block></then></if>
		<if>if <condition>(<expr><name><name>row</name><index>[<expr><name>x_from</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>y_to</name> <operator>-</operator> <name>y_from</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>x_from</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>x_from</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>y_from</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>row</name><index>[<expr><name>x_from</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>row</name><index>[<expr><name>x_from</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>y_to</name> <operator>-</operator> <name>y_from</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><name>y_to</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>y_to</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>x_from</name></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>y_to</name> <operator>-</operator> <name>y_from</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
		<if>if <condition>(<expr><name>x_from</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>n</name> <operator>||</operator> <call><name><name>a</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><block>{<expr><name>x_from</name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><name>y_to</name></expr>}</block></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<break>break;</break>
		}</block></then></if>
		<expr_stmt><expr><name>x_from</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<comment type="line">//cerr &lt;&lt; x_from &lt;&lt; ' ' &lt;&lt; x_to &lt;&lt; ' ' &lt;&lt; y_from &lt;&lt; ' ' &lt;&lt; y_to &lt;&lt; '\n';</comment>
		<if>if <condition>(<expr><name>x_from</name> <operator>&gt;</operator> <name>x_to</name></expr>)</condition><then> <block>{
			<break>break;</break>
		}</block></then></if>
		<if>if <condition>(<expr><name><name>col</name><index>[<expr><name>y_to</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>x_to</name> <operator>-</operator> <name>x_from</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>y_to</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>col</name><index>[<expr><name>y_to</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x_from</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>col</name><index>[<expr><name>y_to</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>col</name><index>[<expr><name>y_to</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>x_to</name> <operator>-</operator> <name>x_from</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><name>x_to</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>x_to</name></expr></argument>, <argument><expr><name><name>col</name><index>[<expr><name>y_to</name></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>x_to</name> <operator>-</operator> <name>x_from</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
		<if>if <condition>(<expr><name>y_to</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <call><name><name>a</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><block>{<expr><name>x_to</name></expr>, <expr><name>y_to</name> <operator>-</operator> <literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<break>break;</break>
		}</block></then></if>
		<expr_stmt><expr><name>y_to</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<comment type="line">//cerr &lt;&lt; x_from &lt;&lt; ' ' &lt;&lt; x_to &lt;&lt; ' ' &lt;&lt; y_from &lt;&lt; ' ' &lt;&lt; y_to &lt;&lt; '\n';</comment>
		<if>if <condition>(<expr><name>y_from</name> <operator>&gt;</operator> <name>y_to</name></expr>)</condition><then> <block>{
			<break>break;</break>
		}</block></then></if>
		<if>if <condition>(<expr><name><name>row</name><index>[<expr><name>x_to</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>y_to</name> <operator>-</operator> <name>y_from</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>x_to</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>x_to</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>y_to</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>row</name><index>[<expr><name>x_to</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>pos</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>y_to</name> <operator>-</operator> <name>y_from</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
			}</block></then> <else>else <block>{
				<expr_stmt><expr><name>y_from</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>y_from</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>x_to</name></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>y_to</name> <operator>-</operator> <name>y_from</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
		<if>if <condition>(<expr><name>x_to</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <call><name><name>a</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><block>{<expr><name>x_to</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>y_from</name></expr>}</block></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<break>break;</break>
		}</block></then></if>
		<expr_stmt><expr><name>x_to</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<comment type="line">//	cerr &lt;&lt; x_from &lt;&lt; ' ' &lt;&lt; x_to &lt;&lt; ' ' &lt;&lt; y_from &lt;&lt; ' ' &lt;&lt; y_to &lt;&lt; '\n';</comment>
		<if>if <condition>(<expr><name>x_from</name> <operator>&gt;</operator> <name>x_to</name></expr>)</condition><then> <block>{
			<break>break;</break>
		}</block></then></if>
		<if>if <condition>(<expr><name><name>col</name><index>[<expr><name>y_from</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>x_to</name> <operator>-</operator> <name>x_from</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>y_from</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>col</name><index>[<expr><name>y_from</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x_to</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>col</name><index>[<expr><name>y_from</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>pos</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>x_to</name> <operator>-</operator> <name>x_from</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><name>x_from</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>x_from</name></expr></argument>, <argument><expr><name><name>col</name><index>[<expr><name>y_from</name></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>x_to</name> <operator>-</operator> <name>x_from</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
		<if>if <condition>(<expr><name>y_from</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>m</name> <operator>||</operator> <call><name><name>a</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><block>{<expr><name>x_from</name></expr>, <expr><name>y_from</name> <operator>+</operator> <literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<break>break;</break>
		}</block></then></if>
		<expr_stmt><expr><name>y_from</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></while>	
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>sum</name> <operator>+</operator> <name>k</name> <operator>==</operator> <literal type="number">1LL</literal> <operator>*</operator> <name>n</name> <operator>*</operator> <name>m</name></expr> ?</condition><then> <expr><literal type="string">"Yes"</literal></expr> </then><else>: <expr><literal type="string">"No"</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
