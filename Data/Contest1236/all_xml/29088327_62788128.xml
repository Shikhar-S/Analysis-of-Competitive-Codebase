<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29088327_62788128.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt> <comment type="line">// 998244353; // 998244853;</comment>

<struct><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
struct <name>modular</name> <block>{<public type="default">
    <constructor><specifier>constexpr</specifier> <name>modular</name><parameter_list>()</parameter_list> <member_init_list>: <call><name>val</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></member_init_list><block>{}</block></constructor>
    <constructor><specifier>constexpr</specifier> <name>modular</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_m</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>val</name><argument_list>(<argument><expr><name><name>_m</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
    <constructor><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <specifier>constexpr</specifier> <name>modular</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>U</name><modifier>&amp;</modifier></type> <name>_r</name> <init>= <expr><call><name>U</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>val</name> <operator>=</operator> <ternary><condition><expr><operator>-</operator><name>MOD</name> <operator>&lt;=</operator> <name>_r</name> <operator>&amp;&amp;</operator> <name>_r</name> <operator>&lt;</operator> <name>MOD</name></expr> ?</condition><then> <expr><name>_r</name></expr></then><else>: <expr><name>_r</name> <operator>%</operator> <name>MOD</name></expr></else></ternary></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><name>val</name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt> }</block></then></if> }</block></constructor>
    <function type="operator"><type><specifier>const</specifier> <name>T</name></type> <name>operator<name>()</name></name><parameter_list>()</parameter_list> <block>{ <return>return <expr><name>val</name></expr>;</return> }</block></function>
    <function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <specifier>explicit</specifier> <name>operator <name>U</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></cast></expr>;</return> }</block></function>
    <function type="operator"><type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>operator<name>+=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_m</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><operator>(</operator><name>val</name> <operator>+=</operator> <name><name>_m</name><operator>.</operator><name>val</name></name><operator>)</operator> <operator>&gt;=</operator> <name>MOD</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>val</name> <operator>-=</operator> <name>MOD</name></expr>;</expr_stmt> }</block></then></if> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
    <function type="operator"><type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>operator<name>-=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_m</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><operator>(</operator><name>val</name> <operator>-=</operator> <name><name>_m</name><operator>.</operator><name>val</name></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><name>val</name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt> }</block></then></if> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
    <function type="operator"><type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>operator<name>*=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_m</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></cast> <operator>*</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name><name>_m</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call><operator>.</operator><name>val</name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
    <function type="operator"><type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>operator<name>/=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_m</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>T</name></type> <name>a</name> <init>= <expr><name><name>_m</name><operator>.</operator><name>val</name></name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name>MOD</name></expr></init></decl>, <decl><type ref="prev"/><name>u</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>a</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>T</name></type> <name>q</name> <init>= <expr><name>b</name> <operator>/</operator> <name>a</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>b</name> <operator>-=</operator> <name>q</name> <operator>*</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>u</name> <operator>-=</operator> <name>q</name> <operator>*</operator> <name>v</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        }</block></while> <return>return <expr><operator>*</operator><name>this</name> <operator>*=</operator> <name>u</name></expr>;</return> }</block></function>
    <function type="operator"><type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>operator <name>=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_m</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>_m</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
    <function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>operator<name>+=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>U</name><modifier>&amp;</modifier></type> <name>_r</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>*</operator><name>this</name> <operator>+=</operator> <call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_r</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
    <function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>operator<name>-=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>U</name><modifier>&amp;</modifier></type> <name>_r</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>*</operator><name>this</name> <operator>-=</operator> <call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_r</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
    <function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>operator<name>*=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>U</name><modifier>&amp;</modifier></type> <name>_r</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>*</operator><name>this</name> <operator>*=</operator> <call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_r</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
    <function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>operator<name>/=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>U</name><modifier>&amp;</modifier></type> <name>_r</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>*</operator><name>this</name> <operator>/=</operator> <call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_r</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function> 
    <function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>operator <name>=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>U</name><modifier>&amp;</modifier></type> <name>_r</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_r</name></expr></argument>)</argument_list></call><operator>.</operator><name>val</name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
    <function type="operator"><type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>-</name></name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>-</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>    
    <template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list> <friend>friend <function_decl type="operator"><type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl></friend></template>
    <friend>friend <function type="operator"><type><name><name>std</name><operator>::</operator><name>istream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>istream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_m</name></decl></parameter>)</parameter_list> <block>{ <name>os</name> <expr_stmt><expr><operator>&gt;&gt;</operator> <name><name>_m</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt> <name>_m</name> <expr_stmt><expr><operator>*=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <return>return <expr><name>os</name></expr>;</return> }</block></function></friend>
    <friend>friend <function type="operator"><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_m</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>_m</name><operator>.</operator><name>val</name></name></expr>;</return> }</block></function></friend>
    <function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template>
    <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>exp</name><parameter_list>(<parameter><decl><type><name>U</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>b</name> <init>= <expr><name>val</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>e</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">1</literal><operator>/</operator><name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> }</block></then></if>
        <for>for <control>(<init>;</init> <condition><expr><name>e</name></expr>;</condition> <incr><expr><name>e</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name>e</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><name>res</name> <operator>*=</operator> <name>b</name></expr>;</expr_stmt> }</block></then></if>
            <expr_stmt><expr><name>b</name> <operator>*=</operator> <name>b</name></expr>;</expr_stmt>
        }</block></for> <return>return <expr><name>res</name></expr>;</return> }</block></function>
</public><private>private:
    <decl_stmt><decl><type><name>T</name></type> <name>val</name></decl>;</decl_stmt>
</private>}</block>;</struct>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_lhs</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>_rhs</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>U</name><modifier>&amp;</modifier></type> <name>_rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_lhs</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>_rhs</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>U</name><modifier>&amp;</modifier></type> <name>_lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_lhs</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>_rhs</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_lhs</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>_rhs</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>U</name><modifier>&amp;</modifier></type> <name>_rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_lhs</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>_rhs</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>U</name><modifier>&amp;</modifier></type> <name>_lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_lhs</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>_rhs</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_lhs</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name>_rhs</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>U</name><modifier>&amp;</modifier></type> <name>_rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_lhs</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name>_rhs</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>U</name><modifier>&amp;</modifier></type> <name>_lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_lhs</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name>_rhs</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_lhs</name></expr></argument>)</argument_list></call> <operator>/=</operator> <name>_rhs</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>U</name><modifier>&amp;</modifier></type> <name>_rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_lhs</name></expr></argument>)</argument_list></call> <operator>/=</operator> <name>_rhs</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>U</name><modifier>&amp;</modifier></type> <name>_lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_lhs</name></expr></argument>)</argument_list></call> <operator>/=</operator> <name>_rhs</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name><name>_lhs</name><operator>.</operator><name>val</name></name> <operator>==</operator> <name><name>_rhs</name><operator>.</operator><name>val</name></name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>U</name><modifier>&amp;</modifier></type> <name>_rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>_lhs</name> <operator>==</operator> <call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_rhs</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>U</name><modifier>&amp;</modifier></type> <name>_lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_lhs</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>_rhs</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>operator<name>!=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><name>_lhs</name> <operator>==</operator> <name>_rhs</name><operator>)</operator></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>operator<name>!=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>U</name><modifier>&amp;</modifier></type> <name>_rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><name>_lhs</name> <operator>==</operator> <name>_rhs</name><operator>)</operator></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>operator<name>!=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>U</name><modifier>&amp;</modifier></type> <name>_lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><name>_lhs</name> <operator>==</operator> <name>_rhs</name><operator>)</operator></expr>;</return> }</block></function>
<typedef>typedef <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mint</name>;</typedef>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>mint</name></type> <name>res</name> <init>= <expr><operator>(</operator><call><name>mint</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>exp</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>.</operator><call><name>exp</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>res</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>
</unit>
