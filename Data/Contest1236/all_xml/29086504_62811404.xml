<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29086504_62811404.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPS</name></cpp:macro> <cpp:value>1e-6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>


<function><type><name>int</name></type> <name>first_in_range</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>vec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>l</name> <operator>&amp;&amp;</operator> <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name>r</name></expr>)</condition><then> <block>{
            <return>return <expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
        }</block></then></if>
    }</block></for>
    <return>return <expr><name>r</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>last_in_range</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call>(<name>int</name>)<argument_list>(<argument><expr><call><name><name>vec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{

        <if>if <condition>(<expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>r</name></expr>)</condition><then> <block>{
            <return>return <expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
        }</block></then></if>
    }</block></for>
    <return>return <expr><name>l</name></expr>;</return>
}</block></function>


<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vert</name><argument_list>(<argument><expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>hori</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hori</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vert</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>vert</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>vert</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>hori</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>hori</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>up</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>down</name> <init>= <expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


    <decl_stmt><decl><type><name>int</name></type> <name>lx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ly</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>l1x</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>l1y</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
        <expr_stmt><expr><name>l1x</name> <operator>=</operator> <name>lx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>l1y</name> <operator>=</operator> <name>ly</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>lx</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ly</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>l1x</name> <operator>==</operator> <name>lx</name> <operator>&amp;&amp;</operator> <name>lx</name> <operator>==</operator> <name>x</name> <operator>&amp;&amp;</operator>
            <name>l1y</name> <operator>==</operator> <name>ly</name> <operator>&amp;&amp;</operator> <name>ly</name> <operator>==</operator> <name>y</name></expr>)</condition><then> <block>{
            <break>break;</break>
        }</block></then></if>
        <if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>y1</name> <init>= <expr><call><name>first_in_range</name><argument_list>(<argument><expr><name><name>hori</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>left</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name>y1</name> <operator>-</operator> <name>y</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name> <operator>=</operator> <name>y1</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>x1</name> <init>= <expr><call><name>first_in_range</name><argument_list>(<argument><expr><name><name>vert</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>down</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>up</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name>x1</name> <operator>-</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x1</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>y1</name> <init>= <expr><call><name>last_in_range</name><argument_list>(<argument><expr><name><name>hori</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>right</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name>y</name> <operator>-</operator> <name>y1</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name> <operator>=</operator> <name>y1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>x1</name> <init>= <expr><call><name>last_in_range</name><argument_list>(<argument><expr><name><name>vert</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><name>up</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>down</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name>x</name> <operator>-</operator> <name>x1</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>d</name><operator>)</operator> <operator>%</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>cnt</name> <operator>+</operator> <name>k</name> <operator>==</operator> <name>n</name> <operator>*</operator> <name>m</name></expr> ?</condition><then> <expr><literal type="string">"Yes"</literal></expr> </then><else>: <expr><literal type="string">"No"</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

}</block></function></unit>
