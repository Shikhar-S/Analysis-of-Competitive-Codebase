<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29035326_62810772.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mxn</name><init>=<expr><literal type="number">100010</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>sa</name><index>[<expr><name>mxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>sb</name><index>[<expr><name>mxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>sc</name></decl>,<decl><type ref="prev"/><name>sd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>ans</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list><block>{
	<if>if <condition>(<expr><name>d</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>sx</name><init>=<expr><name><name>sa</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>sy</name><init>=<expr><call><name><name>sc</name><operator>.</operator><name>upper_bound</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>z</name></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>sx</name><operator>==</operator><name><name>sa</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>z</name><operator>=</operator><operator>(</operator><operator>*</operator><name>sy</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>z</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><operator>*</operator><name>sx</name></expr></argument>,<argument><expr><operator>*</operator><name>sy</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
		<if>if <condition>(<expr><name>z</name><operator>==</operator><name>y</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><name>z</name><operator>-</operator><name>y</name></expr><operator>,</operator><expr><call><name><name>sd</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>solve</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></then>
	<elseif>else <if>if <condition>(<expr><name>d</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>sx</name><init>=<expr><name><name>sb</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>sy</name><init>=<expr><call><name><name>sd</name><operator>.</operator><name>upper_bound</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>z</name></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>sx</name><operator>==</operator><name><name>sb</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>z</name><operator>=</operator><operator>(</operator><operator>*</operator><name>sy</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>z</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><operator>*</operator><name>sx</name></expr></argument>,<argument><expr><operator>*</operator><name>sy</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
		<if>if <condition>(<expr><name>z</name><operator>==</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><name>z</name><operator>-</operator><name>x</name></expr><operator>,</operator><expr><call><name><name>sc</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>solve</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></then></if></elseif>
	<elseif>else <if>if <condition>(<expr><name>d</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>sx</name><init>=<expr><name><name>sa</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>sy</name><init>=<expr><call><name><name>sc</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>sy</name><operator>--</operator></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>z</name></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>sx</name><operator>==</operator><name><name>sa</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>z</name><operator>=</operator><operator>(</operator><operator>*</operator><name>sy</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>sx</name><operator>--</operator></expr><operator>,</operator><expr><name>z</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><operator>*</operator><name>sx</name></expr></argument>,<argument><expr><operator>*</operator><name>sy</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
		<if>if <condition>(<expr><name>z</name><operator>==</operator><name>y</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><name>y</name><operator>-</operator><name>z</name></expr><operator>,</operator><expr><call><name><name>sd</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>solve</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></then></if></elseif>
	<elseif>else <if>if <condition>(<expr><name>d</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>sx</name><init>=<expr><name><name>sb</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>sy</name><init>=<expr><call><name><name>sd</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>sy</name><operator>--</operator></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>z</name></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>sx</name><operator>==</operator><name><name>sb</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>z</name><operator>=</operator><operator>(</operator><operator>*</operator><name>sy</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>sx</name><operator>--</operator></expr><operator>,</operator><expr><name>z</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><operator>*</operator><name>sx</name></expr></argument>,<argument><expr><operator>*</operator><name>sy</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
		<if>if <condition>(<expr><name>z</name><operator>==</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><name>x</name><operator>-</operator><name>z</name></expr><operator>,</operator><expr><call><name><name>sc</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>solve</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></then></if></elseif></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sa</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sb</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>sc</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>sc</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>sd</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>sd</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>solve</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>ans</name><operator>+</operator><name>k</name><operator>==</operator><literal type="number">1ll</literal><operator>*</operator><name>n</name><operator>*</operator><name>m</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<expr_stmt><expr><call><name><name>sc</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>sd</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>sc</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>sc</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>sd</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>sd</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>solve</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>ans</name><operator>+</operator><name>k</name><operator>==</operator><literal type="number">1ll</literal><operator>*</operator><name>n</name><operator>*</operator><name>m</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
