<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29059546_62812046.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>long</name> <name>long</name></expr></argument> &gt;</argument_list></name></type> <name><name>li</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>long</name> <name>long</name></expr></argument> &gt;</argument_list></name></type> <name><name>co</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>long</name> <name>long</name></type> <name>cauta_1</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>st</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>dr</name><init>=<expr><name><name>li</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>mij</name><init>=<expr><operator>(</operator><name>st</name><operator>+</operator><name>dr</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>,<decl><type ref="prev"/><name>sol</name><init>=<expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>st</name><operator>&lt;=</operator><name>dr</name></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name><name>li</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>mij</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&gt;</operator><name>y</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>sol</name><operator>=</operator><name><name>li</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>mij</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dr</name><operator>=</operator><name>mij</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>st</name><operator>=</operator><name>mij</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><name>mij</name><operator>=</operator><operator>(</operator><name>st</name><operator>+</operator><name>dr</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>sol</name></expr>;</return>
}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>cauta_2</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>st</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>dr</name><init>=<expr><name><name>co</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>mij</name><init>=<expr><operator>(</operator><name>st</name><operator>+</operator><name>dr</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>,<decl><type ref="prev"/><name>sol</name><init>=<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>st</name><operator>&lt;=</operator><name>dr</name></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name><name>co</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>mij</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&gt;</operator><name>x</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>sol</name><operator>=</operator><name><name>co</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>mij</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dr</name><operator>=</operator><name>mij</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>st</name><operator>=</operator><name>mij</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><name>mij</name><operator>=</operator><operator>(</operator><name>st</name><operator>+</operator><name>dr</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>sol</name></expr>;</return>
}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>cauta_3</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>st</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>dr</name><init>=<expr><name><name>li</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>mij</name><init>=<expr><operator>(</operator><name>st</name><operator>+</operator><name>dr</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>,<decl><type ref="prev"/><name>sol</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>st</name><operator>&lt;=</operator><name>dr</name></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name><name>li</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>mij</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;</operator><name>y</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>sol</name><operator>=</operator><name><name>li</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>mij</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>st</name><operator>=</operator><name>mij</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>dr</name><operator>=</operator><name>mij</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><name>mij</name><operator>=</operator><operator>(</operator><name>st</name><operator>+</operator><name>dr</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>sol</name></expr>;</return>
}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>cauta_4</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>st</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>dr</name><init>=<expr><name><name>co</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>mij</name><init>=<expr><operator>(</operator><name>st</name><operator>+</operator><name>dr</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>,<decl><type ref="prev"/><name>sol</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>st</name><operator>&lt;=</operator><name>dr</name></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name><name>co</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>mij</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;</operator><name>x</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>sol</name><operator>=</operator><name><name>co</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>mij</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>st</name><operator>=</operator><name>mij</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>dr</name><operator>=</operator><name>mij</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><name>mij</name><operator>=</operator><operator>(</operator><name>st</name><operator>+</operator><name>dr</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>sol</name></expr>;</return>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name></type>  <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>li</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>co</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><call><name>max</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>li</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>li</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>co</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>co</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type>  <name>dir</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>x</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>viz</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>limn</name></decl>,<decl><type ref="prev"/><name>lime</name></decl>,<decl><type ref="prev"/><name>limv</name></decl>,<decl><type ref="prev"/><name>lims</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>limn</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>lime</name><operator>=</operator><name>m</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>lims</name><operator>=</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>limv</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>ok</name> <operator>==</operator> <literal type="boolean">true</literal></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>vizpas</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>vizpas</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><call><name>cauta_1</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>lime</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>lime</name><operator>=</operator><name>y</name><operator>+</operator><name>vizpas</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name><operator>=</operator><name>lime</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
        }</block></then>
        <elseif>else
        <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>vizpas</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><call><name>cauta_2</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>lims</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>lims</name><operator>=</operator><name>x</name><operator>+</operator><name>vizpas</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name><operator>=</operator><name>lims</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <elseif>else
        <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>vizpas</name><operator>=</operator><name>y</name><operator>-</operator><call><name>max</name><argument_list>(<argument><expr><call><name>cauta_3</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>limv</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>limv</name><operator>=</operator><name>y</name><operator>-</operator><name>vizpas</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name><operator>=</operator><name>limv</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">4</literal></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <elseif>else
        <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>vizpas</name><operator>=</operator><name>x</name><operator>-</operator><call><name>max</name><argument_list>(<argument><expr><call><name>cauta_4</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>limn</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>limn</name><operator>=</operator><name>x</name><operator>-</operator><name>vizpas</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name><operator>=</operator><name>limn</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
        <expr_stmt><expr><name>viz</name><operator>+=</operator><name>vizpas</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>vizpas</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>y</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>vizpas</name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>dir</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
    }</block></while>
    <if>if<condition>(<expr><name>viz</name><operator>+</operator><literal type="number">1</literal><operator>!=</operator><name>n</name><operator>*</operator><name>m</name><operator>-</operator><name>k</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal></expr>;</expr_stmt></block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal></expr>;</expr_stmt></block></else></if>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
