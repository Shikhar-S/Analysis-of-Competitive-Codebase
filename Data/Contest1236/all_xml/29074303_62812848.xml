<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29074303_62812848.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>uint</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<comment type="line">//-------------------------------------------------------------------LYYYâ</comment>
<namespace>namespace <name>LYYY</name><block>{
	<function><type><name>int</name></type> <name>rd</name><parameter_list>()</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>s</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>int</name></type> <name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<while>while<condition>(<expr><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="number">48</literal><operator>||</operator><name>c</name></expr></argument>&gt;</argument_list></name><literal type="number">57</literal></expr>)</condition>
		<block>{
			<if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="number">45</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></while>
		<while>while<condition>(<expr><name>c</name><operator>&gt;=</operator><literal type="number">48</literal><operator>&amp;&amp;</operator><name>c</name><operator>&lt;=</operator><literal type="number">57</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>s</name><operator>=</operator><operator>(</operator><name>s</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>s</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>c</name><operator>^</operator><literal type="number">48</literal><operator>)</operator></expr><operator>,</operator><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
		<return>return <expr><name>s</name><operator>*</operator><name>f</name></expr>;</return>
	}</block></function>
	<function><type><name>LL</name></type> <name>rdl</name><parameter_list>()</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>LL</name></type> <name>s</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>int</name></type> <name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<while>while<condition>(<expr><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="number">48</literal><operator>||</operator><name>c</name></expr></argument>&gt;</argument_list></name><literal type="number">57</literal></expr>)</condition>
		<block>{
			<if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="number">45</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></while>
		<while>while<condition>(<expr><name>c</name><operator>&gt;=</operator><literal type="number">48</literal><operator>&amp;&amp;</operator><name>c</name><operator>&lt;=</operator><literal type="number">57</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>s</name><operator>=</operator><operator>(</operator><name>s</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>s</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>c</name><operator>^</operator><literal type="number">48</literal><operator>)</operator></expr><operator>,</operator><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
		<return>return <expr><name>s</name><operator>*</operator><name>f</name></expr>;</return>
	}</block></function>
	<function><type><name>void</name></type> <name>wt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
	<block>{
		<if>if<condition>(<expr><name>x</name><operator>&gt;=</operator><literal type="number">10</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>wt</name><argument_list>(<argument><expr><name>x</name><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>x</name><operator>%</operator><literal type="number">10</literal><operator>+</operator><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>WT</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
	<block>{
		<if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><operator>-</operator><name>x</name></expr><operator>,</operator><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><call><name>wt</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>wtl</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>x</name></decl></parameter>)</parameter_list>
	<block>{
		<if>if<condition>(<expr><name>x</name><operator>&gt;=</operator><literal type="number">10</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>wtl</name><argument_list>(<argument><expr><name>x</name><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>x</name><operator>%</operator><literal type="number">10</literal><operator>+</operator><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>WTL</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>x</name></decl></parameter>)</parameter_list>
	<block>{
		<if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><operator>-</operator><name>x</name></expr><operator>,</operator><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><call><name>wtl</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></namespace><using>using <namespace>namespace <name>LYYY</name>;</namespace></using>
<comment type="line">//-------------------------------------------------------------------bianliangâ</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">111111</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name><init>=<expr><literal type="number">2000000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>,<decl><type ref="prev"/><name>M</name></decl>,<decl><type ref="prev"/><name>K</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pii</name></type> <name><name>A</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>B</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>C</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>D</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<comment type="line">//-------------------------------------------------------------------hanshuâ</comment>
<function><type><name>pii</name></type> <name>Get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>TO</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l2</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r2</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>TO</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
	<block>{
		<decl_stmt><decl><type><name>pii</name></type> <name>op</name><init>=<expr><operator>(</operator><operator>*</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>A</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>A</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>K</name></expr></argument>,<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name><name>op</name><operator>.</operator><name>first</name></name><operator>!=</operator><name>a</name><operator>||</operator><name><name>op</name><operator>.</operator><name>second</name></name><operator>&gt;</operator><name>r2</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>mp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		<return>return <expr><name>op</name></expr>;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name>TO</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
	<block>{
		<decl_stmt><decl><type><name>pii</name></type> <name>op</name><init>=<expr><operator>(</operator><operator>*</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>B</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>B</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>K</name></expr></argument>,<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name><name>op</name><operator>.</operator><name>first</name></name><operator>!=</operator><name>b</name><operator>||</operator><name><name>op</name><operator>.</operator><name>second</name></name><operator>&gt;</operator><name>r1</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>mp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		<return>return <expr><call><name>mp</name><argument_list>(<argument><expr><name><name>op</name><operator>.</operator><name>second</name></name></expr></argument>,<argument><expr><name><name>op</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name>TO</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then>
	<block>{
		<decl_stmt><decl><type><name>pii</name></type> <name>op</name><init>=<expr><operator>(</operator><operator>*</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>C</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>C</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>K</name></expr></argument>,<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><operator>-</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>op</name><operator>.</operator><name>second</name></name><operator>*=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<comment type="line">//		printf("----%d %d\n",op.first,op.second);</comment>
		<if>if<condition>(<expr><name><name>op</name><operator>.</operator><name>first</name></name><operator>!=</operator><name>a</name><operator>||</operator><name><name>op</name><operator>.</operator><name>second</name></name><operator>&lt;</operator><name>l2</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>mp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		<return>return <expr><name>op</name></expr>;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name>TO</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><then>
	<block>{
		<decl_stmt><decl><type><name>pii</name></type> <name>op</name><init>=<expr><operator>(</operator><operator>*</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>D</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>D</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>K</name></expr></argument>,<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><operator>-</operator><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>op</name><operator>.</operator><name>second</name></name><operator>*=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>op</name><operator>.</operator><name>first</name></name><operator>!=</operator><name>b</name><operator>||</operator><name><name>op</name><operator>.</operator><name>second</name></name><operator>&lt;</operator><name>l1</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>mp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		<return>return <expr><call><name>mp</name><argument_list>(<argument><expr><name><name>op</name><operator>.</operator><name>second</name></name></expr></argument>,<argument><expr><name><name>op</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then></if>
	<return>return <expr><call><name>mp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>all_colored</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l2</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r2</name></decl></parameter>)</parameter_list>
<block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>l1</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>r1</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>l2</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>r2</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><call><name>Get</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>l1</name></expr></argument>,<argument><expr><name>r1</name></expr></argument>,<argument><expr><name>l2</name></expr></argument>,<argument><expr><name>r2</name></expr></argument>)</argument_list></call><operator>!=</operator><call><name>mp</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></block></for></block></for>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>TO</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l2</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r2</name></decl></parameter>)</parameter_list>
<block>{
<comment type="line">//	printf("%d %d %d %d %d %d %d\n",a,b,TO,l1,r1,l2,r2);</comment>
	<if>if<condition>(<expr><name><name>a</name><argument_list type="generic">&lt;<argument><expr><name>l1</name><operator>||</operator><name>a</name></expr></argument>&gt;</argument_list></name><name>r1</name><operator>||</operator><name><name>b</name><argument_list type="generic">&lt;<argument><expr><name>l2</name><operator>||</operator><name>b</name></expr></argument>&gt;</argument_list></name><name>r2</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><operator>(</operator><operator>*</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>A</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>A</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>K</name></expr></argument>,<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>==</operator><call><name>mp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>all_colored</name><argument_list>(<argument><expr><name>l1</name></expr></argument>,<argument><expr><name>r1</name></expr></argument>,<argument><expr><name>l2</name></expr></argument>,<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>pii</name></type> <name>Nw</name><init>=<expr><call><name>Get</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>TO</name></expr></argument>,<argument><expr><name>l1</name></expr></argument>,<argument><expr><name>r1</name></expr></argument>,<argument><expr><name>l2</name></expr></argument>,<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line">//	printf("%d %d\n",Nw.first,Nw.second);</comment>
	<if>if<condition>(<expr><operator>!</operator><name><name>Nw</name><operator>.</operator><name>first</name></name></expr>)</condition><then>
	<block>{
		<if>if<condition>(<expr><name>TO</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>dfs</name><argument_list>(<argument><expr><name>l1</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r2</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>l1</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r1</name></expr></argument>,<argument><expr><name>l2</name></expr></argument>,<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		<if>if<condition>(<expr><name>TO</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>dfs</name><argument_list>(<argument><expr><name>r1</name></expr></argument>,<argument><expr><name>r2</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><name>l1</name></expr></argument>,<argument><expr><name>r1</name></expr></argument>,<argument><expr><name>l2</name></expr></argument>,<argument><expr><name>r2</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		<if>if<condition>(<expr><name>TO</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>dfs</name><argument_list>(<argument><expr><name>r1</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l2</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><name>l1</name></expr></argument>,<argument><expr><name>r1</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l2</name></expr></argument>,<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		<if>if<condition>(<expr><name>TO</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>dfs</name><argument_list>(<argument><expr><name>l1</name></expr></argument>,<argument><expr><name>l2</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>l1</name></expr></argument>,<argument><expr><name>r1</name></expr></argument>,<argument><expr><name>l2</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
	}</block></then>
	<else>else
	<block>{
		<if>if<condition>(<expr><name>TO</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>all_colored</name><argument_list>(<argument><expr><name>l1</name></expr></argument>,<argument><expr><name>r1</name></expr></argument>,<argument><expr><name><name>Nw</name><operator>.</operator><name>second</name></name></expr></argument>,<argument><expr><name>r2</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>dfs</name><argument_list>(<argument><expr><name>l1</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>Nw</name><operator>.</operator><name>second</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>l1</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r1</name></expr></argument>,<argument><expr><name>l2</name></expr></argument>,<argument><expr><name><name>Nw</name><operator>.</operator><name>second</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		<if>if<condition>(<expr><name>TO</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>all_colored</name><argument_list>(<argument><expr><name><name>Nw</name><operator>.</operator><name>first</name></name></expr></argument>,<argument><expr><name>r1</name></expr></argument>,<argument><expr><name>l2</name></expr></argument>,<argument><expr><name>r2</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>dfs</name><argument_list>(<argument><expr><name><name>Nw</name><operator>.</operator><name>first</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r2</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><name>l1</name></expr></argument>,<argument><expr><name><name>Nw</name><operator>.</operator><name>first</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l2</name></expr></argument>,<argument><expr><name>r2</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		<if>if<condition>(<expr><name>TO</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>all_colored</name><argument_list>(<argument><expr><name>l1</name></expr></argument>,<argument><expr><name>r1</name></expr></argument>,<argument><expr><name>l2</name></expr></argument>,<argument><expr><name><name>Nw</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>dfs</name><argument_list>(<argument><expr><name>r1</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>Nw</name><operator>.</operator><name>second</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><name>l1</name></expr></argument>,<argument><expr><name>r1</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>Nw</name><operator>.</operator><name>second</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		<if>if<condition>(<expr><name>TO</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>all_colored</name><argument_list>(<argument><expr><name>l1</name></expr></argument>,<argument><expr><name><name>Nw</name><operator>.</operator><name>first</name></name></expr></argument>,<argument><expr><name>l2</name></expr></argument>,<argument><expr><name>r2</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>dfs</name><argument_list>(<argument><expr><name><name>Nw</name><operator>.</operator><name>first</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l2</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>Nw</name><operator>.</operator><name>first</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r1</name></expr></argument>,<argument><expr><name>l2</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
	}</block></else></if>
	<return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>
<comment type="line">//-------------------------------------------------------------------main()â</comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>N</name><operator>=</operator><call><name>rd</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name>M</name><operator>=</operator><call><name>rd</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name>K</name><operator>=</operator><call><name>rd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>K</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>mp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>mp</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>mp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><operator>-</operator><name>b</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>D</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>mp</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><operator>-</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for><expr_stmt><expr><operator>++</operator><name>K</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>A</name><index>[<expr><name>K</name></expr>]</index></name><operator>=</operator><name><name>B</name><index>[<expr><name>K</name></expr>]</index></name><operator>=</operator><name><name>C</name><index>[<expr><name>K</name></expr>]</index></name><operator>=</operator><name><name>D</name><index>[<expr><name>K</name></expr>]</index></name><operator>=</operator><call><name>mp</name><argument_list>(<argument><expr><name>INF</name></expr></argument>,<argument><expr><name>INF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>A</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>A</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>B</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>B</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>C</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>C</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>D</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>D</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>N</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><literal type="string">"Yes"</literal></expr></then><else>:<expr><literal type="string">"No"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
