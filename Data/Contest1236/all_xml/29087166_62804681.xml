<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29087166_62804681.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)x.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(), x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ini</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(x, y, sizeof(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastio</name></cpp:macro> <cpp:value>cin.sync_with_stdio(false); cin.tie(nullptr)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>pii</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>dx</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>dy</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name>fastio</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>obx</name><index>[<expr><literal type="number">100000</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>oby</name><index>[<expr><literal type="number">100000</literal></expr>]</index></name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>obx</name><index>[<expr><operator>--</operator><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><operator>--</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>oby</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>obx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>oby</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

	<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dir</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ux</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>bx</name> <init>= <expr><name>n</name></expr></init></decl>, <decl><type ref="prev"/><name>ly</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ry</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>cnt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>prv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{
		<if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>obx</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>obx</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>p</name> <operator>==</operator> <call><name>sz</name><argument_list>(<argument><expr><name><name>obx</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name>ry</name> <operator>-</operator> <name>y</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>y</name> <operator>=</operator> <name>ry</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then>
			<else>else <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name><name>obx</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name>t</name> <operator>-</operator> <name>y</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>y</name> <operator>=</operator> <name>t</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><name>ux</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>oby</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>oby</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>p</name> <operator>==</operator> <call><name>sz</name><argument_list>(<argument><expr><name><name>oby</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name>bx</name> <operator>-</operator> <name>x</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>x</name> <operator>=</operator> <name>bx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then>
			<else>else <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name><name>oby</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name>bx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name>t</name> <operator>-</operator> <name>x</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>x</name> <operator>=</operator> <name>t</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><name>ry</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<elseif>else <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>obx</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>obx</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name>y</name> <operator>-</operator> <name>ly</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>y</name> <operator>=</operator> <name>ly</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then>
			<else>else <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name><name>obx</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><operator>--</operator><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name>ly</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name>y</name> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>y</name> <operator>=</operator> <name>t</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><name>bx</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<else>else <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>oby</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>oby</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name>x</name> <operator>-</operator> <name>ux</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>x</name> <operator>=</operator> <name>ux</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then>
			<else>else <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name><name>oby</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><operator>--</operator><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name>ux</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name>x</name> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>x</name> <operator>=</operator> <name>t</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><name>ly</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
		}</block></else></if>

		<expr_stmt><expr><operator>--</operator><name>cnt</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>prv</name> <operator>==</operator> <name>cnt</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>

		<expr_stmt><expr><name>prv</name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><operator>++</operator><name>dir</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
	}</block></while>

	<if>if <condition>(<expr><name>cnt</name> <operator>+</operator> <name>k</name> <operator>!=</operator> <operator>(</operator><name>ll</name><operator>)</operator><name>n</name> <operator>*</operator> <name>m</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal></expr>;</expr_stmt></block></else></if>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
