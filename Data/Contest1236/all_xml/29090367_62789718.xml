<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29090367_62789718.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int64_t</name></type> <name>cal</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>R</name></decl></parameter>)</parameter_list> <block>{
    <if>if<condition>(<expr><name>R</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    }</block></then></if>
    <if>if<condition>(<expr><name>R</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <return>return <expr><name>L</name> <operator>%</operator> <name>MOD</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><call><name>cal</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>pp</name> <init>= <expr><name>p</name><operator>*</operator><name>p</name><operator>%</operator><name>MOD</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>R</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
        <return>return <expr><name>pp</name><operator>*</operator><name>L</name><operator>%</operator><name>MOD</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><name>pp</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int64_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><call><name>cal</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>p</name><operator>+</operator><name>MOD</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>cal</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
