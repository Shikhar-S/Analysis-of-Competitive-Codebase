<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29090969_62809746.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">100003</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>u</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>dir</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>sum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dx</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dy</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>C</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>R</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>r</name><operator>=</operator><name>m</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>d</name><operator>=</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>x</name><operator>=</operator><name>y</name><operator>=</operator><name>sum</name><operator>=</operator><name>u</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>xx</name></decl>,<decl><type ref="prev"/><name>yy</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>xx</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>R</name><index>[<expr><name>xx</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>C</name><index>[<expr><name>yy</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>xx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition><block>{
<comment type="line">//		printf("%d %d %d %d %d %d !\n",x,y,u,d,l,r);</comment>
		<if>if<condition>(<expr><name>dir</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>k</name><init>=<expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>R</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>R</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>R</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
				<if>if<condition>(<expr><name>k</name><operator>==</operator><name><name>R</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>t</name><operator>=</operator><name>r</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>t</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>R</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
				<expr_stmt><expr><name>r</name><operator>=</operator><name>t</name></expr>;</expr_stmt>
			}</block></then><else>else<block>{
				<if>if<condition>(<expr><name>k</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>t</name><operator>=</operator><name>l</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>t</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>R</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><operator>--</operator><name>k</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
				<expr_stmt><expr><name>l</name><operator>=</operator><name>t</name></expr>;</expr_stmt>
			}</block></else></if>
			<if>if<condition>(<expr><operator>++</operator><name>cnt</name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name>sum</name><operator>+=</operator><call><name>abs</name><argument_list>(<argument><expr><name>t</name><operator>-</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>y</name><operator>!=</operator><name>t</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name>y</name><operator>=</operator><name>t</name></expr>;</expr_stmt>
		}</block></then><else>else<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>k</name><init>=<expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>C</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>C</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>C</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
				<if>if<condition>(<expr><name>k</name><operator>==</operator><name><name>C</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>t</name><operator>=</operator><name>d</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>t</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>d</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>C</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
				<expr_stmt><expr><name>d</name><operator>=</operator><name>t</name></expr>;</expr_stmt>
			}</block></then><else>else<block>{
				<if>if<condition>(<expr><name>k</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>t</name><operator>=</operator><name>u</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>t</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>u</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>C</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><operator>--</operator><name>k</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
				<expr_stmt><expr><name>u</name><operator>=</operator><name>t</name></expr>;</expr_stmt>
			}</block></else></if>
			<if>if<condition>(<expr><operator>++</operator><name>cnt</name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name>sum</name><operator>+=</operator><call><name>abs</name><argument_list>(<argument><expr><name>t</name><operator>-</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>x</name><operator>!=</operator><name>t</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name>x</name><operator>=</operator><name>t</name></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><operator>++</operator><name>dir</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">5</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
	}</block></while>
<comment type="line">//	printf("%d !\n",sum);</comment>
	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><ternary><condition><expr><literal type="number">1ll</literal><operator>*</operator><name>n</name><operator>*</operator><name>m</name><operator>-</operator><name>k</name><operator>==</operator><name>sum</name></expr>?</condition><then><expr><literal type="string">"Yes"</literal></expr></then><else>:<expr><literal type="string">"No"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
