<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29073617_62813958.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>for_</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;b;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>for__</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;=b;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rof_</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&gt;b;--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rof__</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&gt;=b;--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ms</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset((a),(b),sizeof((a)))</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>db</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MN</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>P</name> <init>= <expr><literal type="number">998244353</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>R</name><init>=<expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>D</name><init>=<expr><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>L</name><init>=<expr><literal type="number">3</literal></expr></init></decl>, <decl><type ref="prev"/><name>U</name><init>=<expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>sr</name><index>[<expr><name>MN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>sc</name><index>[<expr><name>MN</name></expr>]</index></name></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>sm</name><init>=<expr><call><name>ll</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>*</operator><name>m</name><operator>-</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<macro><name>for__</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>sr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>for__</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>m</argument>)</argument_list></macro> <expr_stmt><expr><name><name>sc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>for_</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>k</argument>)</argument_list></macro><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>sc</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<macro><name>for__</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>sr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>for__</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>m</argument>)</argument_list></macro> <expr_stmt><expr><name><name>sc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>for__</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>sr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>sr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>for__</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>sc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>sc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nowx</name><init>=<expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>nowy</name><init>=<expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>dir</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rl</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cl</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rr</name><init>=<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>cr</name><init>=<expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name><name>sr</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
		<return>return <expr><call><name>puts</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>sc</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-</operator><literal type="number">2</literal><operator>==</operator><name>sm</name></expr>?</condition><then> <expr><literal type="string">"YES"</literal></expr></then><else>: <expr><literal type="string">"NO"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>void</name><argument_list>()</argument_list></call></expr>;</return>
	}</block></then></if>
	<macro><name>for_</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n+m</argument>)</argument_list></macro><block>{
<comment type="line">//cout&lt;&lt;nowx&lt;&lt;' '&lt;&lt;nowy&lt;&lt;'\n';</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>ed</name></decl>, <decl><type ref="prev"/><name>lstx</name><init>=<expr><name>nowx</name></expr></init></decl>, <decl><type ref="prev"/><name>lsty</name><init>=<expr><name>nowy</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>dir</name><operator>==</operator><name>R</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>ed</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>cr</name></expr></argument>,<argument><expr><operator>*</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>sr</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>sr</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>nowy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>sm</name><operator>-=</operator><name>ed</name><operator>-</operator><name>nowy</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>nowy</name><operator>=</operator><name>ed</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>cr</name><operator>=</operator><name>nowy</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>rl</name><operator>=</operator><name>nowx</name></expr>;</expr_stmt>
		}</block></then><elseif>else <if>if<condition>(<expr><name>dir</name><operator>==</operator><name>D</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>ed</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>rr</name></expr></argument>,<argument><expr><operator>*</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>sc</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>sc</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>nowx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>sm</name><operator>-=</operator><name>ed</name><operator>-</operator><name>nowx</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>nowx</name><operator>=</operator><name>ed</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>cr</name><operator>=</operator><name>nowy</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>rr</name><operator>=</operator><name>nowx</name></expr>;</expr_stmt>
		}</block></then></if></elseif><elseif>else <if>if<condition>(<expr><name>dir</name><operator>==</operator><name>L</name></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>sr</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>sr</name><index>[<expr><name>nowx</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>nowy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><operator>--</operator><name>it</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ed</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>cl</name></expr></argument>,<argument><expr><operator>*</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>sm</name><operator>-=</operator><name>nowy</name><operator>-</operator><name>ed</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>nowy</name><operator>=</operator><name>ed</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>cl</name><operator>=</operator><name>nowy</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>rr</name><operator>=</operator><name>nowx</name></expr>;</expr_stmt>
		}</block></then></if></elseif><elseif>else <if>if<condition>(<expr><name>dir</name><operator>==</operator><name>U</name></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>sc</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>sc</name><index>[<expr><name>nowy</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>nowx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><operator>--</operator><name>it</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ed</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>rl</name></expr></argument>,<argument><expr><operator>*</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>sm</name><operator>-=</operator><name>nowx</name><operator>-</operator><name>ed</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>nowx</name><operator>=</operator><name>ed</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>cl</name><operator>=</operator><name>nowy</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>rl</name><operator>=</operator><name>nowx</name></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
		<if>if<condition>(<expr><name>lstx</name><operator>==</operator><name>nowx</name> <operator>&amp;&amp;</operator> <name>lsty</name><operator>==</operator><name>nowy</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><operator>++</operator><name>dir</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>dir</name><operator>&gt;</operator><literal type="number">4</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
	}</block>
	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><ternary><condition><expr><name>sm</name></expr>?</condition><then> <expr><literal type="string">"NO"</literal></expr></then><else>: <expr><literal type="string">"YES"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list><block>{
<comment type="line">//	ios::sync_with_stdio(0);</comment>
<comment type="line">//	int _; scanf("%d",&amp;_); for_(i,0,_)</comment>
		<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
