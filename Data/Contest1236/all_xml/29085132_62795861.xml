<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29085132_62795861.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>iii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>iii</name></expr></argument>&gt;</argument_list></name></type> <name>viii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>vvi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vii</name></expr></argument>&gt;</argument_list></name></type> <name>vvii</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>mpii</name>;</typedef>
<typedef>typedef <type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>umpii</name>;</typedef>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>push_back(v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(), v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>upb</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>key</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(upper_bound(all(v), key) - v.begin())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lob</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>key</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(lower_bound(all(v), key) - v.begin())</cpp:value></cpp:define>
 
<decl_stmt><decl><type><name>ll</name></type> <name>inf</name> <init>= <expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>INF</name> <init>= <expr><name>inf</name> <operator>*</operator> <name>inf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ld</name></type> <name>pi</name> <init>= <expr><call><name>ld</name><argument_list>(<argument><expr><literal type="number">3.1415926535897932384626433832795</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dr</name><index>[]</index></name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dc</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>mod_add</name><parameter_list>(<parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><name>a</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
  <if>if<condition>(<expr><name>a</name> <operator>&gt;</operator> <name>mod</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>-=</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
}</block></function>
<function><type><name>void</name></type> <name>mod_sub</name><parameter_list>(<parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><name>a</name> <operator>-=</operator> <name>b</name></expr>;</expr_stmt>
  <if>if<condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>+=</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
}</block></function>
<function><type><name>ll</name></type> <name>mod_pow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
  <while>while<condition>(<expr><name>p</name></expr>)</condition> <block>{
    <if>if<condition>(<expr><name>p</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name> <operator>*</operator> <name>b</name> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>p</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <name>b</name> <operator>*</operator> <name>b</name> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
  }</block></while>
  <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<comment type="line">//only for variables and vectors; </comment>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>TH</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>_dbg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sdbg</name></decl></parameter>, <parameter><decl><type><name>TH</name></type> <name>h</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name>cerr</name><operator>&lt;&lt;</operator><name>sdbg</name><operator>&lt;&lt;</operator><literal type="char">'='</literal><operator>&lt;&lt;</operator><name>h</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>TH</name></parameter>, <parameter><type><name>class</name><modifier>...</modifier></type> <name>TA</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>_dbg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sdbg</name></decl></parameter>, <parameter><decl><type><name>TH</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>TA</name><modifier>...</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{
  <while>while<condition>(<expr><operator>*</operator><name>sdbg</name><operator>!=</operator><literal type="char">','</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>cerr</name><operator>&lt;&lt;</operator><operator>*</operator><name>sdbg</name><operator>++</operator></expr>;</expr_stmt></block></while>
  <expr_stmt><expr><name>cerr</name><operator>&lt;&lt;</operator><literal type="char">'='</literal><operator>&lt;&lt;</operator><name>h</name><operator>&lt;&lt;</operator><literal type="char">','</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>_dbg</name><argument_list>(<argument><expr><name>sdbg</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>V</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"["</literal></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>auto</name></type> <name>vv</name> <range>: <expr><name>V</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name>vv</name> <operator>&lt;&lt;</operator> <literal type="string">","</literal></expr>;</expr_stmt></block></for> <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"]"</literal></expr>;</return>
}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>L</name></parameter>, <parameter><type><name>class</name></type> <name>R</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name></expr></argument>&gt;</argument_list></name></type> <name>P</name></decl></parameter>)</parameter_list> <block>{
  <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal> <operator>&lt;&lt;</operator> <name><name>P</name><operator>.</operator><name>st</name></name> <operator>&lt;&lt;</operator> <literal type="string">","</literal> <operator>&lt;&lt;</operator> <name><name>P</name><operator>.</operator><name>nd</name></name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_dbg(#__VA_ARGS__, __VA_ARGS__)</cpp:value></cpp:define>

<comment type="block">/*...................................................*/</comment>

<function><name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// freopen("in.txt", "r", stdin);</comment>
  <comment type="line">// freopen("out.txt", "w", stdout);</comment>

  <decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
  <comment type="line">// cin &gt;&gt; t;</comment>
  <comment type="line">// ll tc = t;</comment>
  <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>c</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
    <block type="pseudo"><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><then>
    <block type="pseudo"><for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>c</name><operator>++</operator></expr>;</expr_stmt>
    }</block></for></block></then> <else>else <block>{
      <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>c</name><operator>++</operator></expr>;</expr_stmt>
      }</block></for>
    }</block></else></if></block></for>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
      }</block></for>
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    }</block></for>
  }</block></while>
}</block></function></unit>
