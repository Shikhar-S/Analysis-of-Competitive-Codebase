<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29038550_62808802.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>

<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><literal type="number">1ll</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">1ll</literal> <operator>*</operator> <name>y</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>del</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><operator>(</operator><literal type="number">1ll</literal> <operator>*</operator> <name>x</name> <operator>-</operator> <literal type="number">1ll</literal> <operator>*</operator> <name>y</name><operator>)</operator> <operator>%</operator> <name>mod</name> <operator>+</operator> <name>mod</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><literal type="number">1ll</literal> <operator>*</operator> <name>x</name> <operator>*</operator> <literal type="number">1ll</literal> <operator>*</operator> <name>y</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>row</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>col</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>turn</name></decl>, <decl><type ref="prev"/><name>hihi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>sum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>init</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ii</name></type> <name><name>p</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>init</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>init</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name><name>init</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name><name>init</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <comment type="line">//0:Äi sang pháº£i</comment>
    <comment type="line">//1:Äi xuá»ng</comment>
    <comment type="line">//2:Äi sang trÃ¡i</comment>
    <comment type="line">//3:Äi lÃªn</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fi</name> <operator>&gt;&gt;</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>se</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fi</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>se</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>row</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fi</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>col</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>se</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <if>if<condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">1ll</literal> <operator>*</operator> <name>n</name> <operator>*</operator> <name>m</name> <operator>-</operator> <literal type="number">1ll</literal> <operator>*</operator> <name>k</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>N</name> <operator>-</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>sum</name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>turn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{
        <comment type="line">//mymap[{x, y}]++;</comment>
        <if>if<condition>(<expr><name>sum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        <comment type="line">//cout &lt;&lt; sum &lt;&lt; " " &lt;&lt; x &lt;&lt; " " &lt;&lt; y &lt;&lt; " " &lt;&lt; init[0] &lt;&lt; " " &lt;&lt; init[1] &lt;&lt; " " &lt;&lt; init[2] &lt;&lt; " " &lt;&lt; init[3] &lt;&lt; "\n";</comment>
        <if>if<condition>(<expr><name>turn</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{<comment type="line">//di sang phai</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>it</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>lim</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>it</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>init</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>lim</name> <operator>-</operator> <name>y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>hihi</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>sum</name> <operator>-=</operator> <operator>(</operator><name>lim</name> <operator>-</operator> <name>y</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name> <operator>=</operator> <name>lim</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>init</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>lim</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>init</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>turn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then>
        <elseif>else <if>if<condition>(<expr><name>turn</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{<comment type="line">//di xuong</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>it</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>lim</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>it</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>init</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>lim</name> <operator>-</operator> <name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>hihi</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>sum</name> <operator>-=</operator> <operator>(</operator><name>lim</name> <operator>-</operator> <name>x</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <name>lim</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>init</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lim</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>init</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>turn</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name>turn</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{<comment type="line">//di sang trai</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>it</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>lim</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>it</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>init</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>y</name> <operator>-</operator> <name>lim</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>hihi</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>sum</name> <operator>-=</operator> <operator>(</operator><name>y</name> <operator>-</operator> <name>lim</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name> <operator>=</operator> <name>lim</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>init</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>lim</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>init</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>turn</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <else>else <block>{<comment type="line">//di len</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>it</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>lim</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>it</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>init</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>x</name> <operator>-</operator> <name>lim</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>hihi</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>sum</name> <operator>-=</operator> <operator>(</operator><name>x</name> <operator>-</operator> <name>lim</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <name>lim</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>init</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>lim</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>init</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>turn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        }</block></else></if>
        <if>if<condition>(<expr><name>ok</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>hihi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name>hihi</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
    }</block></while>
    <if>if<condition>(<expr><name>sum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal></expr>;</expr_stmt></block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr>;</expr_stmt></block></else></if>
}</block></function>
</unit>
