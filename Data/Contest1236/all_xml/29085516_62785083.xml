<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29085516_62785083.cpp"><comment type="line">// May this submission get accepted!</comment>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name> <name>(</name><cpp:literal>"O3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name> <name>(</name><cpp:literal>"tune=native"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name> <name>(</name><cpp:literal>"avx"</cpp:literal><name>)</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<comment type="line">// æ±ç¨ãã¯ã­</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL_OF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(), (x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (long long i=0, i##_len=(n); i&lt;i##_len; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANGE</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>is</name></type></parameter>,<parameter><type><name>ie</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (long long i=(is), i##_end=(ie); i&lt;=i##_end; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSRNG</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>is</name></type></parameter>,<parameter><type><name>ie</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (long long i=(is), i##_end=(ie); i&gt;=i##_end; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STEP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>is</name></type></parameter>, <parameter><type><name>ie</name></type></parameter>, <parameter><type><name>step</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (long long i=(is), i##_end=(ie), i##_step = (step); i&lt;=i##_end; i+=i##_step)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNIQUE</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { sort((v).begin(), (v).end()); (v).erase(unique((v).begin(), (v).end()), (v).end()); } while (false)</cpp:value></cpp:define>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>chmax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="boolean">true</literal></expr>;</return>}</block></then></if> <return>return <expr><literal type="boolean">false</literal></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>chmin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="boolean">true</literal></expr>;</return>}</block></then></if> <return>return <expr><literal type="boolean">false</literal></expr>;</return> }</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>0x7FFFFFFF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINF</name></cpp:macro> <cpp:value>0x7FFFFFFFFFFFFFFFLL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Yes</name><parameter_list>(<parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((q) ? "Yes" : "No")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YES</name><parameter_list>(<parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((q) ? "YES" : "NO")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Possible</name><parameter_list>(<parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((q) ? "Possible" : "Impossible")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSSIBLE</name><parameter_list>(<parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((q) ? "POSSIBLE" : "IMPOSSIBLE")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUMP</name><parameter_list>(<parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; "[DEBUG] " #q ": " &lt;&lt; (q) &lt;&lt; " at " __FILE__ ":" &lt;&lt; __LINE__ &lt;&lt; endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUMPALL</name><parameter_list>(<parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { cerr &lt;&lt; "[DEBUG] " #q ": ["; REP(i, (q).size()) { cerr &lt;&lt; (q)[i] &lt;&lt; (i == i_len-1 ? "" : ", "); } cerr &lt;&lt; "] at " __FILE__ ":" &lt;&lt; __LINE__ &lt;&lt; endl; } while (false)</cpp:value></cpp:define>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> <while>while <condition>(<expr><name>b</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name>a</name> <operator>%=</operator> <name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while> <return>return <expr><name>a</name></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>a</name> <operator>/</operator> <call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>b</name></expr>;</return> }</block></function>

<comment type="line">// gccæ¡å¼µãã¯ã­</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>popcount</name></cpp:macro> <cpp:value>__builtin_popcount</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>popcountll</name></cpp:macro> <cpp:value>__builtin_popcountll</cpp:value></cpp:define>

<comment type="line">// ã¨ã¤ãªã¢ã¹</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DANCE_</name></cpp:macro> <cpp:value>long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROBOT_</name></cpp:macro> <cpp:value>unsigned</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUMAN_</name></cpp:macro> <cpp:value>signed</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHOKUDAI_</name></cpp:macro> <cpp:value>const</cpp:value></cpp:define>
<using>using  <name>ll</name> <init>= <type><name>DANCE_</name> <name>HUMAN_</name> <name>DANCE_</name></type></init>;</using>
<using>using <name>ull</name> <init>= <type><name>DANCE_</name> <name>ROBOT_</name> <name>DANCE_</name></type></init>;</using>
<using>using <name>cll</name> <init>= <type><name>DANCE_</name> <name>DANCE_</name> <name>CHOKUDAI_</name></type></init>;</using>
<using>using  <name>ld</name> <init>= <type><name>long</name> <name>double</name></type></init>;</using>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="line">// ã¢ã¸ã¥ã¼ã«</comment>


<comment type="line">// å¦çåå®¹</comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    
    <comment type="line">// ã¤ã³ã¿ã©ã¯ãã£ãåé¡ã§ã¯é¤å»ããæ¹ããããã</comment>
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>

    <macro><name>REP</name><argument_list>(<argument>ci</argument>, <argument>t</argument>)</argument_list></macro> <block>{

        <decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <macro><name>REP</name><argument_list>(<argument>x</argument>, <argument>a+<literal type="number">1</literal></argument>)</argument_list></macro> <macro><name>REP</name><argument_list>(<argument>y</argument>, <argument>c/<literal type="number">2</literal>+<literal type="number">1</literal></argument>)</argument_list></macro> <block>{
            <if>if <condition>(<expr><name>b</name> <operator>&gt;=</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>y</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>chmax</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><operator>(</operator><name>x</name> <operator>+</operator> <name>y</name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

    }</block>
    
}</block></function></unit>
