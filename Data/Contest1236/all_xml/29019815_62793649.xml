<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29019815_62793649.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0; i&lt;int(n); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RNG</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=int(f); i&lt;=int(t); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REV</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=int(f); i&gt;=int(t); --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v).begin(), (v).end()</cpp:value></cpp:define>
<decl_stmt><decl><type><name>bool</name></type> <name>RELAXED</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
<struct><template>template<parameter_list>&lt;<parameter><type><name>int</name></type></parameter>,<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> struct <name>MINMAX</name><block>{<public type="default"> <decl_stmt><decl><type><name>T</name></type> <name>val</name></decl>;</decl_stmt> <constructor><name>MINMAX</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>val</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>val</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor> </public>}</block>;</struct>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name><name>MINMAX</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>MAX</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>MINMAX</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function><empty_stmt>;</empty_stmt>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name><name>MINMAX</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>MIN</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>MINMAX</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function><empty_stmt>;</empty_stmt>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name><modifier>&amp;</modifier></type> <name>operator<name>|=</name></name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><name><name>MINMAX</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>lhs</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>rhs</name><operator>.</operator><name>val</name></name> <operator>&gt;</operator> <name>lhs</name></expr> ?</condition><then> <expr><operator>(</operator><name>RELAXED</name><operator>=</operator><literal type="boolean">true</literal><operator>,</operator><name><name>rhs</name><operator>.</operator><name>val</name></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>RELAXED</name><operator>=</operator><literal type="boolean">false</literal><operator>,</operator><name>lhs</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</return> }</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name><modifier>&amp;</modifier></type> <name>operator<name>|=</name></name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><name><name>MINMAX</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>lhs</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>rhs</name><operator>.</operator><name>val</name></name> <operator>&lt;</operator> <name>lhs</name></expr> ?</condition><then> <expr><operator>(</operator><name>RELAXED</name><operator>=</operator><literal type="boolean">true</literal><operator>,</operator><name><name>rhs</name><operator>.</operator><name>val</name></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>RELAXED</name><operator>=</operator><literal type="boolean">false</literal><operator>,</operator><name>lhs</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>readVector</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>vec</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt> <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> <return>return <expr><name>vec</name></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>EXIT</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>answer</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>answer</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>vpii</name>;</typedef>
<typedef>typedef <type><name>signed</name> <name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>fastpow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <macro><name>FOR</name><argument_list>(<argument>b</argument>,<argument><literal type="number">60</literal></argument>)</argument_list></macro> <block>{
        <if>if<condition>(<expr><name>k</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><name>b</name><operator>)</operator></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name><operator>*</operator><name>x</name> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name><operator>*</operator><name>x</name> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
    }</block>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>a</name> <init>= <expr><call><name>fastpow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>a</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name><operator>+=</operator><name>MOD</name></expr>;</expr_stmt></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>b</name> <init>= <expr><call><name>fastpow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>b</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
