<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29070381_62791077.cpp"><comment type="block">/*
à¤¤à¥à¤¯à¤à¥à¤¤à¤µà¤¾à¤§à¤°à¥à¤®à¤ à¤ à¤²à¥à¤­à¤ à¤
à¤®à¥à¤¹à¤à¤à¥ à¤¦à¥à¤¯à¤®à¤¾à¤¸à¥à¤¥à¤¿à¤¤à¤¾à¥¤
à¤¯à¥à¤¦à¥à¤§à¥à¤¯à¤§à¥à¤µà¤®à¤¨à¤¹à¤à¤à¤¾à¤°à¤¾
à¤¯à¤¤à¥ à¤§à¤°à¥à¤®à¤¸à¥à¤¤à¤¤à¥ à¤à¤¯à¤à¥¤à¥¤
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<comment type="line">// #include &lt;ext/pb_ds/assoc_container.hpp&gt; </comment>
<comment type="line">// #include &lt;ext/pb_ds/tree_policy.hpp&gt; </comment>
<comment type="line">// using namespace __gnu_pbds;</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro>     <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro>      <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>      <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pa</name></cpp:macro>      <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v1d</name></cpp:macro>     <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v2d</name></cpp:macro>     <cpp:value>vector&lt;vector&lt;int&gt; &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro>       <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MN</name></cpp:macro>      <cpp:value>LLONG_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MX</name></cpp:macro>      <cpp:value>LLONG_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro>      <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro>      <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro>    <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v1s</name></cpp:macro>     <cpp:value>vector&lt;string&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>sort(v.begin(),v.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RS</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>sort(v.rbegin(),v.rend())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>reverse(v.begin(),v.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mxpq</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>priority_queue &lt;T&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mnpq</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>priority_queue&lt;T,vector&lt;T&gt;,greater&lt;T&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name></cpp:macro>       <cpp:value>int tc;cin&gt;&gt;tc;while(tc--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>p2d</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>for(auto a:v){for(auto b:a)cout&lt;&lt;b&lt;&lt;" ";cout&lt;&lt;endl;}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>cout&lt;&lt;a&lt;&lt;" ";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>p1d</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>for(auto a:v)cout&lt;&lt;a&lt;&lt;" ";cout&lt;&lt;endl</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>Weapons19</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>fixed</name><operator>&lt;&lt;</operator><call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
     <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>,  <argument><expr><literal type="string">"r"</literal></expr></argument>,  <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>qqq</name></cpp:macro> <cpp:value>400005</cpp:value></cpp:define>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>Weapons19</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
 	<decl_stmt><decl><type><name>v2d</name></type> <name>v</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><call><name>v1d</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
 	<decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>p</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
 	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
 		<if>if<condition>(<expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
	 		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
	 			<expr_stmt><expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>c</name></expr>;</expr_stmt><expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
	 		}</block></for><expr_stmt><expr><name>p</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	 	}</block></then>
	 	<else>else<block>{
	 		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block>{
	 			<expr_stmt><expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>c</name></expr>;</expr_stmt><expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
	 		}</block></for>
	 		<expr_stmt><expr><name>p</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	 	}</block></else></if>

 	}</block></for>
 	<expr_stmt><expr><call><name>p2d</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

















}</block></function>

</unit>
