<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29082486_62798852.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>num</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>num</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name><name>arr</name><index>[<expr><name>num</name></expr>]</index><index>[<expr><name>num</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>flag</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>l</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>num</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
    	<if>if<condition>(<expr><name>flag</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
    	<block>{
    		<expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    		<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>num</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
    		<block>{
    			<expr_stmt><expr><name><name>arr</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>l</name></expr>;</expr_stmt>
    			<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
    		}</block></for>
    	}</block></then>
    	<else>else
    	<block>{
    		<expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    		<for>for<control>(<init><expr><name>j</name><operator>=</operator><name>num</name><operator>-</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>
    		<block>{
    			<expr_stmt><expr><name><name>arr</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>l</name></expr>;</expr_stmt>
    			<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
    		}</block></for>
    	}</block></else></if>
    }</block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>num</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
    	<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>num</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
    	<block>{
    		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>

    	}</block></for>
    	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
