<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29026072_62811788.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(), (x).end()</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name><init>=<type><name>long</name> <name>long</name></type></init>;</using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>row</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>col</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>curd</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>curx</name><init>=<expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>cury</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mnr</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mxr</name><init>=<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>mnc</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mxc</name><init>=<expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>cnt</name><init>=<expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>bound</name><init>=<expr><operator>(</operator><name>ll</name><operator>)</operator><name>n</name><operator>*</operator><operator>(</operator><name>ll</name><operator>)</operator><name>m</name><operator>-</operator><operator>(</operator><name>ll</name><operator>)</operator><name>k</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>rotated</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>cnt</name><operator>&lt;</operator><name>bound</name></expr>)</condition> <block>{
        <if>if <condition>(<expr><name>curd</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>nxt</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><operator>*</operator><call><name>upper_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>curx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cury</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mxc</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>nxt</name><operator>==</operator><name>cury</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>rotated</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
                <expr_stmt><expr><name>curd</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>rotated</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>cnt</name><operator>+=</operator><call>(<name>ll</name>)<argument_list>(<argument><expr><name>nxt</name><operator>-</operator><name>cury</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>cury</name><operator>=</operator><name>nxt</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>mnr</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>mnr</name></expr></argument>, <argument><expr><name>curx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>rotated</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>curd</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>nxt</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><operator>*</operator><call><name>upper_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>cury</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>curx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mxr</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>nxt</name><operator>==</operator><name>curx</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>rotated</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
                <expr_stmt><expr><name>curd</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>rotated</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>cnt</name><operator>+=</operator><call>(<name>ll</name>)<argument_list>(<argument><expr><name>nxt</name><operator>-</operator><name>curx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>curx</name><operator>=</operator><name>nxt</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>mxc</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>mxc</name></expr></argument>, <argument><expr><name>cury</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>rotated</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>curd</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>nxt</name><init>=<expr><call><name>max</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>--</operator><call><name>lower_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>curx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cury</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>mnc</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>nxt</name><operator>==</operator><name>cury</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>rotated</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
                <expr_stmt><expr><name>curd</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt> <expr_stmt><expr><name>rotated</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>cnt</name><operator>+=</operator><call>(<name>ll</name>)<argument_list>(<argument><expr><name>cury</name><operator>-</operator><name>nxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>cury</name><operator>=</operator><name>nxt</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>mxr</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>mxr</name></expr></argument>, <argument><expr><name>curx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>rotated</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if></elseif> <else>else <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>nxt</name><init>=<expr><call><name>max</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>--</operator><call><name>lower_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>cury</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>curx</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>mnr</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>nxt</name><operator>==</operator><name>curx</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>rotated</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
                <expr_stmt><expr><name>curd</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>rotated</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>cnt</name><operator>+=</operator><call>(<name>ll</name>)<argument_list>(<argument><expr><name>curx</name><operator>-</operator><name>nxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>curx</name><operator>=</operator><name>nxt</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>mnc</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>mnc</name></expr></argument>, <argument><expr><name>cury</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>rotated</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block></while>

    <if>if <condition>(<expr><name>cnt</name><operator>==</operator><name>bound</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal></expr>;</expr_stmt></block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
