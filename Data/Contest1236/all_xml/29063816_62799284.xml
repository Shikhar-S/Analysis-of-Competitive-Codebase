<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29063816_62799284.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Zeroes</name></cpp:macro> <cpp:value>ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Auto</name></cpp:macro> <cpp:value>int main()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Accepted</name></cpp:macro> <cpp:value>{return 0;}</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>Max</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><literal type="number">400</literal></expr>]</index><index>[<expr><literal type="number">400</literal></expr>]</index></name></decl>;</decl_stmt>
<macro><name>Auto</name></macro> <block>{
    <decl_stmt><decl><type><name>Zeroes</name></type>
    <name>cin</name> &gt;&gt; <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><name>n</name><operator>*</operator><name>n</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>f</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>x</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name>f</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>-</operator> <name>n</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>f</name> <operator>=</operator> <operator>!</operator><name>f</name></expr>;</expr_stmt>
        }</block></then><else>else<block>{
            <expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>f</name> <operator>=</operator> <operator>!</operator><name>f</name></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <for>for<control>(<init><decl><type><name>ll</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name>f</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>f</name> <operator>=</operator> <operator>!</operator><name>f</name></expr>;</expr_stmt>
            }</block></then><else>else<block>{
                <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>f</name> <operator>=</operator> <operator>!</operator><name>f</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <if>if<condition>(<expr><name>n</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <operator>!</operator><name>f</name></expr>;</expr_stmt></block></then></if>
    }</block></for>

    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <for>for<control>(<init><decl><type><name>ll</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><name>Accepted</name></expr></expr_stmt>
}</block>
</unit>
