<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29080790_62807644.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rrep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&gt;=b;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fore</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto &amp;i:a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(),(x).end()</cpp:value></cpp:define>
<comment type="line">//#pragma GCC optimize ("-O3")</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using> <function_decl><type><name>void</name></type> <name>_main</name><parameter_list>()</parameter_list>;</function_decl> <function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_main</name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></function>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef> <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><name>INT_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>infl</name> <init>= <expr><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>bool</name></type> <name>chmax</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return> }</block></then></if> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>bool</name></type> <name>chmin</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <name>a</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return> }</block></then></if> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></function>
<comment type="line">//---------------------------------------------------------------------------------------------------</comment>
<comment type="line">// StaticHealthy2DSegtree</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>def</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<using>using <name>V</name> <init>= <type><name>int</name></type></init>;</using>
<function><type><name>V</name></type> <name>comp</name><parameter_list>(<parameter><decl><type><name>V</name><modifier>&amp;</modifier></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>V</name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>l</name><operator>+</operator><name>r</name></expr>;</return> }</block></function><empty_stmt>;</empty_stmt>
<struct>struct <name>SegTree</name> <block>{<public type="default"> <comment type="line">//[l,r)</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>NV</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>V</name></expr></argument>&gt;</argument_list></name></type> <name>val</name></decl>;</decl_stmt>
    <function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>NV</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>NV</name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>NV</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></while>
        <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>V</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>NV</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>V</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>r</name> <operator>&lt;=</operator> <name>x</name> <operator>||</operator> <name>y</name> <operator>&lt;=</operator> <name>l</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>def</name></expr>;</return></block></then></if> <if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <name>l</name><operator>&amp;&amp;</operator><name>r</name> <operator>&lt;=</operator> <name>y</name></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>val</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</return></block></then></if>
        <decl_stmt><decl><type><name>auto</name></type> <name>a</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>k</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>auto</name></type> <name>b</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>k</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><call><name>comp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><type><name>V</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>get</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NV</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
    <function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>V</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>NV</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> <while>while <condition>(<expr><name>i</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>comp</name><argument_list>(<argument><expr><name><name>val</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while> }</block></function>
    <function><type><name>void</name></type> <name>compupdate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>V</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>comp</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>i</name> <operator>+</operator> <name>NV</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
    <function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>V</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>i</name> <operator>+</operator> <name>NV</name></expr>]</index></name> <operator>+</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
    <function type="operator"><type><name>V</name></type> <name>operator<name>[]</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>get</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
</public>}</block>;</struct>

<struct>struct <name>StaticHealthy2DSegTree</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>NV</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SegTree</name></expr></argument>&gt;</argument_list></name></type> <name>st</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>index</name></decl>;</decl_stmt>
    
    <function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>V</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>NV</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <while>while <condition>(<expr><name>NV</name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>NV</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></while>
        <expr_stmt><expr><call><name><name>index</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>NV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>n</argument>)</argument_list></macro> <macro><name>fore</name><argument_list>(<argument>p</argument>, <argument>v[i]</argument>)</argument_list></macro> <expr_stmt><expr><name><name>index</name><index>[<expr><name>i</name> <operator>+</operator> <name>NV</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>rrep</name><argument_list>(<argument>i</argument>, <argument>NV * <literal type="number">2</literal> - <literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro> <block>{
            <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>index</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>index</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>index</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><call><name>unique</name><argument_list>(<argument><expr><name><name>index</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>index</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>index</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <macro><name>fore</name><argument_list>(<argument>j</argument>, <argument>index[i]</argument>)</argument_list></macro> <expr_stmt><expr><name><name>index</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>NV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>NV * <literal type="number">2</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>st</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>init</name><argument_list>(<argument><expr><name><name>index</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>n</argument>)</argument_list></macro> <macro><name>fore</name><argument_list>(<argument>p</argument>, <argument>v[i]</argument>)</argument_list></macro> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>index</name><index>[<expr><name>i</name> <operator>+</operator> <name>NV</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>index</name><index>[<expr><name>i</name> <operator>+</operator> <name>NV</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>index</name><index>[<expr><name>i</name> <operator>+</operator> <name>NV</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>st</name><index>[<expr><name>i</name> <operator>+</operator> <name>NV</name></expr>]</index></name><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>

        <macro><name>rrep</name><argument_list>(<argument>i</argument>, <argument>NV * <literal type="number">2</literal> - <literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro> <block>{
            <macro><name>rep</name><argument_list>(<argument>j</argument>, <argument><literal type="number">0</literal></argument>, <argument>index[i].size()</argument>)</argument_list></macro> <block>{
                <decl_stmt><decl><type><name>V</name></type> <name>v</name> <init>= <expr><name><name>st</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                
                <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>index</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>index</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>index</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>index</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>st</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>compupdate</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
        }</block>
    }</block></function>
    <function><type><name>V</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ty</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>k</name> <operator>&lt;</operator> <name>NV</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>l</name> <operator>&lt;</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>r</name> <operator>&lt;=</operator> <name>sx</name> <operator>or</operator> <name>tx</name> <operator>&lt;=</operator> <name>l</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>def</name></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name>sx</name> <operator>&lt;=</operator> <name>l</name> <operator>and</operator> <name>r</name> <operator>&lt;=</operator> <name>tx</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>syy</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>index</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>index</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sy</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>index</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>tyy</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>index</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>index</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ty</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>index</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><name><name>st</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>syy</name></expr></argument>, <argument><expr><name>tyy</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>md</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>V</name></type> <name>le</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><name>sx</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>ty</name></expr></argument>, <argument><expr><name>k</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>V</name></type> <name>ri</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><name>sx</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>ty</name></expr></argument>, <argument><expr><name>k</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>md</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>comp</name><argument_list>(<argument><expr><name>le</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><type><name>V</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ty</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>get</name><argument_list>(<argument><expr><name>sx</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>ty</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NV</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
</public>}</block>;</struct>
<comment type="block">/*---------------------------------------------------------------------------------------------------
ããããããããããã â§ï¼¿â§
ããããã â§ï¼¿â§ ãï¼Â´&lt;_ï½ ï¼ã Welcome to My Coding Space!
ãããã ï¼ Â´_ã`ï¼ã/ã âi     @hamayanhamayan
ããããï¼ãããï¼¼ã ã  |ã|
ããã /ãã /ï¿£ï¿£ï¿£ï¿£/ãã|
ã ï¼¿_(__ï¾ã¤/ã    ï¼¿/ .| .|ï¼¿ï¼¿ï¼¿ï¼¿
ã ãããï¼¼/ï¼¿ï¼¿ï¼¿ï¼¿/ãï¼uãâ
---------------------------------------------------------------------------------------------------*/</comment>














<decl_stmt><decl><type><name>int</name></type> <name>H</name></decl>, <decl><type ref="prev"/><name>W</name></decl>, <decl><type ref="prev"/><name>K</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StaticHealthy2DSegTree</name></type> <name>st</name></decl>;</decl_stmt>
<enum>enum <block>{ <decl><name>UP</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>RIGHT</name></decl>, <decl><name>DOWN</name></decl>, <decl><name>LEFT</name></decl> }</block>;</enum>
<decl_stmt><decl><type><name>int</name></type> <name><name>dx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name><name>dy</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<comment type="line">//---------------------------------------------------------------------------------------------------</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yes</name></cpp:macro> <cpp:value>"Yes"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>no</name></cpp:macro> <cpp:value>"No"</cpp:value></cpp:define>
<function><type><name>string</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>H</name> <operator>&gt;&gt;</operator> <name>W</name> <operator>&gt;&gt;</operator> <name>K</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>dic</name><argument_list>(<argument><expr><name>W</name></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>k</argument>, <argument><literal type="number">0</literal></argument>, <argument>K</argument>)</argument_list></macro> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>y</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt> <expr_stmt><expr><name>y</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dic</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><block>{ <expr><name>y</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>dic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dir</name> <init>= <expr><name>RIGHT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>sx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tx</name> <init>= <expr><name>W</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ty</name> <init>= <expr><name>H</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{
		<while>while <condition>(<expr><name>sx</name> <operator>&lt;</operator> <name>tx</name> <operator>and</operator> <name>ty</name> <operator>-</operator> <name>sy</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <call><name><name>st</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>tx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>ty</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>tx</name><operator>--</operator></expr>;</expr_stmt></block></while>
		<if>if <condition>(<expr><call><name><name>st</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>sx</name></expr></argument>, <argument><expr><name>tx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>sy</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>no</name></expr>;</return></block></then></if>
		<if>if <condition>(<expr><name>sy</name> <operator>==</operator> <name>ty</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>yes</name></expr>;</return></block></then></if>
		<if>if <condition>(<expr><call><name><name>st</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>sx</name></expr></argument>, <argument><expr><name>tx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>sy</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ty</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1LL</literal> <operator>*</operator> <operator>(</operator><name>tx</name> <operator>-</operator> <name>sx</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>ty</name> <operator>-</operator> <name>sy</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>yes</name></expr>;</return></block></then></if>
		<expr_stmt><expr><name>sy</name><operator>++</operator></expr>;</expr_stmt>

		<while>while <condition>(<expr><name>sy</name> <operator>&lt;</operator> <name>ty</name> <operator>and</operator> <name>tx</name> <operator>-</operator> <name>sx</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <call><name><name>st</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>sx</name></expr></argument>, <argument><expr><name>tx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ty</name></expr></argument>, <argument><expr><name>ty</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>ty</name><operator>--</operator></expr>;</expr_stmt></block></while>
		<if>if <condition>(<expr><call><name><name>st</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>tx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>ty</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>no</name></expr>;</return></block></then></if>
		<if>if <condition>(<expr><name>sx</name> <operator>==</operator> <name>tx</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>yes</name></expr>;</return></block></then></if>
		<if>if <condition>(<expr><call><name><name>st</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>sx</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>ty</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1LL</literal> <operator>*</operator> <operator>(</operator><name>tx</name> <operator>-</operator> <name>sx</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>ty</name> <operator>-</operator> <name>sy</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>yes</name></expr>;</return></block></then></if>
		<expr_stmt><expr><name>tx</name><operator>--</operator></expr>;</expr_stmt>

		<while>while <condition>(<expr><name>sx</name> <operator>&lt;</operator> <name>tx</name> <operator>and</operator> <name>ty</name> <operator>-</operator> <name>sy</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <call><name><name>st</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>ty</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>sx</name><operator>++</operator></expr>;</expr_stmt></block></while>
		<if>if <condition>(<expr><call><name><name>st</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>sx</name></expr></argument>, <argument><expr><name>tx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ty</name></expr></argument>, <argument><expr><name>ty</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>no</name></expr>;</return></block></then></if>
		<if>if <condition>(<expr><name>sy</name> <operator>==</operator> <name>ty</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>yes</name></expr>;</return></block></then></if>
		<if>if <condition>(<expr><call><name><name>st</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>sx</name></expr></argument>, <argument><expr><name>tx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>ty</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1LL</literal> <operator>*</operator> <operator>(</operator><name>tx</name> <operator>-</operator> <name>sx</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>ty</name> <operator>-</operator> <name>sy</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>yes</name></expr>;</return></block></then></if>
		<expr_stmt><expr><name>ty</name><operator>--</operator></expr>;</expr_stmt>

		<while>while <condition>(<expr><name>sy</name> <operator>&lt;</operator> <name>ty</name> <operator>and</operator> <name>tx</name> <operator>-</operator> <name>sx</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <call><name><name>st</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>sx</name></expr></argument>, <argument><expr><name>tx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>sy</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>sy</name><operator>++</operator></expr>;</expr_stmt></block></while>
		<if>if <condition>(<expr><call><name><name>st</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>ty</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>no</name></expr>;</return></block></then></if>
		<if>if <condition>(<expr><name>sx</name> <operator>==</operator> <name>tx</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>yes</name></expr>;</return></block></then></if>
		<if>if <condition>(<expr><call><name><name>st</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>sx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>ty</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1LL</literal> <operator>*</operator> <operator>(</operator><name>tx</name> <operator>-</operator> <name>sx</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>ty</name> <operator>-</operator> <name>sy</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>yes</name></expr>;</return></block></then></if>
		<expr_stmt><expr><name>sx</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
}</block></function>
<comment type="line">//---------------------------------------------------------------------------------------------------</comment>
<function><type><name>void</name></type> <name>_main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>solve</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>
</unit>
