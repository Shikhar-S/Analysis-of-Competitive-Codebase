<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29049648_62792846.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>lli</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<function><type><name>lli</name></type> <name>binPow</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>lli</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <return>return <expr><name>num</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>lli</name></type> <name>b</name> <init>= <expr><call><name>binPow</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>b</name> <operator>*</operator> <name>b</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>p</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>b</name> <operator>*</operator> <name>num</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>b</name> <operator>%</operator> <name>MOD</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <comment type="line">// ifstream cin("biconv.in");</comment>
    <comment type="line">// ofstream cout("biconv.out");</comment>
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>binPow</name><argument_list>(<argument><expr><operator>(</operator><call><name>binPow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>MOD</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>MOD</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
