<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29064439_62788984.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl> , <decl><type ref="prev"/><name>a</name></decl> , <decl><type ref="prev"/><name>b</name></decl> , <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>res1</name></decl> , <decl><type ref="prev"/><name>res2</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list> <block>{
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>T</name><operator>--</operator></expr> )</condition> <block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr> <operator>,</operator> <expr><name>res1</name> <operator>=</operator> <name>res2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ta</name> <init>= <expr><name>a</name></expr></init></decl> , <decl><type ref="prev"/><name>tb</name> <init>= <expr><name>b</name></expr></init></decl> , <decl><type ref="prev"/><name>tc</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>res1</name> <operator>+=</operator> <call><name>min</name><argument_list>( <argument><expr><name>b</name></expr></argument> , <argument><expr><operator>(</operator> <name>c</name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator></expr></argument> )</argument_list></call> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>tb</name> <operator>-=</operator> <call><name>min</name><argument_list>( <argument><expr><name>b</name></expr></argument> , <argument><expr><operator>(</operator> <name>c</name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>res1</name> <operator>+=</operator> <call><name>min</name><argument_list>( <argument><expr><name>a</name></expr></argument> , <argument><expr><operator>(</operator> <name>tb</name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator></expr></argument> )</argument_list></call> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>tb</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>res2</name> <operator>+=</operator> <call><name>min</name><argument_list>( <argument><expr><name>a</name></expr></argument> , <argument><expr><operator>(</operator> <name>b</name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator></expr></argument> )</argument_list></call> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>tb</name> <operator>-=</operator> <call><name>min</name><argument_list>( <argument><expr><name>a</name></expr></argument> , <argument><expr><operator>(</operator> <name>b</name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator></expr></argument> )</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>res2</name> <operator>+=</operator> <call><name>min</name><argument_list>( <argument><expr><name>tb</name></expr></argument> , <argument><expr><operator>(</operator> <name>c</name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator></expr></argument> )</argument_list></call> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><call><name>max</name><argument_list>( <argument><expr><name>res1</name></expr></argument> , <argument><expr><name>res2</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
