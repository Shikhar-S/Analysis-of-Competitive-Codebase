<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29086684_62811084.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>blockx</name></decl>,<decl><type ref="prev"/><name>blocky</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>turn</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>dir</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>tk</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>curx</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>cury</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ux</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>vx</name></decl>,<decl><type ref="prev"/><name>uy</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>vy</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tk</name><operator>=</operator><name>k</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>vx</name><operator>=</operator><name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>vy</name><operator>=</operator><name>m</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>k</name><operator>--</operator></expr>)</condition><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>blockx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>blocky</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{
        <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>itr</name><init>=<expr><name><name>blockx</name><index>[<expr><name>curx</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>cury</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if<condition>(<expr><name>itr</name><operator>!=</operator><name><name>blockx</name><index>[<expr><name>curx</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                <expr_stmt><expr><name>vy</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>vy</name></expr></argument>,<argument><expr><operator>*</operator><name>itr</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">//prllf("%d\n",(ll)blockx[curx].size());</comment>
            }</block></then></if>
            <comment type="line">//prllf("%d\n",vy);</comment>
            <expr_stmt><expr><name>res</name><operator>+=</operator><operator>(</operator><name>vy</name><operator>-</operator><name>cury</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>cury</name><operator>=</operator><name>vy</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ux</name><operator>=</operator><name>curx</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>turn</name><index>[<expr><name>curx</name></expr>]</index><index>[<expr><name>cury</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>turn</name><index>[<expr><name>curx</name></expr>]</index><index>[<expr><name>cury</name></expr>]</index></name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
        }</block></then>
        <elseif>else <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>itr</name><init>=<expr><name><name>blocky</name><index>[<expr><name>cury</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>curx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>itr</name><operator>!=</operator><name><name>blocky</name><index>[<expr><name>cury</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>vx</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>vx</name></expr></argument>,<argument><expr><operator>*</operator><name>itr</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>res</name><operator>+=</operator><operator>(</operator><name>vx</name><operator>-</operator><name>curx</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>curx</name><operator>=</operator><name>vx</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>vy</name><operator>=</operator><name>cury</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>turn</name><index>[<expr><name>curx</name></expr>]</index><index>[<expr><name>cury</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>turn</name><index>[<expr><name>curx</name></expr>]</index><index>[<expr><name>cury</name></expr>]</index></name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>itr</name><init>=<expr><name><name>blockx</name><index>[<expr><name>curx</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>cury</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><operator>!</operator><name><name>blockx</name><index>[<expr><name>curx</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>itr</name><operator>!=</operator><name><name>blockx</name><index>[<expr><name>curx</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                   <expr_stmt><expr><name>itr</name><operator>--</operator></expr>;</expr_stmt>
                   <expr_stmt><expr><name>uy</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>uy</name></expr></argument>,<argument><expr><operator>*</operator><name>itr</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <expr_stmt><expr><name>res</name><operator>+=</operator><operator>(</operator><name>cury</name><operator>-</operator><name>uy</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>cury</name><operator>=</operator><name>uy</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">4</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>vx</name><operator>=</operator><name>curx</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>turn</name><index>[<expr><name>curx</name></expr>]</index><index>[<expr><name>cury</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>turn</name><index>[<expr><name>curx</name></expr>]</index><index>[<expr><name>cury</name></expr>]</index></name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
        }</block></then></if></elseif>
        <else>else <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>itr</name><init>=<expr><name><name>blocky</name><index>[<expr><name>cury</name></expr>]</index></name><operator>.</operator><call><name>upper_bound</name><argument_list>(<argument><expr><name>curx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><operator>!</operator><name><name>blocky</name><index>[<expr><name>cury</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>itr</name><operator>!=</operator><name><name>blocky</name><index>[<expr><name>cury</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                   <expr_stmt><expr><name>itr</name><operator>--</operator></expr>;</expr_stmt>
                   <expr_stmt><expr><name>ux</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>ux</name></expr></argument>,<argument><expr><operator>*</operator><name>itr</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <expr_stmt><expr><name>res</name><operator>+=</operator><operator>(</operator><name>curx</name><operator>-</operator><name>ux</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>curx</name><operator>=</operator><name>ux</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>uy</name><operator>=</operator><name>cury</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>turn</name><index>[<expr><name>curx</name></expr>]</index><index>[<expr><name>cury</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>turn</name><index>[<expr><name>curx</name></expr>]</index><index>[<expr><name>cury</name></expr>]</index></name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
        }</block></else></if>
        <comment type="line">//printf("%lld %lld\n",curx,cury);</comment>
    }</block></while>
    <if>if<condition>(<expr><name>res</name><operator>+</operator><name>tk</name><operator>==</operator><name>n</name><operator>*</operator><name>m</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
}</block></function>
</unit>
