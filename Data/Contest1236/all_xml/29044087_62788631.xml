<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29044087_62788631.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>MOD</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>

<function><type><name>LL</name></type> <name>modex</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>e</name></decl></parameter> , <parameter><decl><type><name>LL</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>LL</name></type> <name>r</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>e</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{
		<if>if<condition>(<expr><operator>(</operator><name>e</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>r</name><operator>=</operator><operator>(</operator><name>r</name><operator>*</operator><name>b</name><operator>)</operator><operator>%</operator><name>m</name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name>e</name> <operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name><operator>=</operator><operator>(</operator><name>b</name><operator>*</operator><name>b</name><operator>)</operator> <operator>%</operator><name>m</name></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><operator>(</operator><name>LL</name><operator>)</operator><name>r</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>LL</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>LL</name></type> <name>base</name><init>=<expr><operator>(</operator><call><name>modex</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>MOD</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>+</operator><name>MOD</name><operator>)</operator><operator>%</operator><name>MOD</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>modex</name><argument_list>(<argument><expr><name>base</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>MOD</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


</unit>
