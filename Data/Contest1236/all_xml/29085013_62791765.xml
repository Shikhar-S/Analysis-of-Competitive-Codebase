<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29085013_62791765.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007LL</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>, <argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<function><type><name>LL</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1LL</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>LL</name></type> <name>ret</name><init>=<expr><call><name>pow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>b</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>ret</name><operator>*</operator><name>ret</name><operator>%</operator><name>mod</name><operator>*</operator><name>a</name><operator>%</operator><name>mod</name></expr>;</return></block></then></if>
    <return>return <expr><name>ret</name><operator>*</operator><name>ret</name><operator>%</operator><name>mod</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>LL</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><call><name>pow</name><argument_list>(<argument><expr><call><name>pow</name><argument_list>(<argument><expr><literal type="number">2LL</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>-</operator><operator>(</operator><name>LL</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
