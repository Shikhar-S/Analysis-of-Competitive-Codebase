<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29068639_62786250.cpp"><cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>FILE</name></cpp:macro></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>FILEs</name></cpp:ifdef>
        <expr_stmt><expr><call><name>freopen</name><argument_list>( <argument><expr><literal type="string">"ANSWER.IN"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freopen</name><argument_list>( <argument><expr><literal type="string">"ANSWER.OUT"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// FILE</comment>

    <cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>FILEs</name></cpp:ifdef>
        <expr_stmt><expr><call><name>freopen</name><argument_list>( <argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freopen</name><argument_list>( <argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// FILE</comment>
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>( <argument><expr><literal type="boolean">false</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <while>while<condition>( <expr><name>t</name> <operator>--</operator></expr> )</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
        <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control><block>{
            <for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr> )</control><block>{
                <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><call><name>min</name><argument_list>( <argument><expr><name>i</name></expr></argument>, <argument><expr><name>a</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><call><name>min</name><argument_list>( <argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>b</name> <operator>-</operator> <name>x</name><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><call><name>min</name><argument_list>( <argument><expr><call><name>min</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>min</name><argument_list>( <argument><expr><name>c</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>j</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>max</name><argument_list>( <argument><expr><name>ans</name></expr></argument>, <argument><expr><name>x</name><operator>*</operator><literal type="number">3</literal><operator>+</operator><name>z</name><operator>*</operator><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></for>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


</unit>
