<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29066305_62810440.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MX</name> <init>= <expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>sx</name><index>[<expr><name>MX</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>sy</name><index>[<expr><name>MX</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>grt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>MX</name></expr>;</return></block></then>
	<else>else <block type="pseudo"><return>return <expr><operator>*</operator><name>it</name></expr>;</return></block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>les</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>upper_bound</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>*</operator><call><name><name>s</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>-</operator><name>MX</name></expr>;</return></block></then></if>
	<expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
	<return>return <expr><operator>*</operator><name>it</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">1LL</literal> <operator>*</operator> <name>n</name> <operator>*</operator> <name>m</name> <operator>-</operator> <name>k</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sx</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sy</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name>n</name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>t</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>r</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&lt;=</operator> <name>t</name></expr>)</condition> <block>{
		<if>if<condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<if>if<condition>(<expr><name><name>sx</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>grt</name><argument_list>(<argument><expr><name><name>sx</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name>cnt</name> <operator>-=</operator> <operator>(</operator><name>t</name> <operator>-</operator> <name>b</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then> <elseif>else <if>if<condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
			<if>if<condition>(<expr><name><name>sy</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>grt</name><argument_list>(<argument><expr><name><name>sy</name><index>[<expr><name>t</name></expr>]</index></name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name>cnt</name> <operator>-=</operator> <operator>(</operator><name>r</name> <operator>-</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <literal type="number">3</literal></expr><operator>,</operator> <expr><name>t</name><operator>--</operator></expr>;</expr_stmt>
		}</block></then></if></elseif> <elseif>else <if>if<condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{
			<if>if<condition>(<expr><name><name>sx</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>les</name><argument_list>(<argument><expr><name><name>sx</name><index>[<expr><name>r</name></expr>]</index></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name>cnt</name> <operator>-=</operator> <operator>(</operator><name>t</name> <operator>-</operator> <name>b</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <literal type="number">4</literal></expr><operator>,</operator> <expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
		}</block></then></if></elseif> <else>else <block>{
			<if>if<condition>(<expr><name><name>sy</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><call><name>les</name><argument_list>(<argument><expr><name><name>sy</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name>cnt</name> <operator>-=</operator> <operator>(</operator><name>r</name> <operator>-</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>b</name><operator>++</operator></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>
	
	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><ternary><condition><expr><name>cnt</name></expr> ?</condition><then> <expr><literal type="string">"No"</literal></expr> </then><else>: <expr><literal type="string">"Yes"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

		
</unit>
