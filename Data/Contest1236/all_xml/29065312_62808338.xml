<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29065312_62808338.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VI</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>R</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>C</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>movx</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>movy</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>LL</name></type> <name>tot</name> <init>= <expr><name>n</name><operator>*</operator><literal type="number">1LL</literal><operator>*</operator><name>m</name> <operator>-</operator> <name>k</name></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>R</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>C</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>change</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>mincol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxcol</name> <init>= <expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>minrow</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxrow</name> <init>= <expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LL</name></type> <name>vis</name> <init>= <expr><literal type="number">1LL</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition><block>{
		<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>pr</name> <init>= <expr><name>r</name></expr></init></decl>, <decl><type ref="prev"/><name>pc</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>it</name> <operator>=</operator> <name><name>R</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>it</name> <operator>==</operator> <name><name>R</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>c</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>it</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>maxcol</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>maxcol</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>vis</name> <operator>+=</operator> <call><name>llabs</name><argument_list>(<argument><expr><name>c</name><operator>-</operator><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then><elseif>else <if>if<condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>it</name> <operator>=</operator> <name><name>C</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>it</name> <operator>==</operator> <name><name>C</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <operator>*</operator><name>it</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>maxrow</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>maxrow</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>vis</name> <operator>+=</operator> <call><name>llabs</name><argument_list>(<argument><expr><name>r</name><operator>-</operator><name>pr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif><elseif>else <if>if<condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>it</name> <operator>=</operator> <name><name>R</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>it</name> <operator>==</operator> <name><name>R</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>--</operator><name>it</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mincol</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>mincol</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>vis</name> <operator>+=</operator> <call><name>llabs</name><argument_list>(<argument><expr><name>c</name><operator>-</operator><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif><else>else<block>{
			<expr_stmt><expr><name>it</name> <operator>=</operator> <name><name>C</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>it</name> <operator>==</operator> <name><name>C</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>--</operator><name>it</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>minrow</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>minrow</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>vis</name> <operator>+=</operator> <call><name>llabs</name><argument_list>(<argument><expr><name>r</name><operator>-</operator><name>pr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<if>if<condition>(<expr><name>pr</name> <operator>==</operator> <name>r</name> <operator>&amp;&amp;</operator> <name>pc</name> <operator>==</operator> <name>c</name></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name>change</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		}</block></then></if>
		<expr_stmt><expr><name>change</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>(</operator><name>dir</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>vis</name> <operator>==</operator> <name>tot</name></expr> ?</condition><then> <expr><literal type="string">"Yes"</literal></expr></then><else>:<expr><literal type="string">"No"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
