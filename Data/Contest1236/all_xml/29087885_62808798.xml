<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29087885_62808798.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastio</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>loop</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>int t;cin&gt;&gt;t;loop(test,1,t+1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mkp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nl</name></cpp:macro> <cpp:value>cout&lt;&lt;"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sp</name></cpp:macro> <cpp:value>cout&lt;&lt;" "</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vl</name></cpp:macro> <cpp:value>vector&lt;ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vii</name></cpp:macro> <cpp:value>vector&lt;pii&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vll</name></cpp:macro> <cpp:value>vector&lt;pll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>

<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>C</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>min_self</name><parameter_list>( <parameter><decl><type><name>C</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>C</name></type> <name>b</name></decl></parameter> )</parameter_list><block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>C</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>max_self</name><parameter_list>( <parameter><decl><type><name>C</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>C</name></type> <name>b</name></decl></parameter> )</parameter_list><block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>

<function><type><name>ll</name></type> <name>mod</name><parameter_list>( <parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>m</name><init>=<expr><name>MOD</name></expr></init></decl></parameter> )</parameter_list><block>{ <expr_stmt><expr><name>n</name><operator>%=</operator><name>m</name></expr><operator>,</operator><expr><name>n</name><operator>+=</operator><name>m</name></expr><operator>,</operator><expr><name>n</name><operator>%=</operator><name>m</name></expr>;</expr_stmt><return>return <expr><name>n</name></expr>;</return> }</block></function>

<decl_stmt><decl><type><name>mt19937</name></type> <name>rng</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<struct>struct <name>custom_hash</name> <block>{<public type="default">
    <function><specifier>static</specifier> <type><name>uint64_t</name></type> <name>splitmix64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// http://xorshift.di.unimi.it/splitmix64.c</comment>
        <expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">0x9e3779b97f4a7c15</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>^</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">0xbf58476d1ce4e5b9</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>^</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">27</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">0x94d049bb133111eb</literal></expr>;</expr_stmt>
        <return>return <expr><name>x</name> <operator>^</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <function type="operator"><type><name>size_t</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
        <decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>uint64_t</name></type> <name>FIXED_RANDOM</name> <init>= <expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>splitmix64</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>FIXED_RANDOM</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
</public>}</block>;</struct>

<decl_stmt><decl><type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>custom_hash</name></expr></argument>&gt;</argument_list></name></type> <name>safe_map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>LOGN</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name> <init>= <expr><literal type="number">1e14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dx</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dy</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>row</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>col</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>lower_bound</name><parameter_list>( <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lim</name></decl></parameter> )</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>lo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>hi</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>mid</name></decl>, <decl><type ref="prev"/><name>tans</name> <init>= <expr><name>lim</name></expr></init></decl>;</decl_stmt>
    <while>while<condition>( <expr><name>lo</name> <operator>&lt;=</operator> <name>hi</name></expr> )</condition>
    <block>{
        <expr_stmt><expr><name>mid</name> <operator>=</operator> <name>lo</name> <operator>+</operator> <operator>(</operator><name>hi</name><operator>-</operator><name>lo</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

        <if>if<condition>( <expr><name><name>a</name><index>[<expr><name>mid</name></expr>]</index></name> <operator>&gt;=</operator> <name>val</name></expr> )</condition><then>
        <block>{
            <expr_stmt><expr><name>tans</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>mid</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>hi</name> <operator>=</operator> <name>mid</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>lo</name> <operator>=</operator> <name>mid</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <return>return <expr><call><name>min</name><argument_list>(<argument><expr><name>tans</name></expr></argument>,<argument><expr><name>lim</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>upper_bound</name><parameter_list>( <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lim</name></decl></parameter> )</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>lo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>hi</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>mid</name></decl>, <decl><type ref="prev"/><name>tans</name> <init>= <expr><name>lim</name></expr></init></decl>;</decl_stmt>
    <while>while<condition>( <expr><name>lo</name> <operator>&lt;=</operator> <name>hi</name></expr> )</condition>
    <block>{
        <expr_stmt><expr><name>mid</name> <operator>=</operator> <name>lo</name> <operator>+</operator> <operator>(</operator><name>hi</name><operator>-</operator><name>lo</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

        <if>if<condition>( <expr><name><name>a</name><index>[<expr><name>mid</name></expr>]</index></name> <operator>&lt;=</operator> <name>val</name></expr> )</condition><then>
        <block>{
            <expr_stmt><expr><name>tans</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>mid</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>lo</name> <operator>=</operator> <name>mid</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>hi</name> <operator>=</operator> <name>mid</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <return>return <expr><call><name>max</name><argument_list>(<argument><expr><name>tans</name></expr></argument>,<argument><expr><name>lim</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> 
<block>{
    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>fastio</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name><operator>--</operator></expr><operator>,</operator><expr><name>y</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>row</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>MAXN</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>mxy</name> <init>= <expr><name>m</name></expr></init></decl>, <decl><type ref="prev"/><name>mxx</name> <init>= <expr><name>n</name></expr></init></decl>, <decl><type ref="prev"/><name>mny</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>mnx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nowx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nowy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nowdir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>add</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>prev</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>go</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>now</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">// cout&lt;&lt;nowdir&lt;&lt;" "&lt;&lt;nowx&lt;&lt;" "&lt;&lt;nowy&lt;&lt;" ";</comment>
        <switch>switch<condition>( <expr><name>nowdir</name></expr> )</condition>
        <block>{
            <case>case <expr><literal type="number">0</literal></expr>:</case>
                <expr_stmt><expr><name>go</name> <operator>=</operator> <call><name>lower_bound</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>nowx</name></expr>]</index></name></expr></argument>,<argument><expr><name>nowy</name></expr></argument>,<argument><expr><name>mxy</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>now</name> <operator>+=</operator> <operator>(</operator><name>go</name><operator>-</operator><name>nowy</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>mxy</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>mxy</name></expr></argument>, <argument><expr><name>go</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>nowy</name> <operator>=</operator> <name>go</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="number">1</literal></expr>:</case>
                <expr_stmt><expr><name>go</name> <operator>=</operator> <call><name>lower_bound</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>nowy</name></expr>]</index></name></expr></argument>,<argument><expr><name>nowx</name></expr></argument>,<argument><expr><name>mxx</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>now</name> <operator>+=</operator> <operator>(</operator><name>go</name><operator>-</operator><name>nowx</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>mxx</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>mxx</name></expr></argument>, <argument><expr><name>go</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>nowx</name> <operator>=</operator> <name>go</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="number">2</literal></expr>:</case>
                <expr_stmt><expr><name>go</name> <operator>=</operator> <call><name>upper_bound</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>nowx</name></expr>]</index></name></expr></argument>,<argument><expr><name>nowy</name></expr></argument>,<argument><expr><name>mny</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>now</name> <operator>+=</operator> <operator>(</operator><name>nowy</name><operator>-</operator><name>go</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>mny</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>mny</name></expr></argument>, <argument><expr><name>go</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>nowy</name> <operator>=</operator> <name>go</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="number">3</literal></expr>:</case>
                <expr_stmt><expr><name>go</name> <operator>=</operator> <call><name>upper_bound</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>nowy</name></expr>]</index></name></expr></argument>,<argument><expr><name>nowx</name></expr></argument>,<argument><expr><name>mnx</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>now</name> <operator>+=</operator> <operator>(</operator><name>nowx</name><operator>-</operator><name>go</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>mnx</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>mnx</name></expr></argument>, <argument><expr><name>go</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>nowx</name> <operator>=</operator> <name>go</name></expr>;</expr_stmt>
                <break>break;</break>
        }</block></switch>
        <expr_stmt><expr><name>add</name> <operator>+=</operator> <name>now</name></expr>;</expr_stmt>
        <if>if<condition>( <expr><name>add</name> <operator>==</operator> <name>prev</name></expr> )</condition><then>
        <block>{
            <break>break;</break>
        }</block></then></if>
        <comment type="line">// cout&lt;&lt;now,nl;</comment>
        <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>add</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nowdir</name> <operator>=</operator> <call><name>mod</name><argument_list>(<argument><expr><name>nowdir</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>

    <if>if<condition>( <expr><name>add</name><operator>+</operator><name>k</name> <operator>==</operator> <name>n</name><operator>*</operator><name>m</name></expr> )</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal></expr>;</expr_stmt></block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal></expr>;</expr_stmt></block></else></if>


    <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"\nTime elapsed: "</literal> <operator>&lt;&lt;</operator> <literal type="number">1000</literal> <operator>*</operator> <call><name>clock</name><argument_list>()</argument_list></call> <operator>/</operator> <name>CLOCKS_PER_SEC</name> <operator>&lt;&lt;</operator> <literal type="string">"ms\n"</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
