<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29081513_62786245.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name></cpp:macro> <cpp:value>register</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>Ruby_Rose</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>Ruby_Rose</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{
 	<expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>w</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>w</name><operator>=</operator><operator>(</operator><name>ch</name><operator>==</operator><literal type="char">'-'</literal><operator>)</operator></expr><operator>,</operator> <expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<while>while<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>ch</name><operator>^</operator><literal type="number">48</literal><operator>)</operator></expr><operator>,</operator> <expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<expr_stmt><expr><name>x</name><operator>=</operator><ternary><condition><expr><name>w</name></expr>?</condition><then><expr><operator>-</operator><name>x</name></expr></then><else>:<expr><name>x</name></expr></else></ternary></expr>;</expr_stmt>
}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>quickpow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>base</name></decl></parameter> ,<parameter><decl><type><name>ll</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>w</name></expr>)</condition>
	<block>{
		<if>if<condition>(<expr><name>w</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><name>ans</name><operator>*</operator><name>base</name><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>base</name><operator>=</operator><name>base</name><operator>*</operator><name>base</name><operator>%</operator><name>mod</name></expr><operator>,</operator> <expr><name>w</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>read</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>quickpow</name><argument_list>(<argument><expr><call><name>quickpow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
