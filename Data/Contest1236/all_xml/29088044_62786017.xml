<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29088044_62786017.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>vvi</name>;</typedef>


<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>cases</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>cases</name> <operator>&lt;</operator> <name>t</name></expr>;</condition> <incr><expr><operator>++</operator><name>cases</name></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>b</name><operator>*</operator><literal type="number">2</literal> <operator>&lt;</operator> <name>c</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>*</operator><name>b</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>rest</name> <init>= <expr><name>c</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><name>rest</name><operator>*</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>b</name> <operator>-=</operator> <name>rest</name></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>restb</name> <init>= <expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>*</operator><name>a</name></expr></argument>, <argument><expr><literal type="number">3</literal><operator>*</operator><name>restb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
}</block></function>  </unit>
